VERSION 5.00
Object = "{831FDD16-0C5C-11D2-A9FC-0000F8754DA1}#2.0#0"; "MSCOMCTL.OCX"
Object = "{4016B910-CCE8-4B27-95FA-006C7152BC93}#2.16#0"; "MacabiShared.ocx"
Object = "{5E9E78A0-531B-11CF-91F6-C2863C385E30}#1.0#0"; "MSFLXGRD.OCX"
Object = "{30CB9C1A-EE46-4D4C-BBDE-1D306015D2DD}#47.8#0"; "RequestRemark.ocx"
Object = "{53DB53AB-C26B-45DB-AD59-AEB893A8A326}#6.1#0"; "Snomed.ocx"
Object = "{E40B1134-8362-494C-99D9-AB6AD0E21EB5}#6.21#0"; "Organ.ocx"
Object = "{309307AC-C459-42D0-A890-5F79AA02EADE}#2.1#0"; "PhraseTemplate.ocx"
Begin VB.UserControl ResultEntryCtrl 
   BackColor       =   &H80000016&
   ClientHeight    =   9720
   ClientLeft      =   0
   ClientTop       =   0
   ClientWidth     =   15480
   KeyPreview      =   -1  'True
   ScaleHeight     =   9720
   ScaleWidth      =   15480
   Begin PhraseTemplate.PhraseTemplateCtrl PResultPhrase 
      Height          =   360
      Index           =   0
      Left            =   6840
      TabIndex        =   110
      Top             =   8520
      Visible         =   0   'False
      Width           =   6015
      _ExtentX        =   10610
      _ExtentY        =   635
   End
   Begin VB.CommandButton btnPrintFax 
      BackColor       =   &H80000016&
      Caption         =   "Print Fax"
      Enabled         =   0   'False
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.75
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   375
      Left            =   13320
      TabIndex        =   108
      Top             =   3480
      Width           =   1815
   End
   Begin MacabiShared.DockListCtrl DockListCtrl 
      Height          =   8415
      Left            =   5160
      TabIndex        =   87
      Top             =   6480
      Visible         =   0   'False
      Width           =   11655
      _ExtentX        =   20558
      _ExtentY        =   14843
   End
   Begin VB.TextBox txtPapHeader 
      BackColor       =   &H80000016&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   12
         Charset         =   177
         Weight          =   700
         Underline       =   -1  'True
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H000000FF&
      Height          =   345
      Left            =   3840
      Locked          =   -1  'True
      TabIndex        =   105
      Text            =   "PAP Type"
      Top             =   0
      Visible         =   0   'False
      Width           =   1575
   End
   Begin VB.CheckBox chkRefCancel 
      Alignment       =   1  'Right Justify
      Caption         =   "בטל שליפת הפניות"
      Height          =   375
      Left            =   2640
      TabIndex        =   104
      Top             =   9240
      Value           =   1  'Checked
      Visible         =   0   'False
      Width           =   1215
   End
   Begin VB.CheckBox chkCon 
      Caption         =   "Check1"
      Enabled         =   0   'False
      Height          =   195
      Left            =   13680
      TabIndex        =   102
      Top             =   5520
      Width           =   255
   End
   Begin VB.CheckBox chkConsult 
      Caption         =   "Check1"
      Height          =   255
      Left            =   14880
      TabIndex        =   100
      Top             =   5520
      Width           =   255
   End
   Begin VB.Frame fraMaxFreeText 
      BorderStyle     =   0  'None
      Height          =   255
      Left            =   4100
      TabIndex        =   74
      Top             =   120
      Visible         =   0   'False
      Width           =   255
   End
   Begin Organ.OrganCtrl OrganCtrl 
      Height          =   495
      Left            =   14280
      TabIndex        =   97
      Top             =   4920
      Width           =   855
      _ExtentX        =   1508
      _ExtentY        =   873
   End
   Begin VB.CommandButton CmdResponseLetter 
      Caption         =   "מכתב תשובה"
      Enabled         =   0   'False
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.75
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   375
      Left            =   13320
      TabIndex        =   96
      Top             =   3960
      Width           =   1815
   End
   Begin VB.CommandButton cmdAdditionalActions 
      Caption         =   "בקשות חוזרות"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.75
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   375
      Left            =   13320
      RightToLeft     =   -1  'True
      Style           =   1  'Graphical
      TabIndex        =   91
      Top             =   4440
      Visible         =   0   'False
      Width           =   1815
   End
   Begin VB.TextBox TxtAuthorizedOn 
      BackColor       =   &H80000016&
      Height          =   405
      Left            =   13320
      Locked          =   -1  'True
      TabIndex        =   89
      Top             =   8520
      Width           =   1935
   End
   Begin VB.TextBox SdgCompleted 
      BackColor       =   &H80000016&
      Height          =   405
      Left            =   13320
      Locked          =   -1  'True
      TabIndex        =   78
      Top             =   7800
      Width           =   1935
   End
   Begin VB.CheckBox chkPrintFax 
      Caption         =   "Print Fax On Authorise"
      Height          =   255
      Left            =   13200
      TabIndex        =   76
      Top             =   9480
      Visible         =   0   'False
      Width           =   1935
   End
   Begin VB.CheckBox chkPrintFinalLetter 
      Caption         =   "Print On Authorise"
      Height          =   255
      Left            =   13200
      TabIndex        =   75
      Top             =   9240
      Visible         =   0   'False
      Width           =   1935
   End
   Begin VB.PictureBox picHistory 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      BorderStyle     =   0  'None
      ForeColor       =   &H80000008&
      Height          =   255
      Left            =   2040
      ScaleHeight     =   255
      ScaleWidth      =   375
      TabIndex        =   72
      Top             =   120
      Visible         =   0   'False
      Width           =   375
   End
   Begin VB.TextBox PropsGeneralSdgAuthorized 
      BackColor       =   &H80000016&
      Height          =   405
      Index           =   0
      Left            =   13320
      Locked          =   -1  'True
      TabIndex        =   68
      Top             =   6120
      Width           =   1935
   End
   Begin VB.TextBox PropsGeneralSdgAuthorized 
      BackColor       =   &H80000016&
      Height          =   405
      Index           =   1
      Left            =   13320
      Locked          =   -1  'True
      TabIndex        =   67
      Top             =   6600
      Width           =   1935
   End
   Begin VB.TextBox PropsGeneralSdgAuthorized 
      BackColor       =   &H80000016&
      Height          =   405
      Index           =   2
      Left            =   13320
      Locked          =   -1  'True
      TabIndex        =   66
      Top             =   7080
      Width           =   1935
   End
   Begin VB.CommandButton btnPrint 
      BackColor       =   &H80000016&
      Caption         =   "Print"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.75
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   420
      Left            =   13320
      TabIndex        =   65
      Top             =   3000
      Width           =   1815
   End
   Begin MSComctlLib.ImageList HistoryImageList 
      Left            =   1440
      Top             =   0
      _ExtentX        =   1005
      _ExtentY        =   1005
      BackColor       =   -2147483643
      ImageWidth      =   16
      ImageHeight     =   16
      MaskColor       =   16777215
      UseMaskColor    =   0   'False
      _Version        =   393216
   End
   Begin VB.CommandButton SummaryButton 
      BackColor       =   &H80000016&
      Caption         =   "Summary"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.75
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   375
      Left            =   13320
      TabIndex        =   2
      Top             =   2040
      Width           =   1815
   End
   Begin VB.CommandButton CloseButton 
      BackColor       =   &H80000016&
      Caption         =   "Close"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.75
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   375
      Left            =   13320
      TabIndex        =   3
      Top             =   2520
      Width           =   1815
   End
   Begin VB.CommandButton SaveButton 
      BackColor       =   &H80000016&
      Caption         =   "Save"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.75
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   375
      Left            =   13320
      MaskColor       =   &H80000016&
      TabIndex        =   1
      Top             =   1080
      Width           =   1815
   End
   Begin VB.CommandButton AuthoriseButton 
      BackColor       =   &H80000016&
      Caption         =   "Authorise"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.75
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   375
      Left            =   13320
      TabIndex        =   36
      Top             =   1560
      Width           =   1815
   End
   Begin VB.TextBox SdgName 
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.75
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   360
      Left            =   13320
      TabIndex        =   0
      Top             =   240
      Width           =   1815
   End
   Begin VB.Frame PapsResultsfra 
      BackColor       =   &H80000016&
      BorderStyle     =   0  'None
      Caption         =   "Frame1"
      Height          =   8055
      Left            =   3960
      TabIndex        =   4
      Top             =   480
      Width           =   9000
      Begin VB.Frame frmDiagnosis 
         Height          =   375
         Left            =   0
         TabIndex        =   106
         Top             =   0
         Visible         =   0   'False
         Width           =   1215
         Begin VB.CommandButton cmdOrangeDiagnosis 
            BackColor       =   &H000080FF&
            Caption         =   "Diagnosis"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   177
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   375
            Left            =   0
            Style           =   1  'Graphical
            TabIndex        =   107
            Top             =   0
            Width           =   1245
         End
      End
      Begin MacabiShared.FreeTextTemplateCtrl PFreeTextResult 
         Height          =   855
         Index           =   1
         Left            =   0
         TabIndex        =   70
         Top             =   7200
         Visible         =   0   'False
         Width           =   8775
         _ExtentX        =   15478
         _ExtentY        =   1508
      End
      Begin VB.Frame PTestTabfra 
         BackColor       =   &H80000016&
         BorderStyle     =   0  'None
         Caption         =   "Frame1"
         Height          =   6615
         Index           =   1
         Left            =   -120
         TabIndex        =   5
         Top             =   720
         Width           =   7815
         Begin VB.CheckBox PResultCheck 
            BackColor       =   &H80000016&
            Caption         =   "Check1"
            Height          =   255
            Index           =   0
            Left            =   1400
            TabIndex        =   40
            Top             =   1560
            Visible         =   0   'False
            Width           =   255
         End
         Begin VB.TextBox PResultText 
            Height          =   285
            Index           =   0
            Left            =   1440
            TabIndex        =   39
            Text            =   "Text1"
            Top             =   2760
            Visible         =   0   'False
            Width           =   1095
         End
         Begin VB.Label PResultDesc 
            BackColor       =   &H80000016&
            Caption         =   "Label3"
            Height          =   255
            Index           =   0
            Left            =   1440
            TabIndex        =   41
            Top             =   600
            Visible         =   0   'False
            Width           =   1455
         End
         Begin VB.Line PResultLine 
            Index           =   0
            Visible         =   0   'False
            X1              =   2520
            X2              =   3960
            Y1              =   1080
            Y2              =   1080
         End
      End
      Begin VB.Frame PSummaryfra 
         BackColor       =   &H80000016&
         Caption         =   "Result Summary"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   9.75
            Charset         =   177
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   7095
         Left            =   0
         TabIndex        =   42
         Top             =   240
         Visible         =   0   'False
         Width           =   8775
         Begin VB.TextBox PSummaryText 
            BackColor       =   &H80000016&
            Height          =   6735
            Left            =   7920
            Locked          =   -1  'True
            MultiLine       =   -1  'True
            TabIndex        =   43
            Top             =   2400
            Width           =   7695
         End
      End
      Begin MSComctlLib.TabStrip PTestTab 
         Height          =   7095
         Left            =   0
         TabIndex        =   6
         Top             =   0
         Width           =   9000
         _ExtentX        =   15875
         _ExtentY        =   12515
         MultiRow        =   -1  'True
         ImageList       =   "HistoryImageList"
         _Version        =   393216
         BeginProperty Tabs {1EFB6598-857C-11D1-B16A-00C0F0283628} 
            NumTabs         =   1
            BeginProperty Tab1 {1EFB659A-857C-11D1-B16A-00C0F0283628} 
               ImageVarType    =   2
            EndProperty
         EndProperty
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "MS Sans Serif"
            Size            =   9.75
            Charset         =   177
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
      End
   End
   Begin RequestRemark.RequestRemarkCtrl RequestRemarkCtrl 
      Height          =   495
      Left            =   13320
      TabIndex        =   79
      Top             =   4920
      Width           =   855
      _ExtentX        =   1508
      _ExtentY        =   873
   End
   Begin MSFlexGridLib.MSFlexGrid gridAliquots 
      Height          =   255
      Left            =   120
      TabIndex        =   95
      Top             =   9000
      Visible         =   0   'False
      Width           =   10695
      _ExtentX        =   18865
      _ExtentY        =   450
      _Version        =   393216
      Rows            =   1
      Cols            =   1
      FixedRows       =   0
      FixedCols       =   0
      ScrollBars      =   1
      BorderStyle     =   0
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Courier New"
         Size            =   9.75
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
   End
   Begin Snomed.SnomedCtrl SnomedCtrl 
      Height          =   510
      Index           =   0
      Left            =   720
      TabIndex        =   90
      Top             =   9360
      Visible         =   0   'False
      Width           =   855
      _ExtentX        =   1508
      _ExtentY        =   900
   End
   Begin VB.CheckBox chkQC 
      Caption         =   "Check1"
      Enabled         =   0   'False
      Height          =   315
      Left            =   15120
      TabIndex        =   99
      TabStop         =   0   'False
      Top             =   5760
      Visible         =   0   'False
      Width           =   255
   End
   Begin VB.Frame PatientPropsfra 
      BackColor       =   &H80000016&
      BorderStyle     =   0  'None
      Caption         =   "General"
      Height          =   7575
      Index           =   1
      Left            =   0
      TabIndex        =   8
      Top             =   840
      Width           =   3615
      Begin VB.CommandButton cmd_assutaPdf 
         BackColor       =   &H80000016&
         Caption         =   "מסמכים מצורפים"
         Enabled         =   0   'False
         Height          =   375
         Left            =   1440
         Style           =   1  'Graphical
         TabIndex        =   109
         Top             =   4200
         Width           =   2055
      End
      Begin VB.TextBox PropsGeneralPatientName 
         BackColor       =   &H80000016&
         Height          =   405
         Left            =   1440
         Locked          =   -1  'True
         TabIndex        =   19
         Top             =   480
         Width           =   2055
      End
      Begin VB.ComboBox cmbPatholog 
         Height          =   336
         Left            =   1440
         Style           =   2  'Dropdown List
         TabIndex        =   10
         Top             =   7080
         Width           =   2052
      End
      Begin VB.TextBox PropsGeneralPatientGender 
         BackColor       =   &H80000016&
         Height          =   405
         Left            =   1440
         Locked          =   -1  'True
         TabIndex        =   45
         Top             =   1440
         Width           =   2055
      End
      Begin VB.TextBox PropsGeneralPatientBirth 
         BackColor       =   &H80000016&
         Height          =   405
         Left            =   1440
         Locked          =   -1  'True
         TabIndex        =   17
         Top             =   1920
         Width           =   2055
      End
      Begin VB.TextBox PropsGeneralReferring 
         BackColor       =   &H80000018&
         Height          =   405
         Left            =   1440
         Locked          =   -1  'True
         TabIndex        =   16
         Top             =   3000
         Width           =   2055
      End
      Begin VB.TextBox PropsGeneralSubmitting 
         BackColor       =   &H80000018&
         Height          =   405
         Left            =   1440
         Locked          =   -1  'True
         TabIndex        =   15
         Top             =   3480
         Width           =   2055
      End
      Begin VB.TextBox PropsGeneralSdgPriority 
         BackColor       =   &H80000016&
         Height          =   405
         Left            =   1440
         Locked          =   -1  'True
         TabIndex        =   14
         Top             =   4680
         Width           =   2055
      End
      Begin VB.TextBox PropsGeneralSdgDelivery 
         BackColor       =   &H80000016&
         Height          =   405
         Left            =   1440
         Locked          =   -1  'True
         TabIndex        =   13
         Top             =   5160
         Width           =   2055
      End
      Begin VB.TextBox PropsGeneralSdgSlides 
         BackColor       =   &H80000016&
         Height          =   405
         Left            =   1440
         Locked          =   -1  'True
         TabIndex        =   12
         Top             =   5640
         Width           =   2055
      End
      Begin VB.TextBox PropsGeneralSdgCollection 
         BackColor       =   &H80000016&
         Height          =   405
         Left            =   1440
         Locked          =   -1  'True
         TabIndex        =   11
         Top             =   6120
         Width           =   2055
      End
      Begin VB.TextBox PropsGeneralSdgWeek 
         BackColor       =   &H80000016&
         Height          =   405
         Left            =   1440
         Locked          =   -1  'True
         TabIndex        =   9
         Top             =   6600
         Width           =   2055
      End
      Begin VB.TextBox PropsGeneralPatientID 
         BackColor       =   &H80000016&
         Height          =   405
         Left            =   1440
         Locked          =   -1  'True
         TabIndex        =   18
         Top             =   960
         Width           =   2055
      End
      Begin VB.Label Label1 
         BackColor       =   &H80000016&
         Caption         =   "Name:"
         Height          =   405
         Index           =   0
         Left            =   120
         TabIndex        =   32
         Top             =   480
         Width           =   1815
      End
      Begin VB.Label Label1 
         BackColor       =   &H80000016&
         Caption         =   "Patholog:"
         Height          =   405
         Index           =   12
         Left            =   120
         TabIndex        =   86
         Top             =   7080
         Width           =   1215
      End
      Begin VB.Label Label1 
         BackColor       =   &H80000016&
         Caption         =   "Gender"
         Height          =   405
         Index           =   2
         Left            =   120
         TabIndex        =   44
         Top             =   1440
         Width           =   1815
      End
      Begin VB.Label Label1 
         BackColor       =   &H80000016&
         Caption         =   "ID Number:"
         Height          =   405
         Index           =   1
         Left            =   120
         TabIndex        =   31
         Top             =   960
         Width           =   1815
      End
      Begin VB.Label Label1 
         BackColor       =   &H80000016&
         Caption         =   "Year of Birth:"
         Height          =   405
         Index           =   3
         Left            =   120
         TabIndex        =   30
         Top             =   1920
         Width           =   1815
      End
      Begin VB.Label Label1 
         BackColor       =   &H80000016&
         Caption         =   "Referring:"
         Height          =   405
         Index           =   4
         Left            =   120
         TabIndex        =   29
         Top             =   3000
         Width           =   1815
      End
      Begin VB.Label Label1 
         BackColor       =   &H80000016&
         Caption         =   "Submitting:"
         Height          =   405
         Index           =   5
         Left            =   120
         TabIndex        =   28
         Top             =   3480
         Width           =   1815
      End
      Begin VB.Label Label1 
         BackColor       =   &H80000016&
         Caption         =   "Priority:"
         Height          =   405
         Index           =   6
         Left            =   120
         TabIndex        =   27
         Top             =   4680
         Width           =   1815
      End
      Begin VB.Label Label1 
         BackColor       =   &H80000016&
         Caption         =   "Date :"
         Height          =   405
         Index           =   7
         Left            =   120
         TabIndex        =   26
         Top             =   5160
         Width           =   1815
      End
      Begin VB.Label Label1 
         BackColor       =   &H80000016&
         Caption         =   "No. of Slides"
         Height          =   405
         Index           =   8
         Left            =   120
         TabIndex        =   25
         Top             =   5640
         Width           =   1815
      End
      Begin VB.Label Label1 
         BackColor       =   &H80000016&
         Caption         =   "Refferer :"
         Height          =   405
         Index           =   9
         Left            =   120
         TabIndex        =   24
         ToolTipText     =   "גורם שולח"
         Top             =   6120
         Width           =   1335
      End
      Begin VB.Label Label1 
         BackColor       =   &H80000016&
         Caption         =   "Preg Week:"
         Height          =   405
         Index           =   10
         Left            =   120
         TabIndex        =   23
         Top             =   6600
         Width           =   1215
      End
      Begin VB.Label Label1 
         BackColor       =   &H80000016&
         Caption         =   "Patient"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   9.75
            Charset         =   177
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   255
         Index           =   14
         Left            =   0
         TabIndex        =   22
         Top             =   120
         Width           =   1815
      End
      Begin VB.Label Label1 
         BackColor       =   &H80000016&
         Caption         =   "Physicians"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   9.75
            Charset         =   177
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   405
         Index           =   15
         Left            =   0
         TabIndex        =   21
         Top             =   2520
         Width           =   1815
      End
      Begin VB.Label Label1 
         BackColor       =   &H80000016&
         Caption         =   "Request"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   9.75
            Charset         =   177
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   405
         Index           =   17
         Left            =   0
         TabIndex        =   20
         Top             =   4200
         Width           =   1815
      End
   End
   Begin VB.Frame PatientPropsfra 
      BackColor       =   &H80000016&
      BorderStyle     =   0  'None
      Caption         =   "Frame1"
      Height          =   7575
      Index           =   5
      Left            =   120
      TabIndex        =   34
      Top             =   840
      Width           =   3615
      Begin VB.TextBox PropsReferralDiagnose 
         Alignment       =   1  'Right Justify
         BackColor       =   &H80000016&
         Height          =   2535
         Index           =   2
         Left            =   120
         Locked          =   -1  'True
         MultiLine       =   -1  'True
         RightToLeft     =   -1  'True
         TabIndex        =   93
         Top             =   4320
         Width           =   3255
      End
      Begin VB.TextBox PropsReferralDiagnose 
         Alignment       =   1  'Right Justify
         BackColor       =   &H80000016&
         Height          =   2535
         Index           =   1
         Left            =   120
         Locked          =   -1  'True
         MultiLine       =   -1  'True
         RightToLeft     =   -1  'True
         TabIndex        =   92
         Top             =   960
         Width           =   3255
      End
      Begin VB.Label Label5 
         Alignment       =   1  'Right Justify
         BackColor       =   &H80000016&
         Caption         =   "מבצע:"
         Height          =   255
         Left            =   2160
         RightToLeft     =   -1  'True
         TabIndex        =   62
         Top             =   360
         Width           =   1215
      End
      Begin VB.Label Label8 
         Alignment       =   1  'Right Justify
         BackColor       =   &H80000016&
         Caption         =   "מפנה:"
         Height          =   255
         Left            =   2160
         RightToLeft     =   -1  'True
         TabIndex        =   94
         Top             =   3840
         Width           =   1215
      End
   End
   Begin VB.Frame PatientPropsfra 
      BackColor       =   &H80000016&
      BorderStyle     =   0  'None
      Caption         =   "Frame1"
      Height          =   7575
      Index           =   2
      Left            =   120
      TabIndex        =   7
      Top             =   840
      Width           =   3615
      Begin MSFlexGridLib.MSFlexGrid HistoryGrid 
         Height          =   7335
         Left            =   0
         TabIndex        =   71
         Top             =   240
         Width           =   3585
         _ExtentX        =   6324
         _ExtentY        =   12938
         _Version        =   393216
         Cols            =   3
         FixedCols       =   0
         AllowUserResizing=   1
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "MS Sans Serif"
            Size            =   9.75
            Charset         =   177
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
      End
      Begin MSComctlLib.ListView HistoryList 
         Height          =   30
         Left            =   0
         TabIndex        =   73
         Top             =   7545
         Visible         =   0   'False
         Width           =   3705
         _ExtentX        =   6535
         _ExtentY        =   53
         View            =   3
         LabelEdit       =   1
         SortOrder       =   -1  'True
         Sorted          =   -1  'True
         LabelWrap       =   -1  'True
         HideSelection   =   -1  'True
         FullRowSelect   =   -1  'True
         GridLines       =   -1  'True
         _Version        =   393217
         SmallIcons      =   "HistoryImageList"
         ForeColor       =   -2147483640
         BackColor       =   -2147483643
         BorderStyle     =   1
         Appearance      =   1
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "MS Sans Serif"
            Size            =   9.75
            Charset         =   177
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         NumItems        =   3
         BeginProperty ColumnHeader(1) {BDD1F052-858B-11D1-B16A-00C0F0283628} 
            Text            =   "Request"
            Object.Width           =   2540
         EndProperty
         BeginProperty ColumnHeader(2) {BDD1F052-858B-11D1-B16A-00C0F0283628} 
            SubItemIndex    =   1
            Text            =   "Date"
            Object.Width           =   2540
         EndProperty
         BeginProperty ColumnHeader(3) {BDD1F052-858B-11D1-B16A-00C0F0283628} 
            SubItemIndex    =   2
            Text            =   "Snomed"
            Object.Width           =   2540
         EndProperty
      End
   End
   Begin MSComctlLib.TabStrip PatientProps 
      Height          =   8055
      Left            =   0
      TabIndex        =   35
      Top             =   480
      Width           =   3850
      _ExtentX        =   6800
      _ExtentY        =   14208
      TabWidthStyle   =   2
      TabFixedWidth   =   3341
      TabMinWidth     =   3341
      _Version        =   393216
      BeginProperty Tabs {1EFB6598-857C-11D1-B16A-00C0F0283628} 
         NumTabs         =   2
         BeginProperty Tab1 {1EFB659A-857C-11D1-B16A-00C0F0283628} 
            Caption         =   "General"
            ImageVarType    =   2
         EndProperty
         BeginProperty Tab2 {1EFB659A-857C-11D1-B16A-00C0F0283628} 
            Caption         =   "History"
            ImageVarType    =   2
         EndProperty
      EndProperty
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "MS Sans Serif"
         Size            =   9.75
         Charset         =   177
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
   End
   Begin VB.Frame PatientPropsfra 
      BackColor       =   &H80000016&
      BorderStyle     =   0  'None
      Caption         =   "Frame1"
      Height          =   7575
      Index           =   3
      Left            =   120
      TabIndex        =   33
      Top             =   840
      Width           =   3615
      Begin VB.TextBox PropsPhysRefAddress 
         BackColor       =   &H80000016&
         Height          =   1605
         Left            =   1440
         Locked          =   -1  'True
         MultiLine       =   -1  'True
         TabIndex        =   55
         Top             =   720
         Width           =   2055
      End
      Begin VB.TextBox PropsPhysSubAddress 
         BackColor       =   &H80000016&
         Height          =   1605
         Left            =   1440
         Locked          =   -1  'True
         MultiLine       =   -1  'True
         TabIndex        =   57
         Top             =   5040
         Width           =   2055
      End
      Begin VB.TextBox PropsPhysColAddress 
         BackColor       =   &H80000016&
         Height          =   1605
         Left            =   1440
         Locked          =   -1  'True
         MultiLine       =   -1  'True
         TabIndex        =   56
         Top             =   2880
         Width           =   2055
      End
      Begin VB.TextBox PropsPhysSubName 
         BackColor       =   &H80000016&
         Height          =   405
         Left            =   1440
         Locked          =   -1  'True
         TabIndex        =   54
         Top             =   4560
         Width           =   2055
      End
      Begin VB.TextBox PropsPhysColName 
         BackColor       =   &H80000016&
         Height          =   405
         Left            =   1440
         Locked          =   -1  'True
         TabIndex        =   53
         Top             =   2400
         Width           =   2055
      End
      Begin VB.TextBox PropsPhysRefName 
         BackColor       =   &H80000016&
         Height          =   405
         Left            =   1440
         Locked          =   -1  'True
         TabIndex        =   52
         Top             =   240
         Width           =   2055
      End
      Begin VB.Label Label3 
         BackColor       =   &H80000016&
         Caption         =   "Address:"
         Height          =   255
         Index           =   5
         Left            =   120
         TabIndex        =   51
         Top             =   5040
         Width           =   1695
      End
      Begin VB.Label Label3 
         BackColor       =   &H80000016&
         Caption         =   "Referring Physician:"
         Height          =   255
         Index           =   4
         Left            =   120
         TabIndex        =   50
         Top             =   240
         Width           =   1695
      End
      Begin VB.Label Label3 
         BackColor       =   &H80000016&
         Caption         =   "Address:"
         Height          =   255
         Index           =   3
         Left            =   120
         TabIndex        =   49
         Top             =   2880
         Width           =   1695
      End
      Begin VB.Label Label3 
         BackColor       =   &H80000016&
         Caption         =   "Collection St.:"
         Height          =   255
         Index           =   2
         Left            =   120
         TabIndex        =   48
         Top             =   2400
         Width           =   1695
      End
      Begin VB.Label Label3 
         BackColor       =   &H80000016&
         Caption         =   "Address:"
         Height          =   255
         Index           =   1
         Left            =   120
         TabIndex        =   47
         Top             =   720
         Width           =   1695
      End
      Begin VB.Label Label3 
         BackColor       =   &H80000016&
         Caption         =   "Submitting Physician:"
         Height          =   255
         Index           =   0
         Left            =   120
         TabIndex        =   46
         Top             =   4560
         Width           =   1695
      End
   End
   Begin VB.Frame PatientPropsfra 
      BackColor       =   &H80000016&
      BorderStyle     =   0  'None
      Caption         =   "Frame1"
      Height          =   7575
      Index           =   4
      Left            =   120
      TabIndex        =   37
      Top             =   840
      Width           =   3615
      Begin VB.TextBox PropsPatientAddress 
         BackColor       =   &H80000016&
         Height          =   1605
         Left            =   960
         Locked          =   -1  'True
         MultiLine       =   -1  'True
         TabIndex        =   61
         Top             =   600
         Width           =   2535
      End
      Begin VB.TextBox PropsPatientName 
         BackColor       =   &H80000016&
         Height          =   405
         Left            =   960
         Locked          =   -1  'True
         TabIndex        =   60
         Top             =   120
         Width           =   2535
      End
      Begin VB.Label Label4 
         BackColor       =   &H80000016&
         Caption         =   "Address:"
         Height          =   255
         Index           =   1
         Left            =   120
         TabIndex        =   59
         Top             =   600
         Width           =   1575
      End
      Begin VB.Label Label4 
         BackColor       =   &H80000016&
         Caption         =   "Name:"
         Height          =   255
         Index           =   0
         Left            =   120
         TabIndex        =   58
         Top             =   120
         Width           =   1575
      End
   End
   Begin VB.Label lblPayingCustomer 
      Alignment       =   1  'Right Justify
      BackColor       =   &H80000016&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   12
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   495
      Left            =   13320
      TabIndex        =   111
      Top             =   600
      Width           =   1815
   End
   Begin VB.Label Label11 
      Caption         =   "Con"
      Height          =   255
      Left            =   13320
      TabIndex        =   103
      Top             =   5520
      Width           =   375
   End
   Begin VB.Label Label9 
      Caption         =   "Consult"
      Height          =   255
      Left            =   14160
      TabIndex        =   101
      Top             =   5520
      Width           =   735
   End
   Begin VB.Label lblSampleCodeRemark 
      Alignment       =   2  'Center
      BackColor       =   &H00C0FFFF&
      BorderStyle     =   1  'Fixed Single
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   12
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H000000FF&
      Height          =   375
      Left            =   3000
      TabIndex        =   98
      Top             =   -45
      Visible         =   0   'False
      Width           =   2415
   End
   Begin VB.Label LblAuthorizedOn 
      BackColor       =   &H80000016&
      Caption         =   "Authorized On"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.75
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   255
      Left            =   13320
      TabIndex        =   88
      Top             =   8280
      Width           =   1815
   End
   Begin VB.Label LblRevisionStatus 
      Alignment       =   1  'Right Justify
      BackColor       =   &H80000016&
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   12
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   375
      Left            =   11640
      TabIndex        =   85
      Top             =   -45
      Width           =   1695
   End
   Begin VB.Label lblStatusBar 
      Height          =   255
      Left            =   120
      TabIndex        =   84
      Top             =   8640
      Width           =   8415
   End
   Begin VB.Image ImageRes 
      Height          =   240
      Index           =   0
      Left            =   5640
      Top             =   360
      Visible         =   0   'False
      Width           =   240
   End
   Begin VB.Label LblMaterialValue 
      Alignment       =   1  'Right Justify
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.75
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H000000FF&
      Height          =   195
      Left            =   13140
      TabIndex        =   83
      Top             =   8880
      Visible         =   0   'False
      Width           =   315
   End
   Begin VB.Label LblMaterialTitle 
      Alignment       =   1  'Right Justify
      AutoSize        =   -1  'True
      Caption         =   ":נשאר חומר"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.75
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00C00000&
      Height          =   195
      Left            =   13620
      TabIndex        =   82
      Top             =   9000
      Visible         =   0   'False
      Width           =   1035
   End
   Begin VB.Label LblTotalLines 
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.75
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   255
      Left            =   12240
      TabIndex        =   81
      Top             =   8640
      Width           =   495
   End
   Begin VB.Label Label7 
      AutoSize        =   -1  'True
      BackColor       =   &H80000018&
      Caption         =   "Total Lines:"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.75
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H8000000D&
      Height          =   240
      Left            =   10920
      TabIndex        =   80
      Top             =   8640
      Width           =   1230
   End
   Begin VB.Label Label1 
      BackColor       =   &H80000016&
      Caption         =   "Completed by"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.75
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   255
      Index           =   11
      Left            =   13320
      TabIndex        =   77
      Top             =   7560
      Width           =   1815
   End
   Begin VB.Label Label1 
      BackColor       =   &H80000016&
      Caption         =   "Authorised by"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.75
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   255
      Index           =   18
      Left            =   13320
      TabIndex        =   69
      Top             =   5880
      Width           =   1815
   End
   Begin VB.Label lblRequestTitle 
      Alignment       =   2  'Center
      BackColor       =   &H00C0FFFF&
      BorderStyle     =   1  'Fixed Single
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   12
         Charset         =   177
         Weight          =   700
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   375
      Left            =   5520
      TabIndex        =   64
      Top             =   -45
      Width           =   6015
   End
   Begin VB.Image imgHistory 
      Height          =   270
      Left            =   2640
      Stretch         =   -1  'True
      Top             =   120
      Visible         =   0   'False
      Width           =   255
   End
   Begin VB.Label Label6 
      BackColor       =   &H80000016&
      Caption         =   "QC:"
      Height          =   255
      Left            =   15000
      TabIndex        =   63
      Top             =   5520
      Visible         =   0   'False
      Width           =   375
   End
   Begin VB.Image SdgStatusImage 
      Height          =   270
      Left            =   240
      Stretch         =   -1  'True
      Top             =   120
      Width           =   270
   End
   Begin VB.Label Label2 
      Alignment       =   1  'Right Justify
      AutoSize        =   -1  'True
      BackColor       =   &H80000016&
      Caption         =   "מספר פנימי:"
      Height          =   240
      Left            =   13320
      RightToLeft     =   -1  'True
      TabIndex        =   38
      Top             =   0
      Width           =   1815
   End
   Begin VB.Menu MnSnomed 
      Caption         =   ""
      Visible         =   0   'False
      Begin VB.Menu MnShowSnomed 
         Caption         =   "Show Snomed"
      End
   End
End
Attribute VB_Name = "ResultEntryCtrl"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit


' +---------------------------------------------------------------------------+
' | ResultEntryCtrl
' |
' | Modifaction history:
' |
' +------------+--------+-----------------------------------------------------+
' | Date       | By     | Description
' +------------+--------+-----------------------------------------------------+
' | DD-MM-YYYY |        | Created
' | 19-05-2005 | Barak  | Added patholog combo
' | 01-08-2011 | Yonatan| Added Print Fax button (request 769)
' | 02-08-2011 | Yonatan| Added multiple PAP slides validation (request 782)
' +------------+--------+-----------------------------------------------------+

Implements LSExtensionWindowLib.IExtensionWindow

Private Const RESULTSFRAMEWIDTH = 9300
Private Const MALIGNANT_REQUEST = &HFFC0C0

Private ProcessXML As LSSERVICEPROVIDERLib.NautilusProcessXML
Private NtlsCon As LSSERVICEPROVIDERLib.NautilusDBConnection
Private NtlsSite As LSExtensionWindowLib.IExtensionWindowSite
Private NtlsUser As LSSERVICEPROVIDERLib.NautilusUser
Private BarcodeField As String
Private OriginalFreeTextRes() As String

Private sp As LSSERVICEPROVIDERLib.NautilusServiceProvider

'_________________________________________________
'pat002
Private Const PapLbcAliquotWF = "PAPS LBC Aliquot"
Private Const PAP_TEST_CODE_MEDICAL = "8146"
Private Const PAP_LBC_TEST_CODE_MEDICAL = "81460"
Private Const PAP_LBC_TEST_CODE = "81490"
Private Const PAP_SMEAR_HEADER = "PAP Smear"
Private Const PAP_LBC_HEADER = "PAP LBC"
Private Const GREEN = &HC000&
Private Const PINK = &HFF00FF

'__________________________________________________
'___________________________

'-------------------------- GLOBAL SEMAPHORE ---------------------------------

'a handle to the requests's semaphore:
'it is used to prevent the working on the
'same request from different workstations;
'could be:
'1. empty - no open request
'2. handle value - a request is open
Dim strHandle As String

'-------------------------- LOCAL SEMAPHORE -----------------------------------

'data related to the local semaphore:
'prevent opening more than one instance of the application per workstation

'the id of the relevant mutex:
Private lMutexHandle As Long

'a type needed to be used in calling the mutex function:
Private Type SECURITY_ATTRIBUTES
        nLength As Long
        lpSecurityDescriptor As Long
        bInheritHandle As Long
End Type

'functions to operate the mutex:
Private Declare Function CreateMutex Lib "kernel32" Alias "CreateMutexA" (lpMutexAttributes As SECURITY_ATTRIBUTES, ByVal bInitialOwner As Boolean, ByVal lpName As String) As Long
'Private Declare Function CreateMutex Lib "kernel32" Alias "CreateMutexA" (lpMutexAttributes As SECURITY_ATTRIBUTES, ByVal bInitialOwner As Long, ByVal lpName As String) As Long
Private Declare Function WaitForSingleObject Lib "kernel32" (ByVal hHandle As Long, ByVal dwMilliseconds As Long) As Long
Private Declare Function ReleaseMutex Lib "kernel32" (ByVal hMutex As Long) As Long
Private Declare Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long
Private Declare Function LoadKeyboardLayout Lib "user32" Alias "LoadKeyboardLayoutA" (ByVal pwszKLID As String, ByVal Flags As Long) As Long
'Private Declare Function GlobalAddAtom Lib "kernel32" Alias "GlobalAddAtomA" (ByVal lpString As String) As Integer
'Private Declare Function GlobalDeleteAtom Lib "kernel32" (ByVal nAtom As Integer) As Integer
'Private Declare Function GlobalFindAtom Lib "kernel32" Alias "GlobalFindAtomA" (ByVal lpString As String) As Integer
'Private Const MyAtomName As String = "REorDiag"
Private CurrAtom As Integer
Private Const ERROR_ALREADY_EXISTS = 183&
'----------------------------------------------------------------------------------

Private Con As ADODB.connection
Private Sdg As ADODB.Recordset
Private Referring As ADODB.Recordset
Private Aliquots As ADODB.Recordset
Private Implement As ADODB.Recordset
Private Patient As ADODB.Recordset
Private Results As ADODB.Recordset
Private History As ADODB.Recordset
Private SnomedMCalculation As ADODB.Recordset
Private SnomedTCalculation As ADODB.Recordset
Private SampleCodes As ADODB.Recordset
Private OrderAndCostumer As ADODB.Recordset


Private Role As ADODB.Recordset
Private InspectionLog As ADODB.Recordset
Private PropsCurFrame As Integer
Private TestCurFrame As Integer
Private PResultIndex As Integer
Private PResultCheckIndex As Integer
Private PResultTextIndex As Integer
Private PResultPhraseIndex As Integer
Private PFreeTextResultIndex As Integer
Private PSnomedIndex As Integer
Private OpenedRequest As Boolean
Private PrintFaxResult As Dictionary
Private PrintFax As Boolean
Private PathologCodes As Scripting.Dictionary
Private PathologCoredNumberToName As Scripting.Dictionary
Private Ref As Referrals.Referral

'isMicroTextSaved
Private IsMicroTextSaved As Boolean

Private VisibleResultTab As Dictionary

Const csHeBrEw As String = "iso-8859-8" ' Hebrew character set

Private Const PTestTabFraHeight = 6615
Private Const PTestTabHeight = 7095

Private Const nInch = 1440
Private Const MAX_WIDTH = 14535
Private Const RED = &HFF&
Private Const BLACK = &H80000008

Private Inspect As Boolean
Private PQCParameter As Integer
Private CQCParameter As Integer
Private HQCParameter As Integer
Private QcRank As Integer

Private MandatoryExists As Boolean
Private FreeTextNormalSize As Boolean
Private FreeTextNormalTop As Long
Private FreeTextNormalLeft As Long
Private FreeTextNormalHeight As Long
Private FreeTextNormalWidth As Long
Private FreeTextContainer As Object

Private AuthoriseButtonFlag As Boolean
Private CurrFreeTextIndx As Integer

Private WorkFolder As String

Private sdg_log As New SdgLog.CreateLog
Private sdg_log_desc As String

Private didShowPDFError As Boolean

Private dicResultIdToName As New Dictionary


Public RunFromWindow As Boolean
Public Event CloseClicked()

Dim WithEvents SnomedParser As Snomed.Parser
Attribute SnomedParser.VB_VarHelpID = -1

Type tagPOINT
    X As Long
    Y As Long
End Type

Private Debugging As Boolean
Private TamplatePFResInsex As Integer


'tells if we should read from the RTF_RESULT_BACKUP table;
' 0 - ask the user
' 1 - read from backup
' 2 - do not read
' 3 - do not read but do not delete backup record
Private nRTFResultBackup As Integer

'Private Const WM_USER = &H400
'Private Const EM_SETSCROLLPOS = WM_USER + 222
'Private Declare Function SendMessage Lib "user32.dll" Alias "SendMessageA" (ByVal hWnd As Long, ByVal Msg As Long, ByVal wParam As Long, lParam As Any) As Long

Private Function faIndex(row As Integer, col As Integer) As Long
50        On Error GoTo ErrHnd
60        faIndex = row * HistoryGrid.Cols + col
70        Exit Function
ErrHnd:
80        Call ErrHandler("faIndex")
          
End Function

Private Sub btnPrintFax_Click()
90        Call btnPrint_Click
End Sub

Private Sub btnSpecialAuth_Click()
100       On Error GoTo ErrHnd
110       If Not OpenedRequest Then Exit Sub
120       Set frmSpecialAuth.Con = Con
130       frmSpecialAuth.SdgId = CDbl(Sdg("SDG_ID"))
140       frmSpecialAuth.Show vbModal
150       sdg_log_desc = ""
160       Call sdg_log.InsertLog(Sdg("SDG_ID"), "RE.SPEC", sdg_log_desc)
170       Exit Sub
ErrHnd:
180       Call ErrHandler("btnSpecialAuth_Click")
End Sub

Private Sub cmbPatholog_Change()
'MsgBox cmbPatholog.Text
End Sub

Private Sub cmbPatholog_Click()
190   On Error GoTo ERR_cmbPatholog_Click
          
200       If Sdg("STATUS") <> "A" And PathologCodes.Exists(cmbPatholog.Text) Then

210           Call UpdatePatholog
              'MsgBox cmbPatholog.Text
220       End If
          
          
230       Exit Sub
ERR_cmbPatholog_Click:
240   MsgBox "ERR_cmbPatholog_Click" & vbCrLf & Err.Description
End Sub


Private Sub UpdatePatholog()
250   On Error GoTo ERR_UpdatePatholog

          Dim strOldPatholog As String
          Dim strNewPatholog As String

260       strOldPatholog = PathologCoredNumberToName(nte(Sdg("U_PATHOLOG")))
270       strNewPatholog = cmbPatholog.Text
          
280       If strOldPatholog = strNewPatholog Then Exit Sub

290       Call Con.Execute(" update lims_sys.sdg_user " & _
                           " set U_PATHOLOG = '" & PathologCodes(strNewPatholog) & "' " & _
                           " where sdg_id = " & Sdg("SDG_ID"))
                           
300       Call sdg_log.InsertLog(Sdg("sdg_id"), "PATHOLOG.UPD", _
                                 "New: " & strNewPatholog & ", Old: " & strOldPatholog)

310       Exit Sub
ERR_UpdatePatholog:
320   MsgBox "ERR_UpdatePatholog" & vbCrLf & Err.Description
End Sub


Private Sub cmd_assutaPdf_Click()
       
330    frmShowAssutaPdf.assutaMacase = nte(Sdg("U_MACASE"))
340    frmShowAssutaPdf.assutaPdfPath = nte(Sdg("U_ATFILENM"))
350    frmShowAssutaPdf.Init
360   If (frmShowAssutaPdf.assutaPdfPath <> "" And frmShowAssutaPdf.IsRead) Then
370       frmShowAssutaPdf.Show vbModal
380       Call sdg_log.InsertLog(Sdg("SDG_ID"), "ResultEntryAttached.Open", frmShowAssutaPdf.IsReadDescription)

390   End If


End Sub

Private Sub cmdAdditionalActions_Click()
400   On Error GoTo ERR_cmdAdditionalActions_Click
       
410       Call frmAdditionalActions.Initialize(Con, Sdg, NtlsUser, sdg_log, _
                                               WorkFolder, ProcessXML)
420       Call frmAdditionalActions.Show(vbModal)
          
430       Call SignalExtraRequest(nte(Sdg("external_reference")))

440   Exit Sub
ERR_cmdAdditionalActions_Click:
450   MsgBox "cmdAdditionalActions_Click" & vbCrLf & Err.Description
End Sub






Private Sub CmdResponseLetter_Click()
460   On Error GoTo ERR_CmdResponseLetter_Click
          Dim strErr As String

      '    strErr = frmResponseLetter.initialize(Sdg("sdg_id"))
      '    If strErr = "" Then
470           Call frmResponseLetter.Show(vbModal)
480           Call frmResponseLetter.Initialize(Sdg("sdg_id"))
      '    End If
490   Exit Sub
ERR_CmdResponseLetter_Click:
500   MsgBox "ERR_CmdResponseLetter_Click" & vbCrLf & Err.Description
End Sub

Private Sub LoalResponseLetter(strSdgId As String)
510   On Error GoTo ERR_LoalResponseLetter
          
          Dim strErr As String
520       strErr = frmResponseLetter.Initialize(Sdg("sdg_id"))
          
530       CmdResponseLetter.Enabled = False
540       If strErr = "" Then
550           CmdResponseLetter.Enabled = True
560       ElseIf strErr = "372" And didShowPDFError = False Then
              'an error of missing the program to show PDFs
      '        MsgBox "Error" & vbCrLf & _
                     "Missing PDF component"
          
              'show this error only once per opening of the screen:
570           didShowPDFError = True
580       End If

590       Exit Sub
ERR_LoalResponseLetter:
600   MsgBox "ERR_LoalResponseLetter" & vbCrLf & Err.Description
End Sub



Private Sub DockListCtrl_CloseList()
610       DockListCtrl.Visible = False
620       Call SetSelectedTextList
End Sub


'Get the list of selected texts from the DockList;
'The list maps a text phrase to Snomed-M;
'insert that data in the relevant locations:
Private Sub SetSelectedTextList()
630   On Error GoTo ERR_SetSelectedTextList

          Dim dTextToSnomed As Dictionary
          Dim i As Integer
          Dim iSnomedMIndex As Integer
          
640       Set dTextToSnomed = DockListCtrl.GetSelectedList()
650       iSnomedMIndex = GetSnomedMResultIndex
          
660       For i = 0 To dTextToSnomed.Count - 1

670           Call AddSnomedMItem(iSnomedMIndex, CStr(dTextToSnomed.Items(i)))
              'Call AddFreeText(CStr(dTextToSnomed.Keys(i)))

680       Next i

690       Exit Sub
ERR_SetSelectedTextList:
700   MsgBox "ERR_SetSelectedTextList" & vbCrLf & Err.Description
End Sub


Private Sub AddSnomedMItem(iSnomedMIndex As Integer, strSnomedM As String)
710   On Error GoTo ERR_AddSnomedMItem
          
          Dim strSnomedMList As String

720       strSnomedMList = PResultText(iSnomedMIndex).Text
          
730       If strSnomedMList = "" Then
740           strSnomedMList = strSnomedM
750       ElseIf InStr(1, strSnomedMList, strSnomedM) = 0 Then
760           strSnomedMList = strSnomedMList & "," & strSnomedM
770       End If
          
780       PResultText(iSnomedMIndex).Text = strSnomedMList

790       Exit Sub
ERR_AddSnomedMItem:
800   MsgBox "ERR_AddSnomedMItem" & vbCrLf & Err.Description
End Sub

Private Sub AddFreeText(strText As String)
810   On Error GoTo ERR_AddFreeText


820       Exit Sub
ERR_AddFreeText:
830   MsgBox "ERR_AddFreeText" & vbCrLf & Err.Description
End Sub


Private Sub DockListCtrl_DblClick()
840   On Error GoTo ERR_DockListCtrl_DblClick
          
850       Call PFreeTextResult(CurrFreeTextIndx).SetFocus
          
          
      'not in usage until the relevant
      'MacabiShared.ocx version is updated
      'ready to retreive the Snomed-M:
      '    Call GetSnomedM
          
860       Exit Sub
ERR_DockListCtrl_DblClick:
870   MsgBox "ERR_DockListCtrl_DblClick" & vbCrLf & Err.Description
End Sub


Private Function GetSnomedMResultIndex() As Integer
880   On Error GoTo ERR_GetSnomedMResultIndex

          Dim i As Integer
          Dim typ, Index

890       GetSnomedMResultIndex = -1

900       For i = 1 To PResultIndex
              
910           typ = Mid(PResultDesc(i).Tag, 1, 1)
920           Index = Val(Mid(PResultDesc(i).Tag, 2))
              
930           If typ = "T" And UCase(PResultDesc(i).DataField) = UCase("Snomed M") Then
                  
940               GetSnomedMResultIndex = Index
950               Exit Function
                  
960           End If
              
970       Next i

980       Exit Function
ERR_GetSnomedMResultIndex:
990   MsgBox "ERR_GetSnomedMResultIndex" & vbCrLf & Err.Description
End Function


'could be activated after a text was selected from the DockList;
'gets the Snomed-M associated with the selected sentance;
'adds this Snomed-M to it's result text box on screen, if not already exists;
Private Sub GetSnomedM()
1000  On Error GoTo ERR_GetSnomedM

          Dim i As Integer
          Dim strSnomedM As String
          Dim strSnomedMList As String
          Dim typ, Index

1010      strSnomedM = DockListCtrl.GetSnomedM
          
1020      If strSnomedM = "" Then
1030          Exit Sub
1040      End If

1050      For i = 1 To PResultIndex
1060          typ = Mid(PResultDesc(i).Tag, 1, 1)
1070          Index = Val(Mid(PResultDesc(i).Tag, 2))
1080          If typ = "T" And UCase(PResultDesc(i).DataField) = UCase("Snomed M") Then
1090              strSnomedMList = PResultText(Index).Text
1100              Exit For
1110          End If
1120      Next i
          
1130      If strSnomedMList = "" Then
1140          strSnomedMList = strSnomedM
1150      ElseIf InStr(1, strSnomedMList, strSnomedM) = 0 Then
1160          strSnomedMList = strSnomedMList & "," & strSnomedM
1170      End If
          
1180      PResultText(Index).Text = strSnomedMList

1190      Exit Sub
ERR_GetSnomedM:
1200  MsgBox "ERR_GetSnomedM" & vbCrLf & Err.Description
End Sub




Private Sub DockListCtrl_KeyPress(KeyAscii As Integer)
1210      Select Case KeyAscii
              Case vbKeyReturn
1220              Call PFreeTextResult(CurrFreeTextIndx).SetFocus
1230          Case vbKeyEscape
1240              DockListCtrl.Visible = False
1250              Call PFreeTextResult(CurrFreeTextIndx).SetFocus
1260      End Select
End Sub



Private Sub HistoryGrid_DblClick()
1270      On Error GoTo ErrHnd
          Dim OldBarcodeField As String
          'dbl click on request cell
1280      If HistoryGrid.MouseCol = 0 And HistoryGrid.MouseRow <> 0 Then
1290          If HistoryGrid.Rows = 2 And HistoryGrid.TextArray(faIndex(1, 0)) = "" Then Exit Sub
1300          SdgName.Text = HistoryGrid.Text
1310          OldBarcodeField = BarcodeField
1320          BarcodeField = "NAME"
1330          Call SdgName_KeyDown(vbKeyReturn, 0)
1340          Call SdgName_KeyUp(vbKeyReturn, 0)
1350          BarcodeField = OldBarcodeField
1360          Exit Sub
1370      End If
          'dbl click on snomed cell
1380      If HistoryGrid.MouseCol = 2 And HistoryGrid.MouseRow <> 0 _
              And HistoryGrid.TextArray(faIndex(HistoryGrid.MouseRow, HistoryGrid.MouseCol)) <> "" Then
1390          SnomedCtrl(0).Left = HistoryGrid.CellLeft + PatientPropsfra(2).Left
1400          SnomedCtrl(0).Top = HistoryGrid.CellTop + PatientPropsfra(2).Top
1410          SnomedCtrl(0).Width = 7000
1420          SnomedCtrl(0).Height = 2500
1430          SnomedCtrl(0).StatusReadWrite = SnomedCtrl(0).CReadOnly

      '        SnomedCtrl(0).Initialize ("select u_snomed from lims_sys.sdg_user,lims_sys.sdg where " & _
                      "sdg.sdg_id = sdg_user.sdg_id and sdg.name = '" & HistoryGrid.TextArray(faIndex(HistoryGrid.row, 0)) & "'")

1440          SnomedCtrl(0).Initialize ("select result.ORIGINAL_RESULT " & _
                      "from lims_sys.result, lims_sys.test, lims_sys.aliquot, lims_sys.sample, lims_sys.sdg " & _
                      "where result.test_id = test.test_id and " & _
                      "test.aliquot_id = aliquot.aliquot_id and " & _
                      "aliquot.sample_id = sample.sample_id and " & _
                      "result.name = 'Snomed T' and " & _
                      "sample.sdg_id = sdg.sdg_id and " & _
                      "sdg.name = '" & HistoryGrid.TextArray(faIndex(HistoryGrid.row, 0)) & "'")

1450          SnomedCtrl(0).Visible = True
1460          SnomedCtrl(0).SetFocus
1470          Exit Sub
1480      End If
1490      Exit Sub
ErrHnd:
1500      Call ErrHandler("HistoryGrid_DblClick")
End Sub

Private Sub HistoryGrid_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
1510      On Error GoTo ErrHnd
1520      If Button = vbRightButton Then
1530          If HistoryGrid.MouseCol = 2 And HistoryGrid.MouseRow <> 0 Then
1540              HistoryGrid.row = HistoryGrid.MouseRow
1550              HistoryGrid.col = HistoryGrid.MouseCol
1560              PopupMenu MnSnomed
1570              MnSnomed.Visible = True
1580          End If
1590      End If
1600      Exit Sub
ErrHnd:
1610      Call ErrHandler("HistoryGrid_MouseDown")
End Sub

Public Function IExtensionWindow_CloseQuery() As Boolean

1620      On Error GoTo ErrHnd
      'happens when the user close the window
1630      If OpenedRequest Then
1640          If Not RunFromWindow Then
1650              If Sdg("STATUS") <> "A" Then
1660                  If FreeTextContentChanged Then
1670                      If ExitQueryResult = False Then Exit Function
1680                  ElseIf MsgBox("Are you sure you want to EXIT?", vbYesNo + vbDefaultButton2) = vbNo Then
1690                      SdgName.Text = ""
1700                      Exit Function
1710                  End If
1720              End If
1730          End If
1740      End If
1750      Call UnloadRequest
1760      If Not Role.State = adStateClosed Then Role.Close
1770      Set Sdg = Nothing
1780      Set Referring = Nothing
1790      Set Implement = Nothing
1800      Set Patient = Nothing
1810      Set Results = Nothing
1820      Set History = Nothing
1830      Set Aliquots = Nothing
1840      Set SnomedMCalculation = Nothing
1850      Set SnomedTCalculation = Nothing
1860      Set SampleCodes = Nothing
1870      SnomedCtrl(0).CloseSnomed
1880      IExtensionWindow_CloseQuery = True
          
1890      Call ReleaseApplicationMutex
          
1900      Exit Function
ErrHnd:
1910      Call ErrHandler("IExtensionWindow_CloseQuery")
End Function

Public Function IExtensionWindow_DataChange() As LSExtensionWindowLib.WindowRefreshType
1920      On Error GoTo ErrHnd
1930      IExtensionWindow_DataChange = windowRefreshNow
1940      Exit Function
ErrHnd:
1950      Call ErrHandler("IExtensionWindow_DataChange")
End Function

Public Function IExtensionWindow_GetButtons() As LSExtensionWindowLib.WindowButtonsType
1960      On Error GoTo ErrHnd
1970      IExtensionWindow_GetButtons = windowButtonsNone
1980      Exit Function
ErrHnd:
1990      Call ErrHandler("IExtensionWindow_GetButtons")
End Function

Public Sub IExtensionWindow_Internationalise()

End Sub

Public Sub IExtensionWindow_PreDisplay()
2000      On Error GoTo ErrHnd
          Dim row As Integer
2010      row = 1
2020      PapsResultsfra.Width = RESULTSFRAMEWIDTH
2030      row = 2
2040      PTestTab.Width = RESULTSFRAMEWIDTH
2050      row = 2
      '    InPreDisplay = True
          Dim constr As String
2060      row = 3
          Dim HisGridRightX As Double
          Dim HisGridLeftX As Double
          Dim HisGridTopY As Double
          Dim HisGridBottomY As Double
2070      row = 4
2080      FreeTextNormalSize = True
2090      row = 5
2100      Set Sdg = New ADODB.Recordset
2110      Set Referring = New ADODB.Recordset
2120      Set Implement = New ADODB.Recordset
2130      Set Patient = New ADODB.Recordset
2140      Set Results = New ADODB.Recordset
2150      Set History = New ADODB.Recordset
2160      Set Aliquots = New ADODB.Recordset
2170      Set SnomedMCalculation = New ADODB.Recordset
2180      Set SnomedTCalculation = New ADODB.Recordset
2190      Set SampleCodes = New ADODB.Recordset
2200      row = 6
2210      Set PrintFaxResult = New Dictionary
2220      Set VisibleResultTab = New Dictionary
2230      Set Con = New ADODB.connection
2240      row = 7
2250      constr = "Provider=OraOLEDB.Oracle" & _
              ";Data Source=" & NtlsCon.GetServerDetails & _
              ";User ID=" & NtlsCon.GetUsername & _
              ";Password=" & NtlsCon.GetPassword
2260      row = 8
2270      Con.Open constr
2280      row = 9
2290      Con.CursorLocation = adUseClient
2300      row = 10
       
      '    con.Open NtlsCon.GetADOConnectionString
      '    con.CursorLocation = adUseClient

2310      Con.Execute "SET ROLE LIMS_USER"
2320      row = 11
2330      Call ConnectSameSession(CDbl(NtlsCon.GetSessionId))
2340      row = 12
2350      PropsCurFrame = 1
2360      TestCurFrame = 1
          Dim i
2370      row = 13
           'For i = 1 To 5 'PatientPropsfra are just 2, not 5
2380      For i = 1 To 5
2390      row = 140 + i
2400          PatientPropsfra(i).Left = PatientProps.ClientLeft
2410          PatientPropsfra(i).Top = PatientProps.ClientTop
2420          PatientPropsfra(i).Width = PatientProps.ClientWidth
2430          PatientPropsfra(i).Height = PatientProps.ClientHeight
2440          PatientPropsfra(i).Visible = False
2450      Next
2460      row = 15
2470      PatientPropsfra(1).Visible = True
      '    HistoryList.Left = 0 '
      '    HistoryList.Top = 0 '
2480      HistoryList.Width = PatientPropsfra(1).Width '
      '    HistoryList.Height = PatientPropsfra(1).Height '
2490      HistoryGrid.Left = 0
2500      HistoryGrid.Top = 0
2510      HistoryGrid.Width = PatientPropsfra(1).Width
2520      HistoryGrid.row = 0
2530      HistoryGrid.col = 0
2540      HistoryGrid.Text = "Request"
2550      HistoryGrid.col = 1
2560      HistoryGrid.Text = "Date"
2570      HistoryGrid.col = 2
2580      HistoryGrid.Text = "Snomed"
2590      HistoryGrid.Height = PatientPropsfra(1).Height
          'HistoryGrid.ColWidth(-1) = HistoryGrid.Width / HistoryGrid.Cols - 44
2600      HistoryGrid.ColWidth(0) = (HistoryGrid.Width / HistoryGrid.Cols) + 450
2610      HistoryGrid.ColAlignment(0) = flexAlignLeftCenter
2620      HistoryGrid.ColWidth(1) = (HistoryGrid.Width / HistoryGrid.Cols) - 350
2630      HistoryGrid.ColAlignment(1) = flexAlignLeftCenter
2640      HistoryGrid.ColWidth(2) = (HistoryGrid.Width / HistoryGrid.Cols) - 250
2650      HistoryGrid.ColAlignment(2) = flexAlignLeftCenter
2660      HistoryGrid.RowHeightMin = 345
2670      HisGridRightX = PatientPropsfra(2).Left + HistoryGrid.CellLeft + HistoryGrid.CellWidth
2680      HisGridLeftX = PatientPropsfra(2).Left + HistoryGrid.CellLeft
2690      HisGridTopY = HistoryGrid.CellTop
2700      HisGridBottomY = HistoryGrid.CellTop + HistoryGrid.CellHeight
2710      TestCurFrame = 1
2720      PTestTabfra(1).Left = PTestTab.ClientLeft
2730      PTestTabfra(1).Top = PTestTab.ClientTop
2740      PTestTabfra(1).Width = PTestTab.ClientWidth
2750      PTestTabfra(1).Height = PTestTab.ClientHeight
2760      PTestTabfra(1).Visible = True
          
2770      row = 16
2780      Call HistoryImageList.ListImages.Add(, "A 1", LoadPicture("Resource\sdga.ico"))
2790      Call HistoryImageList.ListImages.Add(, "V 1", LoadPicture("Resource\sdgv.ico"))
2800      Call HistoryImageList.ListImages.Add(, "X 1", LoadPicture("Resource\sdgx.ico"))
2810      Call HistoryImageList.ListImages.Add(, "C 1", LoadPicture("Resource\sdgc.ico"))
2820      Call HistoryImageList.ListImages.Add(, "I 1", LoadPicture("Resource\sdgi.ico"))
2830      Call HistoryImageList.ListImages.Add(, "P 1", LoadPicture("Resource\sdgp.ico"))
2840      Call HistoryImageList.ListImages.Add(, "R 1", LoadPicture("Resource\sdgr.ico"))
2850      Call HistoryImageList.ListImages.Add(, "S 1", LoadPicture("Resource\sdgs.ico"))
2860      Call HistoryImageList.ListImages.Add(, "U 1", LoadPicture("Resource\sdgu.ico"))
2870      Call HistoryImageList.ListImages.Add(, "W 1", LoadPicture("Resource\sdgw.ico"))
          'Set imgHistory.Picture = LoadPicture("Resource\Shift Down.ico")
2880      row = 17
2890      Set imgHistory.Picture = LoadPicture("Resource\Led On.ico")
2900      row = 18
2910      Set Role = Con.Execute("select * from lims_sys.lims_role " & _
              "where role_id = " & NtlsUser.GetRoleId)
2920      row = 18
2930      If UCase(Role("NAME")) <> UCase("doctor") And _
              UCase(Role("NAME")) <> UCase("pap inspector") Then
      '        QCtxt.BackColor = &H8000000F
      '        QCtxt.locked = True
2940      End If
      '    InPreDisplay = False
2950      row = 19
2960      Call RequestRemarkCtrl.InitializeConnection(Con)
2970      Call RequestRemarkCtrl.GetOperatorId(NtlsUser.GetOperatorId)
2980      row = 20
2990      RequestRemarkCtrl.Visible = False
3000      OrganCtrl.connection = Con
3010      OrganCtrl.OperatorName = NtlsUser.GetOperatorName
3020      OrganCtrl.SessionId = NtlsCon.GetSessionId
3030      OrganCtrl.Visible = False
3040      row = 21
          Dim f As New StdFont
3050      f.name = SaveButton.FontName
3060      f.Size = SaveButton.FontSize
3070      f.Bold = SaveButton.FontBold
3080      OrganCtrl.Font = f
3090      row = 22


3100      Set sdg_log.Con = Con
3110      sdg_log.Session = CDbl(NtlsCon.GetSessionId)
3120      row = 23
3130      SaveFreeTextContent
3140      row = 24

3150      Exit Sub
ErrHnd:
3160      Call ErrHandler("IExtensionWindow_PreDisplay Row = " & row)
End Sub

Public Sub IExtensionWindow_refresh()
'code for refreshing the window
'    Call RefreshWindow
End Sub

Public Sub IExtensionWindow_RestoreSettings(ByVal hKey As Long)

End Sub

Public Function IExtensionWindow_SaveData() As Boolean

End Function

Public Sub IExtensionWindow_SaveSettings(ByVal hKey As Long)

End Sub

Public Sub IExtensionWindow_SetParameters(ByVal parameters As String)
3170      On Error GoTo ErrHnd

          Dim strMain As String
          
3180      strMain = parameters
3190      BarcodeField = getNextStr(strMain, ",")
3200      PQCParameter = getNextStr(strMain, ",")
3210      CQCParameter = getNextStr(strMain, ",")
3220      HQCParameter = getNextStr(strMain, ",")
3230      frmAdditionalActions.strLettersFolder = getNextStr(strMain, ",")

      '    Dim Index As Integer
      '    Index = InStr(1, parameters, ",")
      '    BarcodeField = Mid(parameters, 1, Index - 1)
      '    PQCParameter = Mid(parameters, Index + 1, InStr(Index + 1, parameters, ",") - Index)
      '    Index = InStr(Index + 1, parameters, ",")
      '    CQCParameter = Mid(parameters, Index + 1, InStr(Index + 1, parameters, ",") - Index)
      '    HQCParameter = Mid(parameters, InStr(Index + 1, parameters, ",") + 1)
              
3240      Exit Sub
ErrHnd:
3250      Call ErrHandler("IExtensionWindow_SetParameters")
End Sub

Public Sub IExtensionWindow_SetServiceProvider(ByVal ServiceProvider As Object)
3260      On Error GoTo ErrHnd
          'Dim sp As LSSERVICEPROVIDERLib.NautilusServiceProvider
3270      Set sp = ServiceProvider
3280      Set ProcessXML = sp.QueryServiceProvider("ProcessXML")
3290      Set NtlsCon = sp.QueryServiceProvider("DBConnection")
3300      Set NtlsUser = sp.QueryServiceProvider("User")
3310      Exit Sub
ErrHnd:
3320      Call ErrHandler("IExtensionWindow_SetServiceProvider")
End Sub

Public Sub IExtensionWindow_SetSite(ByVal Site As Object)
3330      On Error GoTo ErrHnd
3340      Set NtlsSite = Site
3350      If RunFromWindow Then Exit Sub
3360      NtlsSite.SetWindowInternalName ("MacabiResultEntry")
3370      NtlsSite.SetWindowRegistryName ("MacabiResultEntry")
3380      Exit Sub
ErrHnd:
3390      Call ErrHandler("IExtensionWindow_SetSite")
 End Sub

 Public Sub IExtensionWindow_Setup()
           Dim phrase As ADODB.Recordset
           Dim sql As String

3400      On Error GoTo ErrHnd

          'check is there is already an open instance of Result Entry
          'running on this workstation:
3410      If IsFirstApplicationInstance() = False Then
3420          MsgBox "There is already an open instance of Result Entry or Diagnosis on this station"
3430          Call ReleaseApplicationMutex
3440          If RunFromWindow Then
3450              RaiseEvent CloseClicked
3460          Else
3470              NtlsSite.CloseWindow
3480          End If
3490      End If

          
3510      OpenedRequest = False

          'Init the Patholog combo
      '    Set phrase = con.Execute("select phrase_description, phrase_name from lims_sys.phrase_entry " & _
              "where phrase_id = (select phrase_id from lims_sys.phrase_header where " & _
              "name = 'Patholog') " & _
              "order by order_number")

3520      sql = " select o.OPERATOR_ID,"
3530      sql = sql & "  o.FULL_NAME"
3540      sql = sql & " from lims_sys.operator o, "
3550      sql = sql & "      lims_sys.operator_user ou,"
3560      sql = sql & "      lims_sys.lims_role r"
3570      sql = sql & " where ou.OPERATOR_ID=o.OPERATOR_ID"
3580      sql = sql & " and   o.ROLE_ID=r.role_id"
3590      sql = sql & " and upper(r.name)='DOCTOR'"
3600      sql = sql & " and ou.U_ORDER > 0 "
3610      sql = sql & " order by ou.U_ORDER"
          
          
3620      Set phrase = Con.Execute(sql)
          
          
          

3630      cmbPatholog.list(0) = "None"
3640      Set PathologCodes = New Scripting.Dictionary
3650      Set PathologCoredNumberToName = New Scripting.Dictionary
3660      phrase.MoveFirst
3670      Do Until phrase.EOF
3680          cmbPatholog.list(cmbPatholog.ListCount) = phrase("FULL_NAME")
3690          Call PathologCodes.Add(CStr(phrase("FULL_NAME").Value), CStr(phrase("OPERATOR_ID").Value))
3700          Call PathologCoredNumberToName.Add(CStr(phrase("OPERATOR_ID").Value), CStr(phrase("FULL_NAME").Value))
      '        cmbPatholog.list(cmbPatholog.ListCount) = phrase("PHRASE_DESCRIPTION")
      '        Call PathologCodes.Add(CStr(phrase("PHRASE_DESCRIPTION").Value), CStr(phrase("PHRASE_NAME").Value))
3710          phrase.MoveNext
3720      Loop

3730      Call zLang.English
3740      SdgName.Alignment = vbLeftJustify
3750      SdgName.RightToLeft = False

3760      WorkFolder = ""
3770      WorkFolder = xmlManager.GetDefaultFolderFromWorkStation(NtlsUser.GetWorkstationId, Con)

3780      If Trim(WorkFolder) <> "" Then
3790          xmlManager.XmlFolder = WorkFolder & "\ResultEntry\"
3800      End If
3810      If Not RunFromWindow Then
3820          Call SdgName.SetFocus
3830           If UCase(NtlsCon.GetUsername) = "LIMS_SYS" Then
3840              chkRefCancel.Visible = False
3850              chkRefCancel.Value = vbChecked
3860              If NtlsUser.GetWorkstationName = "XP" Then
3870                  SdgName.Text = "B022902/10"
                     ' Debugging = True
3880                  Call SdgName_KeyDown(vbKeyReturn, 1)
                      
3890              End If
                   
3900              If NtlsUser.GetWorkstationName = "ONE1PC1517" Then
                      'SdgName.Text = "P000006/16"
3910                  SdgName.Text = "B000146/16"
                      'Debugging = True
                     ' Call SdgName_KeyDown(vbKeyReturn, 1)
                   
3920              End If
                      
3930          End If
3940      End If

3950      didShowPDFError = False
           

3960      Exit Sub
ErrHnd:
3970      Call ErrHandler("IExtensionWindow_Setup")
End Sub

Public Function IExtensionWindow_ViewRefresh() As LSExtensionWindowLib.WindowRefreshType
3980      On Error GoTo ErrHnd
3990      IExtensionWindow_ViewRefresh = windowRefreshNone
4000      Exit Function
ErrHnd:
4010      Call ErrHandler("IExtensionWindow_ViewRefresh")
End Function

Private Sub SaveResults()
4020      On Error GoTo ErrHnd
          Dim Xmldoc As New DOMDocument
          Dim Xmlres As New DOMDocument
          Dim XmlELimsReq As IXMLDOMElement
          Dim XmlEResultReq As IXMLDOMElement
          Dim XmlELoad As IXMLDOMElement
          Dim XmlEResultEntry As IXMLDOMElement
          Dim DateFormatSyntax As String
          Dim DocXMLFileName As String
          Dim ResXMLFileName As String
          Dim FileName As String
          Dim i As Long

4030      If Sdg("STATUS") = "A" Then
4040          MsgBox "This request is already authorized" & vbCrLf & "and therefore results can not be changed!"
4050          Exit Sub
4060      End If

4070      If Sdg("STATUS") = "I" Then Call UnauthoriseResults
4080      Set XmlELimsReq = Xmldoc.createElement("lims-request")
4090      XmlELimsReq.setAttribute "version", "1"
4100      Set XmlEResultReq = Xmldoc.createElement("result-request")
4110      XmlEResultReq.setAttribute "version", "1"
4120      Set XmlELoad = Xmldoc.createElement("load")
4130      XmlELoad.setAttribute "entity", "SDG"
4140      XmlELoad.setAttribute "id", Sdg("SDG_ID")
4150      XmlELoad.setAttribute "mode", "entry"

          
          'calculate snomed only for PAPs (05.06.2006)
4160      If Left(Sdg("name"), 1) = "P" Then
4170          CalculateSnomeds
4180      End If

4190      For i = 1 To PResultTextIndex
4200          Set XmlEResultEntry = Xmldoc.createElement("result-entry")
4210          XmlEResultEntry.setAttribute "result-id", PResultText(i).Tag
4220          XmlEResultEntry.setAttribute "original-result", PResultText(i).Text
4230          Call XmlELoad.appendChild(XmlEResultEntry)
4240      Next i
        
4250      For i = 1 To PResultPhraseIndex
      '        If Trim(PResultPhrase(i).GetValue) <> "" Then
4260              Set XmlEResultEntry = Xmldoc.createElement("result-entry")
4270              XmlEResultEntry.setAttribute "result-id", PResultPhrase(i).Tag
4280              XmlEResultEntry.setAttribute "original-result", PResultPhrase(i).getValue
4290              Call XmlELoad.appendChild(XmlEResultEntry)
      '        End If
              
4300      Next i
4310      Inspect = False
4320      For i = 1 To PResultCheckIndex
4330          Set XmlEResultEntry = Xmldoc.createElement("result-entry")
4340          XmlEResultEntry.setAttribute "result-id", PResultCheck(i).Tag
4350          XmlEResultEntry.setAttribute "original-result", IIf(PResultCheck(i).Value = 1, "T", "F")
4360          If PResultCheck(i).Caption = "T" And PResultCheck(i).Value = 1 _
                  Then Inspect = True
4370          If PrintFaxResult.Exists(PResultCheck(i).Tag) And PResultCheck(i).Value = 1 Then PrintFax = True
4380          Call XmlELoad.appendChild(XmlEResultEntry)
4390      Next i

4400      If PFreeTextResultIndex > 1 Then
4410          For i = 2 To PFreeTextResultIndex
4420              Set XmlEResultEntry = Xmldoc.createElement("result-entry")
4430              XmlEResultEntry.setAttribute "result-id", PFreeTextResult(i).Tag
4440              XmlEResultEntry.setAttribute "original-result", Mid(PFreeTextResult(i).GetContent, 1, 1000)
4450              Call XmlELoad.appendChild(XmlEResultEntry)
4460              Call UpdateRtfResult(PFreeTextResult(i).Tag, PFreeTextResult(i))
4470          Next i
4480      ElseIf (PFreeTextResult(1).Tag <> "") Then
4490          Set XmlEResultEntry = Xmldoc.createElement("result-entry")
4500          XmlEResultEntry.setAttribute "result-id", PFreeTextResult(1).Tag
4510          XmlEResultEntry.setAttribute "original-result", Mid(PFreeTextResult(1).GetContent, 1, 1000)
4520          Call XmlELoad.appendChild(XmlEResultEntry)
4530          Call UpdateRtfResult(PFreeTextResult(1).Tag, PFreeTextResult(1))
4540      End If

4550      If PSnomedIndex > 1 Then
4560          For i = 1 To PSnomedIndex
4570              Set XmlEResultEntry = Xmldoc.createElement("result-entry")
4580              XmlEResultEntry.setAttribute "result-id", SnomedCtrl(i).Tag
4590              XmlEResultEntry.setAttribute "original-result", SnomedCtrl(i).getSnomeds
4600              Call XmlELoad.appendChild(XmlEResultEntry)
4610          Next i
4620      End If

          ' update Patholog

4630      If (cmbPatholog.Text <> "") And (cmbPatholog.ListIndex <> 0) Then
              
4640          Call UpdatePatholog
              'Call con.Execute("update lims_sys.sdg_user set U_PATHOLOG = '" & PathologCodes(cmbPatholog.Text) & "' " & _
                              " where sdg_id = " & Sdg("SDG_ID"))
4650      End If

4660      DateFormatSyntax = Format(Now(), "yyyymmddhhmmss")
4670      DocXMLFileName = "c:\ResEntryXML\doc_" & Trim(nte(Sdg("SDG_ID"))) & "-" & DateFormatSyntax & ".xml"
4680      ResXMLFileName = "c:\ResEntryXML\res_" & Trim(nte(Sdg("SDG_ID"))) & "-" & DateFormatSyntax & ".xml"

4690      Call XmlEResultReq.appendChild(XmlELoad)
4700      Call XmlELimsReq.appendChild(XmlEResultReq)
4710      Call AddXmlFireEventNode(XmlELimsReq, Xmldoc)
4720      Call Xmldoc.appendChild(XmlELimsReq)

      '    Xmldoc.Save ("c:\result.xml")
      '    Xmldoc.Save (DocXMLFileName)

4730      If Trim(WorkFolder) <> "" Then
4740          FileName = "ResultEntry_" & Trim(nte(Sdg("SDG_ID"))) & "_DOC1"
4750          Call xmlManager.SaveXmlFile(Xmldoc, FileName)
4760      End If

4770      Call ProcessXML.ProcessXMLWithResponse(Xmldoc, Xmlres)

      '    Xmlres.Save ("c:\resultres.xml")
      '    Xmlres.Save (ResXMLFileName)

4780      If Trim(WorkFolder) <> "" Then
4790          FileName = "ResultEntry_" & Trim(nte(Sdg("SDG_ID"))) & "_RES1"
4800          Call xmlManager.SaveXmlFile(Xmlres, FileName)
4810      End If

4820      Exit Sub

ErrHnd:
4830      Call ErrHandler("SaveResults")
End Sub

Private Sub AddXmlFireEventNode(ByRef e As IXMLDOMElement, ByRef doc As DOMDocument)
4840      On Error GoTo ErrHnd
          Dim xmlLogin As IXMLDOMElement
          Dim xmlSdg As IXMLDOMElement
          Dim element As IXMLDOMElement
          
4850      Set xmlLogin = doc.createElement("login-request")
4860      Call e.appendChild(xmlLogin)
4870      Set xmlSdg = doc.createElement("SDG")
4880      Call xmlLogin.appendChild(xmlSdg)
4890      Set element = doc.createElement("find-by-id")
4900      element.Text = Sdg("SDG_ID")
4910      Call xmlSdg.appendChild(element)
4920      Set element = doc.createElement("fire-event")
4930      element.Text = "Calculate Results"
4940      Call xmlSdg.appendChild(element)
4950      Exit Sub
ErrHnd:
4960      Call ErrHandler("AddXmlFireEventNode")
End Sub

Private Sub AuthoriseResults(NewStatus As String)
4970      On Error GoTo ErrHnd
          Dim Xmldoc As New DOMDocument
          Dim Xmlres As New DOMDocument
          Dim XmlELimsReq As IXMLDOMElement
          Dim XmlELoginReq As IXMLDOMElement
          Dim XmlESdg As IXMLDOMElement
          Dim XmlEFind As IXMLDOMElement
          Dim XmlEStatus As IXMLDOMElement
          Dim FileName As String
              
          Dim SdgStatus As ADODB.Recordset
4980      Set SdgStatus = Con.Execute("select status from lims_sys.sdg, lims_sys.sdg_user where " & _
              "sdg.sdg_id = sdg_user.sdg_id and sdg.sdg_id = " & Sdg("SDG_ID"))
          
4990      If NewStatus = "A" And (SdgStatus("STATUS") <> "C" And SdgStatus("STATUS") <> "I") Then
5000          MsgBox "Process is incomplete and therefore cannot be authorise"
5010          SdgStatus.Close
5020          Exit Sub
5030      End If
5040      SdgStatus.Close
          
          'exit is mandatory result is missing:
5050      If Mandatory Then Exit Sub
          
          
          
5060      Set XmlELimsReq = Xmldoc.createElement("lims-request")
      '    XmlELimsReq.setAttribute "version", "1"
5070      Set XmlELoginReq = Xmldoc.createElement("login-request")
5080      Set XmlESdg = Xmldoc.createElement("SDG")
5090      Set XmlEFind = Xmldoc.createElement("find-by-id")
5100      XmlEFind.Text = Sdg("SDG_ID")
5110      Set XmlEStatus = Xmldoc.createElement("STATUS")
5120      XmlEStatus.Text = NewStatus
5130      Call XmlESdg.appendChild(XmlEFind)
5140      Call XmlESdg.appendChild(XmlEStatus)
5150      Call XmlELoginReq.appendChild(XmlESdg)
5160      Call XmlELimsReq.appendChild(XmlELoginReq)
5170      Call Xmldoc.appendChild(XmlELimsReq)

      '    Xmldoc.Save ("c:\auth.xml")
          
5180      If Trim(WorkFolder) <> "" Then
5190          FileName = "ResultEntry_" & Trim(nte(Sdg("SDG_ID"))) & "_DOC2"
5200          Call xmlManager.SaveXmlFile(Xmldoc, FileName)
5210      End If

5220      Call ProcessXML.ProcessXMLWithResponse(Xmldoc, Xmlres)

      '    Xmlres.Save ("c:\authres" & NewStatus & ".xml")

5230      If Trim(WorkFolder) <> "" Then
5240          FileName = "ResultEntry_" & Trim(nte(Sdg("SDG_ID"))) & "_RES2"
5250          Call xmlManager.SaveXmlFile(Xmlres, FileName)
5260      End If
          
5270      Con.Execute "call lims.sdg_snomed_proc.update_sdg_snomeds('" & Trim(nte(Sdg("SDG_ID"))) & "')"
          
              
5280      If CheckIsMalignant(Sdg("SDG_ID")) Then
5290          Con.Execute "Update lims_sys.Result r set r.original_result = 'T',r.formatted_result='True' where " & _
                  "r.result_id = (select r1.result_id " & _
                  "from lims_sys.sdg s, lims_sys.sample sa, lims_sys.aliquot a, lims_sys.test t, lims_sys.result r1 " & _
                  "Where s.sdg_id = sa.sdg_id " & _
                  "and sa.sample_id = a.sample_id " & _
                  "and a.aliquot_id = t.aliquot_id " & _
                  "and t.test_id = r1.test_id " & _
                  "and r1.name = 'Malignant' " & _
                  "and s.sdg_id = " & Trim(nte(Sdg("SDG_ID"))) & ")"
5300      End If
          
5310      Exit Sub
ErrHnd:
5320      Call ErrHandler("AuthoriseResults")
End Sub


Private Sub OrganCtrl_Click()
5330      If Sdg("status") = "A" Then
5340          MsgBox "Request is authorised. Can't change Organ."
5350      End If
5360      SetOrgansSnomedT
         
End Sub



Private Sub PropsReferralDiagnose_DblClick(Index As Integer)
      'hila-old code
      '    If PropsReferralDiagnose(Index).Tag <> "" Then
      '        Ref.ShowReferral (CInt(PropsReferralDiagnose(Index).Tag))
      '    End If
      'hila- end old code
      'new code
5370      If PropsReferralDiagnose(Index).Tag <> "" And (Right(nte(Sdg("EXTERNAL_REFERENCE")), 1) <> "B") Then 'hila- cancel the use of ref in case Histology "B"
5380          Ref.ShowReferral (CInt(PropsReferralDiagnose(Index).Tag))
5390      End If
      'hila-end new code
End Sub

Private Sub SdgName_GotFocus()
      'change Language to english
5400      LoadKeyboardLayout "00000409", 1
          
         
End Sub

Private Sub SnomedParser_PhraseResult(ResultName As String, Operator As String, Value As String, result As String)
          Dim i
          Dim typ, Index
          Dim rValue As String
5410      On Error GoTo ErrHnd
5420      result = "FALSE"
5430      For i = 1 To PResultIndex
5440          typ = Mid(PResultDesc(i).Tag, 1, 1)
5450          Index = Val(Mid(PResultDesc(i).Tag, 2))
5460          If typ = "B" And UCase(PResultDesc(i).DataField) = ResultName Then
5470              rValue = PResultCheck(Index).Value
5480              If Operator = SnomedParser.EqOperator Then
5490                  If (rValue = 1 And Value = "T") Or _
                          (rValue = 0 And Value = "F") Then
5500                      result = "TRUE"
5510                  End If
5520              ElseIf Operator = SnomedParser.NotEqOperator Then
5530                  If (rValue = 0 And Value = "T") Or _
                          (rValue = 1 And Value = "F") Then
5540                      result = "TRUE"
5550                      Exit Sub
5560                  End If
5570              End If
5580              Exit Sub
5590          ElseIf typ = "F" And UCase(PResultDesc(i).DataField) = ResultName And _
                  Operator = SnomedParser.ConOperator Then
5600              If InStr(1, UCase(PFreeTextResult(Index).GetContent), Value) Then
5610                  result = "TRUE"
5620                  Exit Sub
5630              End If
5640              Exit Sub
5650          End If
5660      Next i
5670      Exit Sub
ErrHnd:
5680      Call ErrHandler("SnomedParser_PhraseResult")
End Sub

 



Private Sub UserControl_KeyDown(KeyCode As Integer, Shift As Integer)
          Dim strVer As String

5690      If KeyCode = vbKeyF10 And Shift = 1 Then
5700          strVer = "Name: " & App.EXEName & vbCrLf & vbCrLf & _
                       "Path: " & App.Path & vbCrLf & vbCrLf & _
                       "Version: " & "[" & App.Major & "." & App.Minor & "." & App.Revision & "]" & vbCrLf & vbCrLf & _
                       "Company: One Software Technologies (O.S.T) Ltd."
5710          chkRefCancel.Visible = True
5720          chkRefCancel.Value = vbChecked
5730          MsgBox strVer, vbInformation, "Nautilus - Project Properties"
5740          Call SdgName.SetFocus
             
              
5750      End If
End Sub

Private Sub UnauthoriseResults()
5760      On Error GoTo ErrHnd
          Dim i
          
5770      If Sdg("STATUS") <> "A" And Sdg("STATUS") <> "I" Then Exit Sub
          
5780      Con.BeginTrans
5790      Con.Execute ("update lims_sys.sdg set status = 'C' where sdg_id = " & Sdg("SDG_ID"))
5800      Con.Execute ("update lims_sys.sample set status = 'C' where sdg_id = " & Sdg("SDG_ID"))
5810      Con.Execute ("update lims_sys.aliquot set status = 'C' where sample_id in " & _
              "(select sample_id from lims_sys.sample where sdg_id = " & Sdg("SDG_ID") & ")")
5820      Con.Execute ("update lims_sys.test set status = 'C' where aliquot_id in " & _
              "(select aliquot_id from lims_sys.aliquot where sample_id in " & _
              "(select sample_id from lims_sys.sample where sdg_id = " & Sdg("SDG_ID") & "))")
5830      Con.Execute ("update lims_sys.result set status = 'C' where test_id in " & _
              "(select test_id from lims_sys.test where aliquot_id in " & _
              "(select aliquot_id from lims_sys.aliquot where sample_id in " & _
              "(select sample_id from lims_sys.sample where sdg_id = " & Sdg("SDG_ID") & ")))")
5840      Con.CommitTrans
5850      Exit Sub
ErrHnd:
5860      Call ErrHandler("UnauthoriseResults")
End Sub

Private Sub MnShowSnomed_Click()
5870      SnomedCtrl(0).Left = HistoryGrid.CellLeft + PatientPropsfra(2).Left
5880      SnomedCtrl(0).Top = HistoryGrid.CellTop + PatientPropsfra(2).Top
5890      SnomedCtrl(0).Width = 4335
5900      SnomedCtrl(0).Height = 2500
5910      SnomedCtrl(0).StatusReadWrite = SnomedCtrl(0).CReadOnly
5920      SnomedCtrl(0).Initialize ("select nvl(result.ORIGINAL_RESULT,'') " & _
                      "from lims_sys.result, lims_sys.test, lims_sys.aliquot, lims_sys.sample, lims_sys.sdg " & _
                      "where result.test_id = test.test_id and " & _
                      "test.aliquot_id = aliquot.aliquot_id and " & _
                      "aliquot.sample_id = sample.sample_id and " & _
                      "sample.sdg_id = sdg.sdg_id and " & _
                      "result.name = 'Snomed T' and " & _
                      "sdg.name = '" & HistoryGrid.TextArray(faIndex(HistoryGrid.row, 0)) & "'")
5930      SnomedCtrl(0).Visible = True
5940      SnomedCtrl(0).SetFocus
End Sub


'the FreeTextTemplate control notifies us that
'a record exists in the backup RTF table,
'which means that the last work on this result
'ended in a crash;
'the user can decide to read the backup text:
Private Sub PFreeTextResult_BackupRecordExists(Index As Integer)
5950  On Error GoTo ERR_TxtFreeText_BackupRecordExists

5960      If nRTFResultBackup = 0 Then
          
          
              '09.12.2007:
              'always read from a backup record
              'if exists:
               '28-07-1010 -
              'never load records
5970          nRTFResultBackup = 2
          
          
      '        Dim res As VbMsgBoxResult
      '
      '        res = MsgBox(" קיימת רשומת שחזור לתוצאת טקסט חופשי. לשחזר? ", _
      '                      vbYesNoCancel + vbQuestion + vbMsgBoxRight + vbMsgBoxRtlReading)
      '
      '        Select Case res
      '
      '            Case vbYes
      '                nRTFResultBackup = 1
      '
      '            Case vbNo
      '                nRTFResultBackup = 2
      '
      '            Case vbCancel
      '                nRTFResultBackup = 3
      '
      '        End Select

5980      End If
          

5990      If nRTFResultBackup = 1 Then
                  
6000          Call PFreeTextResult(Index).ReadFromBackup
              
6010      End If

6020      Exit Sub
ERR_TxtFreeText_BackupRecordExists:
6030  MsgBox "ERR_TxtFreeText_BackupRecordExists" & vbCrLf & Err.Description
End Sub


Private Sub PFreeTextResult_DblClick(Index As Integer)
6040      On Error GoTo ErrHnd
6050      If FreeTextNormalSize Then
6060          Set FreeTextContainer = PFreeTextResult(Index).Container
6070          FreeTextNormalTop = PFreeTextResult(Index).Top
6080          FreeTextNormalLeft = PFreeTextResult(Index).Left
6090          FreeTextNormalHeight = PFreeTextResult(Index).Height
6100          FreeTextNormalWidth = PFreeTextResult(Index).Width
6110          fraMaxFreeText.Width = PFreeTextResult(Index).Width + 50 '11400
6120          fraMaxFreeText.Height = 8415
6130          Set PFreeTextResult(Index).Container = fraMaxFreeText
6140          PFreeTextResult(Index).Top = 0
6150          PFreeTextResult(Index).Left = 0
6160          PFreeTextResult(Index).Height = fraMaxFreeText.Height - 50
              'PFreeTextResult(Index).Width = fraMaxFreeText.Width - 50
6170          fraMaxFreeText.Visible = True
6180          FreeTextNormalSize = False
6190          fraMaxFreeText.ZOrder 0
6200          DockListCtrl.ZOrder 0
              'PFreeTextResult(Index).ZOrder 0
6210      Else
6220          Set PFreeTextResult(Index).Container = FreeTextContainer
6230          fraMaxFreeText.Width = 255
6240          fraMaxFreeText.Height = 255
6250          PFreeTextResult(Index).Top = FreeTextNormalTop
6260          PFreeTextResult(Index).Left = FreeTextNormalLeft
6270          PFreeTextResult(Index).Height = FreeTextNormalHeight
6280          PFreeTextResult(Index).Width = FreeTextNormalWidth
6290          fraMaxFreeText.Visible = False
6300          FreeTextNormalSize = True
6310      End If
6320      Exit Sub
ErrHnd:
6330      Call ErrHandler("PFreeTextResult_DblClick")
End Sub

Private Sub PFreeTextResult_GotFocus(Index As Integer)
6340      CurrFreeTextIndx = Index
End Sub

Private Sub PFreeTextResult_OnChange(Index As Integer)
6350      On Error GoTo ErrHnd
          Dim i As Integer
          Dim MaxLines As Integer

6360      MaxLines = 0
6370      For i = 2 To PFreeTextResultIndex
6380          MaxLines = MaxLines + PFreeTextResult(i).Lines
6390      Next i
6400      LblTotalLines.Caption = MaxLines
6410      Exit Sub
ErrHnd:
6420      Call ErrHandler("PFreeTextResult_OnChange")
End Sub

Private Sub PFreeTextResult_ShowList(Index As Integer, ListIndex As Integer)
6430      Call PFreeTextResult(Index).AssignList2RTF(DockListCtrl, ListIndex)
6440      DockListCtrl.Visible = True
6450      Call DockListCtrl.SetFocus
End Sub

Private Sub PResultCheck_Click(Index As Integer)
6460      On Error GoTo ErrHnd
6470      If Left(Sdg("NAME"), 1) <> "P" Then Exit Sub
          Dim SumBoolRes As Integer

6480      SumBoolRes = CInt(VisibleResultTab(CStr(PResultCheck(Index).Container.Index)))
6490      If PResultCheck(Index).Value = 1 Then
6500          SumBoolRes = SumBoolRes + 1
6510          Call VisibleResultTab.Remove(CStr(PResultCheck(Index).Container.Index))
6520          Call VisibleResultTab.Add(CStr(PResultCheck(Index).Container.Index), SumBoolRes)
6530          If CInt(VisibleResultTab(CStr(PResultCheck(Index).Container.Index))) > 0 Then
6540              ImageRes(PResultCheck(Index).Container.Index).Visible = True
6550          Else
6560              ImageRes(PResultCheck(Index).Container.Index).Visible = False
6570          End If
6580      Else
6590          SumBoolRes = SumBoolRes - 1
6600          Call VisibleResultTab.Remove(CStr(PResultCheck(Index).Container.Index))
6610          Call VisibleResultTab.Add(CStr(PResultCheck(Index).Container.Index), SumBoolRes)
6620          If CInt(VisibleResultTab(CStr(PResultCheck(Index).Container.Index))) > 0 Then
6630              ImageRes(PResultCheck(Index).Container.Index).Visible = True
6640          Else
6650              ImageRes(PResultCheck(Index).Container.Index).Visible = False
6660          End If
6670      End If
          
6680      Call UpdateCheckForSpecialResults(Index)
          
6690      Exit Sub
ErrHnd:
6700      Call ErrHandler("PResultCheck_Click")
End Sub

'for special results, the tail of the text is held by the following result,
'that has no check box of itself;
'for showing the right Summary, this code keeps the consistency:
Private Sub UpdateCheckForSpecialResults(Index As Integer)
6710  On Error GoTo ERR_UpdateCheckForSpecialResults

      '    If GetResultName(PResultCheck(index).Tag) = "interp_11" Then
          
6720      If dicResultIdToName(PResultCheck(Index).Tag) = "interp_11" Then
              
6730          If PResultCheck.Count > Index + 1 Then
6740              PResultCheck(Index + 1).Value = PResultCheck(Index).Value
6750          End If
              
6760      End If

6770      Exit Sub
ERR_UpdateCheckForSpecialResults:
6780  MsgBox "ERR_UpdateCheckForSpecialResults" & vbCrLf & Err.Description
End Sub


Private Function GetResultName(strResultId As String) As String
6790  On Error GoTo ERR_GetResultName

          Dim rs As Recordset
          Dim sql As String
          
6800      sql = " select r.NAME"
6810      sql = sql & " from lims_sys.result r"
6820      sql = sql & " where r.RESULT_ID='" & strResultId & "'"

6830      Set rs = Con.Execute(sql)
          
6840      If Not rs.EOF Then
6850          GetResultName = rs("NAME")
6860      End If
          
6870      Exit Function
ERR_GetResultName:
6880  MsgBox "ERR_GetResultName" & vbCrLf & Err.Description
End Function



Private Sub RequestRemarkCtrl_StatusChanged(NewStatus As String)
6890      On Error GoTo ErrHnd
6900      If AuthoriseButtonFlag = False Then Exit Sub
          ' status = "P" = non completed
6910      If NewStatus = "P" Then
6920          AuthoriseButton.Enabled = False
6930      ElseIf NewStatus <> "P" Then
6940          AuthoriseButton.Enabled = True
6950      End If
         
6960      Exit Sub
ErrHnd:
6970      Call ErrHandler("RequestRemarkCtrl_StatusChanged")
End Sub

Private Sub OrganCtrl_StatusChanged(NewStatus As String)
6980      On Error GoTo ErrHnd
           Dim mbres As VbMsgBoxResult
           
6990       DoEvents
           
7000       If InStr(1, NewStatus, "+") >= 1 Then
7010          SetOrgansSnomedT
              
7020          If Not IsMicroTextSaved Then
7030              mbres = MsgBox("? בוצע אישור במסך איבר. האם ברצונך לטעון מחדש את מסך הכנסת תוצאות" & vbCrLf & _
                                  "!שינויים שנעשו לא ישמרו", vbYesNo + vbDefaultButton2 + vbCritical)
7040              If mbres = vbYes Then
          '        If mbres = vbYes And SaveButton.Enabled And SaveButton.Visible Then
          '            Call SaveButton_Click
                      'Will not be notified for another Save
7050                  Call SaveFreeTextContent
7060                  SdgName = Sdg("name")
7070                  Call SdgName_KeyDown(vbKeyReturn, 0)
7080              End If
7090          Else 'IsMicroTextSaved
7100              MsgBox (".שים לב, האיבר הוחלף אך הכותרת והאבחנה לא")
7110          End If
7120      End If
               
         ' If AuthoriseButtonFlag = False Then Exit Sub
          ' status = "P" = non completed
      '    If NewStatus = "P" Then
      '        AuthoriseButton.Enabled = False
      '
      '    ElseIf RequestRemarkCtrl.GetRemarkStatus(RequestRemarkCtrl.SdgName) <> "P" Then
      '        AuthoriseButton.Enabled = True
      '    End If
7130      Exit Sub
ErrHnd:
7140      Call ErrHandler("OrganCtrl_StatusChanged")
End Sub


'Private Sub PFreeTextResult_GotFocus(Index As Integer)
'    Dim p As tagPOINT
'    Dim res As Long
'    p.x = 15
'    p.y = 0
'    res = SendMessage(PFreeTextResult(Index).RTBHandle, EM_SETSCROLLPOS, 0, p)
'End Sub

Private Sub SaveButton_Click()
7150      On Error GoTo ErrHnd

7160      If Not OpenedRequest Then Exit Sub
           
7170      If Sdg("STATUS") = "I" And _
              UCase(Role("NAME")) <> UCase("doctor") And _
              (UCase(Role("NAME")) <> UCase("cytoscreener") Or GetInspection <> "CC") And _
              UCase(Role("NAME")) <> UCase("pap inspector") Then
7180          MsgBox "This request is in inspection and waits for a physician or pap inspector authorization!"
7190          Exit Sub
7200      End If
7210      Call SaveResults
      '    OpenedRequest = False
7220      Call RefreshWindow
          ' This is temporary code for the time until the inlab process is fuly functionning
          '
          '
          '
      'MsgBox 1
7230      If Sdg("STATUS") <> "A" And Sdg("STATUS") <> "I" Then
      '        con.Execute ("update lims_sys.aliquot set status = 'V' " & _
                  "where aliquot_id in (select aliquot_id " & _
                  "from lims_sys.aliquot a, lims_sys.sample s " & _
                  "where a.sample_id = s.sample_id " & _
                  "and a.status = 'U' and s.sdg_id = " & Sdg("SDG_ID") & ")")
      'MsgBox 2
      '        con.Execute ("update lims_sys.sdg set status = 'C' " & _
                  "where sdg_id = " & Sdg("SDG_ID"))
      'MsgBox 3
      '        con.Execute ("update lims_sys.sample set status = 'C' " & _
                  "where sample.status in ('V','P') and sdg_id = " & Sdg("SDG_ID"))
      'MsgBox 4
      '        con.Execute ("update lims_sys.aliquot set status = 'C' " & _
                  "where aliquot.status in ('V','P') and sample_id in (select sample_id from lims_sys.sample " & _
                  "where sdg_id = " & Sdg("SDG_ID") & ")")
      'MsgBox 5
      '        con.Execute ("update lims_sys.test set status = 'C' " & _
                  "where test.status in ('V','P') and aliquot_id in(select a.aliquot_id from lims_sys.aliquot a, " & _
                  "lims_sys.sample s where a.sample_id=s.sample_id " & _
                  "and s.sdg_id = " & Sdg("SDG_ID") & ")")
      'MsgBox 6
7240      Call ChangeAliquotStatus
7250      Call UpdateStatusToC
      '        con.Execute ("update lims_sys.result set status = 'C' " & _
                  "where result.status = 'V' and test_id in (select t.test_id from lims_sys.test t, " & _
                  "lims_sys.aliquot a, lims_sys.sample s " & _
                  "where t.aliquot_id = a.aliquot_id " & _
                  "and a.sample_id = s.sample_id " & _
                  "and s.sdg_id = " & Sdg("SDG_ID") & ")")
                  
                  
              'con.
7260          Call RefreshWindow
7270      End If
          
          
      '    SaveButton.Enabled = False
      '    AuthoriseButton.Enabled = False
7280      gridAliquots.Top = lblStatusBar.Top + lblStatusBar.Height
7290      gridAliquots.Visible = False
          
7300      lblStatusBar.Caption = "Results where saved successfully on " & Format(Now, "hh:mm:ss")
          
7310      If cmbPatholog.Text <> "" And cmbPatholog.Text <> "None" Then
7320          sdg_log_desc = Replace(cmbPatholog.Text, "'", "''")
7330      End If
7340      Call sdg_log.InsertLog(Sdg("SDG_ID"), "RE.SAVE", sdg_log_desc)
7350      Call SaveFreeTextContent
7360      Exit Sub
ErrHnd:
7370      Call ErrHandler("SaveButton_Click")
End Sub


Private Sub UpdateStatusToC()
7380  On Error GoTo ERR_UpdateStatusToC
          
7390      Con.Execute ("update lims_sys.result set status = 'C' " & _
              "where result.status = 'V' and test_id in (select t.test_id from lims_sys.test t, " & _
              "lims_sys.aliquot a, lims_sys.sample s " & _
              "where t.aliquot_id = a.aliquot_id " & _
              "and a.sample_id = s.sample_id " & _
              "and s.sdg_id = " & Sdg("SDG_ID") & ")")
          
7400      Exit Sub
ERR_UpdateStatusToC:
7410  MsgBox "ERR_UpdateStatusToC" & vbCrLf & _
             "The results were saved successfully, " & _
             "but the request status was not changed to complete"

      'MsgBox "ERR_UpdateStatusToC" & vbCrLf & Err.Description
End Sub
Private Sub ChangeAliquotStatus()
7420       On Error GoTo ErrHnd
           Dim rs As New ADODB.Recordset
7430       If Aliquots.EOF Then Exit Sub
7440       Do Until Aliquots.EOF
7450           Set rs = Con.Execute("select test_id from lims_sys.test where test.aliquot_id = " & Aliquots("ALIQUOT_ID"))
7460           If rs.EOF Then
7470               Con.Execute ("update lims_sys.aliquot set status='C' where aliquot_id = " & Aliquots("ALIQUOT_ID"))
7480           End If
7490           rs.Close
7500           Aliquots.MoveNext
7510       Loop
7520       Exit Sub
ErrHnd:
7530       Call ErrHandler("ChangeAliquotStatus")
 End Sub


'get all slides that didn't pass a stain report (station 6):
'd (out) - the slide list
'strSdgId (in) -
Private Sub SlideWithoutStainReport(d As Dictionary, strSgdId As String)
7540  On Error GoTo ERR_SlidesWithoutStainReport

          Dim sql As String
          Dim rs As Recordset
          
          
7550      sql = " select a.NAME"
7560      sql = sql & " from lims_sys.sample s,"
7570      sql = sql & "      lims_sys.aliquot a,"
7580      sql = sql & "   lims_sys.aliquot_user au"
7590      sql = sql & " where s.SDG_ID='" & strSgdId & "'"
7600      sql = sql & " and   a.SAMPLE_ID=s.SAMPLE_ID"
7610      sql = sql & " and   au.ALIQUOT_ID=a.ALIQUOT_ID"
7620      sql = sql & " and   au.U_COLOR_TYPE <> 'רזרבה' "
7630      sql = sql & " and   a.STATUS <> 'X' "
7640      sql = sql & " and   exists"
7650      sql = sql & " ("
7660      sql = sql & "   select 1 "
7670      sql = sql & "   from lims_sys.aliquot_formulation af"
7680      sql = sql & "   where af.CHILD_ALIQUOT_ID=a.ALIQUOT_ID"
7690      sql = sql & " )"
7700      sql = sql & " and ( au.U_ALIQUOT_STATION     is null  or  instr(au.U_ALIQUOT_STATION,     '6')=0 ) "
7710      sql = sql & " and ( au.U_OLD_ALIQUOT_STATION is null  or  instr(au.U_OLD_ALIQUOT_STATION, '6')=0 )"
7720      sql = sql & " order by a.ALIQUOT_ID"
          
          
7730      Set rs = Con.Execute(sql)
          
7740      While Not rs.EOF
7750          Call d.Add(nte(rs("NAME")), "")
          
7760          rs.MoveNext
7770      Wend

7780      Exit Sub
ERR_SlidesWithoutStainReport:
7790  MsgBox "ERR_SlideWithoutStainReport" & vbCrLf & Err.Description
End Sub


Private Function GetSdgStatus(strSdgId As String) As String
7800  On Error GoTo ERR_GetSdgStatus

          Dim rs As Recordset
          Dim sql As String
          
7810      sql = " select d.STATUS"
7820      sql = sql & " from lims_sys.sdg d"
7830      sql = sql & " where d.SDG_ID='" & strSdgId & "'"

7840      Set rs = Con.Execute(sql)
          
7850      If Not rs.EOF Then
7860          GetSdgStatus = nte(rs("STATUS"))
7870      End If

7880      Exit Function
ERR_GetSdgStatus:
7890  MsgBox "ERR_GetSdgStatus" & vbCrLf & Err.Description
End Function

Private Sub UpdateReoprted(strSdgId As String, strValue As String)
7900  On Error GoTo ERR_UpdateReported

          Dim sql As String
          Dim rs As Recordset
           
7910      sql = "  update lims_sys.sdg d "
7920      sql = sql & "  set d.reported = '" & strValue & "' "
7930      sql = sql & "   where d.sdg_id = '" & strSdgId & "' "
      '    sql = sql & "   and d.status = 'A' "
          
7940      Call Con.Execute(sql)
           
7950      Exit Sub
ERR_UpdateReported:
7960  MsgBox "ERR_UpdateReported" & vbCrLf & Err.Description
End Sub


'if there are non reported slides guide the user actions:
'continue in authorisation?
'if yes -
'  create revision?
'  send letter to former version or not?
Private Sub AuthoriseWithRevision()
7970  On Error GoTo ERR_AuthoriseWithRevision

          Dim cg As Revision.CopyGenerator
          
          Dim d As New Dictionary
          Dim shouldRevise As Boolean
          Dim shouldSendLetter As Boolean
          Dim strSdgId As String
          Dim strSdgName As String

7980      shouldRevise = False
7990      shouldSendLetter = False

8000      strSdgId = nte(Sdg("sdg_id"))
8010      strSdgName = nte(Sdg("name"))

8020      Call SlideWithoutStainReport(d, strSdgId)

          'there are non reported slides:
8030      If d.Count > 0 Then

8040          Call frmNonReportedSlides.Initialize(d)
8050          frmNonReportedSlides.Top = 9945 - frmNonReportedSlides.Height '4350
8060          frmNonReportedSlides.Left = 13215 - frmNonReportedSlides.Width '8550
8070          Call frmNonReportedSlides.Show(vbModal)
              

8080          If frmNonReportedSlides.GetAuthorise = False Then
8090              Exit Sub
8100          End If

8110          shouldRevise = frmNonReportedSlides.GetRevise
8120          shouldSendLetter = frmNonReportedSlides.GetSendLetter

8130      End If


8140      Call Authorise
          

8150      If shouldRevise = True And GetSdgStatus(strSdgId) = "A" Then
              
              'create a revision to the authorised SDG:
8160          Set cg = New Revision.CopyGenerator
8170          Call cg.Initialize(sp, strSdgId, "30")
8180          Call cg.Execute
              
              'load the new version:
8190          Call InitiateSdg(strSdgName)
              
              'signal not to send letter for the old version:
8200          If shouldSendLetter = False Then
8210              Call UpdateReoprted(strSdgId, "T")
8220              Call sdg_log.InsertLog(CLng(strSdgId), "REPORTED.TRUE", "")
8230          End If
              
8240      End If

8250      Exit Sub
ERR_AuthoriseWithRevision:
8260  MsgBox "ERR_AuthoriseWithRevision" & vbCrLf & Err.Description
End Sub


Private Sub AuthoriseButton_Click()
8270  On Error GoTo ERR_AuthoriseButton_Click

          ' Validate multiple slides for PAP
8280      If Left(Sdg("NAME"), 1) = "P" Then
8290          If Not multipleSlidesValidation(Sdg("SDG_ID")) Then Exit Sub
8300      End If
8310      If (Right(nte(Sdg("EXTERNAL_REFERENCE")), 1) = "B" Or Right(nte(Sdg("EXTERNAL_REFERENCE")), 1) = "C") And Trim(PResultText(GetSnomedMResultIndex()).Text) = "" Then
8320          MsgBox "Snomed M value us missing. Request cannot be authorized.", vbCritical, "Result Entry"
8330          Exit Sub
8340      End If
8350      Call ChangeAliquotStatus
8360      Call UpdateStatusToC
      'MsgBox 1000
8370      If Right(nte(Sdg("EXTERNAL_REFERENCE")), 1) = "B" And nte(Sdg("STATUS")) <> "A" Then
8380          Call AuthoriseWithRevision
8390      Else
8400          Call Authorise
8410      End If

8420      btnPrintFax.Enabled = True

8430      Exit Sub
ERR_AuthoriseButton_Click:
8440  MsgBox "ERR_AuthoriseButton_Click" & vbCrLf & Err.Description

End Sub


Private Sub Authorise()
8450      On Error GoTo ErrHnd
          Dim save_sdg_id As Long
          Dim frc As FrmRequestConfirm

8460      If Not OpenedRequest Then Exit Sub
          
          
          
8470      If Sdg("STATUS") = "I" And _
              UCase(Role("NAME")) <> UCase("doctor") And _
              (UCase(Role("NAME")) <> UCase("cytoscreener") Or GetInspection <> "CC") And _
              UCase(Role("NAME")) <> UCase("pap inspector") Then
8480          MsgBox "This request is in inspection and waits for a physician or pap inspector authorization!"
8490          Exit Sub
8500      End If
8510      frmLogin.Pass = NtlsCon.GetPassword
8520      frmLogin.txtUserName.Text = NtlsCon.GetUsername
8530      frmLogin.Show vbModal
8540      If Not frmLogin.LoginSucceeded Then Exit Sub
8550      frmLogin.Pass = ""
          
8560      If Right(Sdg("EXTERNAL_REFERENCE"), 1) = "P" Then

8570          Set frc = New FrmRequestConfirm
8580          Set frc.Con = Con
8590          frc.SdgName = Sdg("NAME")
8600          Call frc.Show(vbModal)
8610          If frc.ConfirmSucceeded Then
8620              PapAuthorise
8630          End If
8640          frc.ConfirmSucceeded = False
8650          Set frc = Nothing

8660      Else
8670          CyHyAuthorise
8680      End If


          'do not proceed in the authorisation process
          'if did not authorise because of a missing mandatory result
          '(do not unload the request etc):
8690      If MandatoryExists = True Then
8700          Exit Sub
8710      End If

8720      If Right(Sdg("EXTERNAL_REFERENCE"), 1) = "B" Then
8730          Call UpdateTransferalToTissueArchiveHis(Sdg("SDG_ID"))
8740      Else
8750          Call UpdateTransferalToTissueArchiveCytoPap(Sdg("SDG_ID"))
8760      End If
          

8770      save_sdg_id = nte(Sdg("SDG_ID"))
8780      If UCase(Role("NAME")) = UCase("doctor") Then
8790          Call Con.Execute("update lims_sys.sdg_user set u_qc = '" & QcRank & "' " & _
                  "where sdg_id = " & Sdg("SDG_ID"))
8800      End If
8810      OpenedRequest = False
8820      Call RefreshWindow
          
8830      If Sdg("STATUS") = "I" Then
8840          MsgBox "This request should be rechecked"
8850      End If
          
      '    If Right(Sdg("EXTERNAL_REFERENCE"), 1) = "P" Then
      '        PapAuthoriseMsg
      '    End If
          
      '    If Sdg("STATUTestCurFrameS") = "A" Then Call TriggerSdgEvent("Print Final Letter")
          'If PrintFax Or chkPrintFax.Value = 1 Then
          
          'print only checked for print (not because result is malignant):
8860      If chkPrintFax.Value = 1 Then
8870          Call TriggerSdgEvent("Print Fax", nte(Sdg("sdg_id")))
8880      ElseIf chkPrintFinalLetter.Value = 1 Then
8890          If Sdg("STATUS") = "A" Then Call TriggerSdgEvent("Print Final Letter", nte(Sdg("sdg_id")))
8900      End If
8910      sdg_log_desc = AuthorizedBy(nte(Sdg("sdg_id")), 1)
          
8920      Call UnloadRequest
8930      Call zLang.English
8940      SdgName.Alignment = vbLeftJustify
8950      SdgName.RightToLeft = False
8960      Call SdgName.SetFocus

8970      AuthoriseButton.Enabled = False
8980      SaveButton.Enabled = False
8990      gridAliquots.Top = lblStatusBar.Top + lblStatusBar.Height
9000      gridAliquots.Visible = False
              
9010      CmdResponseLetter.Enabled = False
          
9020      lblStatusBar.Caption = "Results where authorised successfully on " & Format(Now, "hh:mm:ss")
9030      Call sdg_log.InsertLog(save_sdg_id, "RE.AUTH", sdg_log_desc)
9040      Call SaveFreeTextContent
          
9050      Exit Sub
ErrHnd:
9060      Call ErrHandler("Authorise")
End Sub



Private Sub CloseButton_Click()
9070      On Error GoTo ErrHnd
9080      Call zLang.SetOrigLang

9090      Call ReleaseApplicationMutex
9100      If RunFromWindow Then
9110          RaiseEvent CloseClicked
9120      Else
9130          NtlsSite.CloseWindow
9140      End If

9150      Exit Sub
ErrHnd:
9160      Call ErrHandler("CloseButton_Click")
End Sub

Private Sub ConnectSameSession(ByVal aSessionID)
9170      On Error GoTo ErrHnd
          Dim aProc As New ADODB.Command
          Dim aSession As New ADODB.Parameter
          
9180      aProc.ActiveConnection = Con
9190      aProc.CommandText = "lims.lims_env.connect_same_session"
9200      aProc.CommandType = adCmdStoredProc

9210      aSession.Type = adDouble
9220      aSession.Direction = adParamInput
9230      aSession.Value = aSessionID
9240      aProc.parameters.Append aSession

9250      aProc.Execute
9260      Set aSession = Nothing
9270      Set aProc = Nothing
9280      Exit Sub
ErrHnd:
9290      Call ErrHandler("ConnectSameSession")
End Sub

Private Sub UnloadRequest()
9300      On Error GoTo ErrHnd
          Dim i
          'Dim e As Object

9310      For i = 1 To PResultCheckIndex
9320          Unload PResultCheck(i)
9330      Next i
9340      PResultCheckIndex = 0
9350      For i = 1 To PResultIndex
9360          Unload PResultDesc(i)
9370          Unload PResultLine(i)
9380      Next i
9390      PResultIndex = 0
9400      For i = 1 To PResultTextIndex
9410          Unload PResultText(i)
9420      Next i
9430      PResultTextIndex = 0
9440      For i = 1 To PResultPhraseIndex
9450          Unload PResultPhrase(i)
9460      Next i
9470      PResultTextIndex = 0
9480      For i = 2 To PFreeTextResultIndex
9490          PFreeTextResult(i).Terminate
9500          If nRTFResultBackup <> 3 Then
9510              Call PFreeTextResult(i).RemoveBackupResult
9520          End If
9530          Unload PFreeTextResult(i)
9540      Next i
9550      PFreeTextResultIndex = 1
9560      For i = 1 To PSnomedIndex
9570          SnomedCtrl(i).Terminate
9580          Unload SnomedCtrl(i)
9590      Next i
9600      PSnomedIndex = 0
          
9610      For i = 1 To PTestTabfra.Count
9620          If i = 1 Then PTestTab.Tabs(1).Caption = ""
9630          If i > 1 Then
9640              Unload PTestTabfra(i)
9650              PTestTab.Tabs.Remove (2)
9660          End If
9670      Next i

9680      For i = 1 To ImageRes.Count - 1
9690          Unload ImageRes(i)
9700      Next i

9710      If Not Sdg.State = adStateClosed Then Sdg.Close
9720      If Not Referring.State = adStateClosed Then Referring.Close
9730      If Not Aliquots.State = adStateClosed Then Aliquots.Close
9740      If Not Implement.State = adStateClosed Then Implement.Close
9750      If Not Patient.State = adStateClosed Then Patient.Close
9760      If Not Results.State = adStateClosed Then Results.Close
          
9770      nRTFResultBackup = 0
          
9780      OpenedRequest = False
          
9790      Exit Sub
ErrHnd:
9800      Call ErrHandler("UnloadRequest")
End Sub

Private Sub PatientProps_Click()
9810      On Error GoTo ErrHnd
9820      If PatientProps.SelectedItem.Index = PropsCurFrame Then Exit Sub
9830      PatientPropsfra(PatientProps.SelectedItem.Index).Visible = True
9840      PatientPropsfra(PropsCurFrame).Visible = False
9850      PropsCurFrame = PatientProps.SelectedItem.Index
9860      Exit Sub
ErrHnd:
9870      Call ErrHandler("PatientProps_Click")
End Sub
Private Sub cmdOrangeDiagnosis_Click()
9880      Set PTestTab.SelectedItem = PTestTab.Tabs(1)
9890      PTestTab_Click
End Sub
Private Sub PTestTab_Click()
9900      On Error GoTo ErrHnd
9910      If PTestTab.SelectedItem.Index = TestCurFrame Then
9920          SetFirstFocus
9930          Exit Sub
9940      End If
9950      PTestTabfra(PTestTab.SelectedItem.Index).Visible = True
9960      PTestTabfra(TestCurFrame).Visible = False
9970      TestCurFrame = PTestTab.SelectedItem.Index
9980      SetFirstFocus
          
9990      If UCase(PTestTab.SelectedItem.Caption) = UCase("Histology Macro") Then
       

10000         Call PFreeTextResult(PFreeTextResultIndex).SetFocus
10010     End If
          'Call SdgName.SetFocus
              
10020     Exit Sub
ErrHnd:
10030     Call ErrHandler("PTestTab_Click")
End Sub
Private Function ExitQueryResult() As Boolean
10040     If MsgBox("?בוצעו שינויים שלא נשמרו. האם ברצונך לצאת ללא שמירה  ", _
                            vbCritical + vbYesNoCancel + vbDefaultButton2) = vbYes Then
10050           ExitQueryResult = True
10060     Else
10070           ExitQueryResult = False
10080     End If
End Function
Private Sub SdgName_KeyDown(KeyCode As Integer, Shift As Integer)
          
          Dim rst As New ADODB.Recordset
          Dim Patholog As ADODB.Recordset
          Dim row As Integer
          
10090     On Error GoTo ErrHnd
          
10100     btnPrintFax.Enabled = False
          
10110     If Not KeyCode = vbKeyReturn Then Exit Sub
            Debug.Assert (False)
            
            
10120     If FreeTextContentChanged Then
10130         If ExitQueryResult = False Then Exit Sub
10140     End If
10150     lblStatusBar.Caption = ""
10160     chkConsult.Value = 0
10170     CmdResponseLetter.Enabled = False
10180     cmdAdditionalActions.Visible = False
10190     SdgName.Text = UCase(SdgName.Text)


      '    If OpenedRequest Then
      '        If Sdg("STATUS") <> "A" Then
      '            If MsgBox("Results weren't saved." & vbCrLf & _
      '                    "Are you sure you want to proceed?", vbYesNo) = vbNo Then
      '                SdgName.Text = ""
      '                Exit Sub
      '            End If
      '        End If
      '    End If
10200     Call PrintFaxResult.RemoveAll
10210     Call VisibleResultTab.RemoveAll
10220     PrintFax = False
10230     Call UnloadRequest
10240     Call LoadRecordsets
              
10250     If Sdg.EOF Then Exit Sub
          
10260     If Sdg("STATUS") = "A" Then
10270         MsgBox ("Sdg is Authorised, No changes can be made!")
10280         btnPrintFax.Enabled = True
10290     End If
          
10300     If Sdg("STATUS") = "S" Or Sdg("STATUS") = "X" Or Sdg("STATUS") = "U" Then
10310         MsgBox "Request is of status " & Sdg("STATUS") & _
                  vbCrLf & "and therefore can not be loaded!"
10320         SdgName.Text = ""
10330         Call zLang.English
10340         SdgName.Alignment = vbLeftJustify
10350         SdgName.RightToLeft = False
10360         Call SdgName.SetFocus
10370         Exit Sub
10380     End If
10390     Set rst = Con.Execute("select name from lims_sys.sample " & _
              "where sdg_id = " & Sdg("SDG_ID") & " and " & _
              "(status = 'U' or status = 'S')")
10400     If Not rst.EOF Then
10410         MsgBox "Not all samples were received!"
10420         SdgName.Text = ""
10430         Call zLang.English
10440         SdgName.Alignment = vbLeftJustify
10450         SdgName.RightToLeft = False
10460         Call SdgName.SetFocus
10470         rst.Close
10480         Exit Sub
10490     End If
10500     rst.Close

10510        cmd_assutaPdf.Enabled = False
             
          'release previously owned semaphore:
10520     If strHandle <> "" Then
10530         Call ReleaseHandle
10540     End If
          
          
10550     lblRequestTitle.BackColor = &HC0FFFF
          
          
          'try and lock this request:
10560     If AllocateHandle("RESULT_ENTRY_" & SdgName.Text) = False Then
10570         strHandle = ""
              
10580         SdgName.Text = ""
10590         Call zLang.English
10600         SdgName.Alignment = vbLeftJustify
10610         SdgName.RightToLeft = False
10620         Call SdgName.SetFocus
10630         Exit Sub
10640     End If

          
10650     If Not InspectionLog Is Nothing Then
10660         If Not InspectionLog.State = adStateClosed Then InspectionLog.Close
10670     End If
10680     Set InspectionLog = Con.Execute("select operator_id from " & _
              "lims_sys.inspection_log log " & _
              "where log.table_name = 'SDG' and " & _
              "log.table_key = " & Sdg("SDG_ID") & " and " & _
              "log.operator_id = " & NtlsUser.GetOperatorId)
              
              'this area of code is very problematic!!!
              
      '    If (Right(Sdg("EXTERNAL_REFERENCE"), 1) = "P" And _
      '       UCase(Role("NAME")) <> UCase("doctor") And _
      '       UCase(Role("NAME")) <> UCase("pap inspector") And _
      '       (Sdg("STATUS") = "I" Or Sdg("STATUS") = "A" Or Sdg("STATUS") = "R")) _
      ' _
      '        Or
10690     If (Right(Sdg("EXTERNAL_REFERENCE"), 1) = "P" _
              And UCase(Role("NAME")) <> UCase("doctor") And _
              UCase(Role("NAME")) <> UCase("pap inspector") And _
              UCase(Role("NAME")) <> UCase("cytoscreener")) _
 _
              Or (Right(Sdg("EXTERNAL_REFERENCE"), 1) <> "P" _
              And UCase(Role("NAME")) = UCase("doctor") And _
              Sdg("STATUS") = "I" And Not InspectionLog.EOF) _
 _
              Or (Right(Sdg("EXTERNAL_REFERENCE"), 1) <> "P" _
              And UCase(Role("NAME")) <> UCase("doctor")) Then
              
      '        SaveButton.Enabled = False
10700         AuthoriseButton.Enabled = False
10710         AuthoriseButtonFlag = False
10720     Else
10730         SaveButton.Enabled = True
10740         AuthoriseButton.Enabled = True
10750         AuthoriseButtonFlag = True
10760     End If
          
      '    If IsInRevision(Sdg("SDG_ID")) Then
      '        AuthoriseButton.Visible = False
      '    Else
10770         AuthoriseButton.Visible = True
      '    End If
          
10780     If (Left(Sdg("name"), 1)) <> "P" Then
10790         SummaryButton.Enabled = False
10800         txtPapHeader.Visible = False
10810     Else
10820         SummaryButton.Enabled = True
              '------------------
              'PAT002
10830         txtPapHeader.Visible = True
10840         Call LoadPapHeader(Sdg("SDG_ID"))
              
10850     End If

10860     If Not RunFromWindow Then
10870         NtlsSite.SetWindowTitle (Sdg("NAME") & " - " & Patient("U_FIRST_NAME") & _
                  " " & Patient("U_LAST_NAME"))
10880     End If
       
10890     Call LoadProps
10900     row = 1
10910     Call LoadHistory
10920     row = 2
10930     Call LoadResults
10940     row = 3

              'ashi - Assuta interface
10950    If (nte(Sdg("U_ATFILENM")) <> "") Then
10960         cmd_assutaPdf.Enabled = True
10970         cmd_assutaPdf.BackColor = &HFFC0C0
10980    Else
10990         cmd_assutaPdf.Enabled = False
11000         cmd_assutaPdf.BackColor = &H80000016
11010    End If
11020    row = 4
          
          

          ' Barak - find the patholog
11030     If Sdg("STATUS") <> "A" And Sdg("STATUS") <> "R" Then
11040         If nte(Sdg("U_PATHOLOG")) <> "" Then
          '        Set Patholog = con.Execute("select phrase_description, phrase_name from lims_sys.phrase_entry " & _
                      "where phrase_id = (select phrase_id from lims_sys.phrase_header where " & _
                      "name = 'Patholog') and phrase_name = '" & nte(Sdg("U_PATHOLOG")) & "'")
                  'cmbPatholog.Text = nte(Patholog("PHRASE_DESCRIPTION"))
11050             If PathologCoredNumberToName(nte(Sdg("U_PATHOLOG"))) = "" Then
11060                 cmbPatholog.Text = "None"
11070             Else
11080                 cmbPatholog.Text = PathologCoredNumberToName(nte(Sdg("U_PATHOLOG")))
11090             End If
11100         Else
11110             cmbPatholog.Text = "None"
11120         End If
11130     End If
11140     row = 5
11150     Set SdgStatusImage.Picture = LoadPicture("Resource\sdg" & Sdg("STATUS") & ".ico")
11160     row = 6
          
11170     PSummaryText.Text = ""
11180     If SummaryButton.Caption = "Entry" Then Call SummaryButton_Click
11190     OpenedRequest = True
11200     row = 7
      '    Set rst = con.Execute("select 1 from lims_sys.inspection_entry entry, " & _
      '        "lims_sys.inspection_log log " & _
      '        "where log.table_name = 'SDG' and " & _
      '        "log.table_key = " & Sdg("SDG_ID") & " and " & _
      '        "log.order_number = entry.inspection_order and " & _
      '        "entry.inspection_plan_id = " & Sdg("INSPECTION_PLAN_ID") & " and " & _
      '        "log.role_id <> entry.role_id and " & _
      '        "entry.role_id = " & NtlsUser.GetRoleId)
      '    If rst.EOF Then
      '        AuthoriseButton.Enabled = False
      '        SaveButton.Enabled = False
      '    Else
      '        AuthoriseButton.Enabled = True
      '        SaveButton.Enabled = True
      '    End If

11210     RequestRemarkCtrl.Visible = True
11220     Call RequestRemarkCtrl.GetsdgName(Sdg("EXTERNAL_REFERENCE"))
11230    row = 8
11240     RequestRemarkCtrl.Refresh
11250     row = 9
11260     sdg_log_desc = ""
11270     Call sdg_log.InsertLog(Sdg("SDG_ID"), "RE.SELECT", sdg_log_desc)
11280     row = 10
          ' shlomi pinto::14-10-2004 -> check if ther is any aliquot with the result name report color that wasent entry/reported
11290     Call CheckReportColorSlides(Sdg("SDG_ID"), "Report Color")
11300     row = 11
          'do not present left material:
          'Call FillMaterialFromSample
          
          
11310     If Left(Sdg("NAME"), 1) = "P" Then
11320         row = 12
11330         Call ShowResultTab
11340         row = 13
11350     End If
          

11360     Call zLang.SetOrigLang
11370     row = 14
11380     Call InitAliquotGrid
11390     row = 15
11400     Call LoalResponseLetter(nte(Sdg("sdg_id")))
11410     row = 16
11420     Call SignalExtraRequest(nte(Sdg("external_reference")))
11430     row = 17
      '    Call SignalExtraRequest(nte(Sdg("sdg_id")))
          
          
11440     If InStr(1, nte(Sdg("NAME")), "V") = 0 Then
11450         row = 18
11460         cmdAdditionalActions.Visible = True
11470         row = 19
11480     End If
          
11490     If InStr(1, nte(Sdg("NAME")), "R") = 0 Then
          
11500       cmdAdditionalActions.Enabled = True
11510     Else
11520       cmdAdditionalActions.Enabled = False
11530     End If

11540 If Left(Sdg("NAME"), 1) = "B" Then
11550         row = 20
              Dim iSnomedTIndex As Integer
11560         row = 21
11570         OrganCtrl.Visible = True
11580         OrganCtrl.SdgId = Sdg("sdg_id")
11590         OrganCtrl.Initialize

11600         iSnomedTIndex = GetSnomedTResultIndex
              
              'get the Snomed T result from the Organ control
              'only if the value in the DB is empty:
11610 row = 22
11620     If iSnomedTIndex <> -1 Then
          'nautilus update
11630         If PResultText(iSnomedTIndex).Text = "" Then
11640             row = 23
11650             Call SetOrgansSnomedT
11660             row = 24
11670         End If
11680     End If
11690     Else
11700         row = 25
11710         OrganCtrl.Visible = False
11720         OrganCtrl.SdgId = ""
11730         OrganCtrl.SampleID = ""
              'OrganCtrl.Initialize
11740     End If
11750     row = 26
          'before clicking any tab, the focus returns to the initial input:
11760     If Not RunFromWindow Then
11770         Call SdgName.SetFocus
11780     End If
11790     row = 27
11800     Call SaveFreeTextContent
11810     row = 28
11820     cmdOrangeDiagnosis.ZOrder (ZOrderConstants.vbBringToFront)
          


          
11830     Exit Sub
ErrHnd:
11840     Call ErrHandler("SdgName_KeyDown, Row = " & row)
End Sub
Private Sub SaveFreeTextContent()
          Dim i As Integer
11850     ReDim OriginalFreeTextRes(PFreeTextResult.LBound To PFreeTextResult.UBound) As String
11860     For i = PFreeTextResult.LBound To PFreeTextResult.UBound
11870         OriginalFreeTextRes(i) = PFreeTextResult(i).GetContent
11880     Next i
End Sub
Private Function FreeTextContentChanged() As Boolean
          Dim i As Integer
          Dim result As Boolean
11890     For i = PFreeTextResult.LBound To PFreeTextResult.UBound
11900         result = (OriginalFreeTextRes(i) <> PFreeTextResult(i).GetContent) Or result
11910     Next i
11920     FreeTextContentChanged = result
End Function


'_____________________________________
'PAT - 002
Private Sub LoadPapHeader(SdgId As String)

11930     On Error GoTo ERR_LoadPapHeader
          Dim rsSample As Recordset
          Dim testCode As String
          Dim sql As String
          'we also neet  su.u_test_code in patholab
11940     sql = " select  su.u_test_code, s.name sample_name  "
11950     sql = sql & " from"
11960     sql = sql & "  lims_sys.sample s , lims_sys.sample_user su"
11970     sql = sql & " where "
11980     sql = sql & "         s.sdg_id =" & SdgId
11990     sql = sql & "     and su.sample_id=s.sample_id"
12000     sql = sql & "     and s.status<>'X' "
12010     Set rsSample = Con.Execute(sql)
12020     If Not rsSample.EOF Then
          'assuming there is only one sample EVER!!
12030         testCode = nte(rsSample("u_test_code"))

12040         If testCode = PAP_LBC_TEST_CODE Or testCode = PAP_LBC_TEST_CODE_MEDICAL Then
12050             txtPapHeader = PAP_LBC_HEADER
12060             txtPapHeader.ForeColor = GREEN

12070         Else
12080             txtPapHeader = PAP_SMEAR_HEADER
12090             txtPapHeader.ForeColor = RED
12100         End If
12110         While Not rsSample.EOF
12120             testCode = nte(rsSample("u_test_code"))
12130             If testCode = PAP_TEST_CODE_MEDICAL Or testCode = PAP_LBC_TEST_CODE_MEDICAL Then
12140                 lblRequestTitle.BackColor = RED
12150             End If
12160             rsSample.MoveNext
12170         Wend


12180     End If
12190     Exit Sub
ERR_LoadPapHeader:
12200 MsgBox "ERR_LoadPapHeader" & vbCrLf & Err.Description
End Sub
'__________

Private Sub ShowResultTab()
12210     On Error GoTo ErrHnd
          Dim i As Integer

12220     For i = 1 To VisibleResultTab.Count
12230         If CInt(VisibleResultTab(CStr(i))) > 0 Then
12240             ImageRes(i).Visible = True
12250         End If
12260     Next i
12270     Exit Sub
ErrHnd:
12280     Call ErrHandler("ShowResultTab")
End Sub

Private Sub FillMaterialFromSample()
12290     On Error GoTo ErrHnd
          Dim SampleRec As ADODB.Recordset

12300     Set SampleRec = Con.Execute("select count(*) " & _
                          "from lims_sys.sample, lims_sys.sample_user " & _
                          "where sample.sample_id = sample_user.sample_id and " & _
                          "sample.sdg_id = '" & Sdg("SDG_ID") & "' and " & _
                          "sample_user.u_material = 'T'")

12310     LblMaterialTitle.Visible = False
12320     LblMaterialValue.Visible = False

12330     If Left(SdgName.Text, 1) = "B" Then
              
              
12340         LblMaterialTitle.Visible = True
12350         LblMaterialValue.Visible = True
12360         If SampleRec(0) = 0 Then
12370             LblMaterialValue.Caption = "לא"
12380         Else
12390             LblMaterialValue.Caption = "כן"
12400         End If
12410     End If
12420     Exit Sub
ErrHnd:
12430     Call ErrHandler("FillMaterialFromSample")
End Sub

Private Sub SdgName_KeyUp(KeyCode As Integer, Shift As Integer)
12440     On Error GoTo ErrHnd
12450     If Not KeyCode = vbKeyReturn Then Exit Sub
          
12460     SdgName.Text = ""
12470     Exit Sub
ErrHnd:
12480     Call ErrHandler("SdgName_KeyUp")
End Sub

Private Sub LoadRecordsets()
12490     On Error GoTo ErrHnd

12500     If InStr(SdgName.Text, ".") > 0 Then
12510         SdgName.Text = Left(SdgName.Text, InStr(SdgName.Text, ".") - 1)
12520     End If
'12530     If InStr(SdgName.Text, "_") > 0 Then
'12540         SdgName.Text = Left(SdgName.Text, InStr(SdgName.Text, "_") - 1)
'12550     End If
12560     Set Sdg = Con.Execute("select * from lims_sys.sdg, lims_sys.sdg_user where " & _
              "sdg.sdg_id = sdg_user.sdg_id and " & _
              "( sdg." & BarcodeField & " = '" & SdgName.Text & "' or " & _
               " sdg_user.U_PATHOLAB_NUMBER ='" & SdgName.Text & "')")
12570     If Sdg.EOF Then
12580         MsgBox ("Illegal Request Name or Patholab Number!")
12590         SdgName.Text = ""
12600         Call zLang.English
12610         SdgName.Alignment = vbLeftJustify
12620         SdgName.RightToLeft = False
12630         Call SdgName.SetFocus
12640         Exit Sub
12650     End If
          ' shlomi pinto::17-10-2004 -> add "'" befor iif and after
12660     Set Referring = Con.Execute("select * from lims_sys.supplier, " & _
              "lims_sys.supplier_user, lims_sys.address " & _
              "where supplier.supplier_id = supplier_user.supplier_id and " & _
              "address_table_name(+) = 'SUPPLIER' and " & _
              "address_line_1(+) = '" & IIf(nte(Sdg("U_CLINIC_CODE")) = "", "0", nte(Sdg("U_CLINIC_CODE"))) & "' and " & _
              "address_item_id(+) = supplier.supplier_id and " & _
              "supplier.supplier_id = " & IIf(nte(Sdg("U_REFERRING_PHYSICIAN")) = "", "0", nte(Sdg("U_REFERRING_PHYSICIAN"))))
          ' shlomi pinto::14-10-2004 -> add "'" befor iif and after
12670     Set Implement = Con.Execute("select * from lims_sys.supplier, " & _
              "lims_sys.supplier_user, lims_sys.address " & _
              "where supplier.supplier_id = supplier_user.supplier_id and " & _
              "address_table_name(+) = 'SUPPLIER' and " & _
              "address_line_1(+) = '" & IIf(nte(Sdg("U_IMPLEMENTING_CLINIC")) = "", "0", nte(Sdg("U_IMPLEMENTING_CLINIC"))) & "' and " & _
              "address_item_id(+) = supplier.supplier_id and " & _
              "supplier.supplier_id = " & IIf(nte(Sdg("U_IMPLEMENTING_PHYSICIAN")) = "", "0", nte(Sdg("U_IMPLEMENTING_PHYSICIAN"))))
12680     Set Patient = Con.Execute("select * from lims_sys.client, " & _
              "lims_sys.client_user, lims_sys.address " & _
              "where client.client_id = client_user.client_id and " & _
              "address_table_name(+) = 'CLIENT' and " & _
              "address_line_1(+) = '0' and " & _
              "address_item_id(+) = client.client_id and " & _
        "client.client_id = " & Sdg("U_PATIENT"))
12690     Set Results = Con.Execute("select result.result_id, result.name result_name, " & _
              "u_result_desc_user.u_bold,u_result_desc_user.u_height, u_result_desc_user.u_width, u_result_desc_user.u_visible,u_result_desc_user.u_read_only,u_result_desc_user.u_label," & _
              "u_result_desc_user.u_free_text_template, u_result_desc_user.u_template_name,u_result_desc_user.u_type,u_result_desc_user.u_rtl,u_result_desc_user.u_phrase_list," & _
              "u_result_desc_user.u_needs_review, u_result_desc_user.u_print_fax, u_result_desc_user.u_font_color, test.name test_name, result.status, result.description," & _
              "test.priority, u_result_desc_user.u_order,u_result_desc_user.u_renk, formatted_result, test_template.amount_used " & _
              "from lims_sys.result, lims_sys.result_user, lims_sys.test, lims_sys.aliquot, lims_sys.sample, lims_sys.u_result_desc_user, lims_sys.result_template, lims_sys.test_template " & _
              "where result.test_id = test.test_id " & _
              "and result.result_id = result_user.result_id " & _
              "and test.aliquot_id = aliquot.aliquot_id " & _
              "and aliquot.sample_id = sample.sample_id " & _
              "and result.result_template_id = result_template.result_template_id " & _
              "and result_template.name = u_result_desc_user.u_template_name " & _
              "and test_template.test_template_id = test.test_template_id " & _
              "and sample.sdg_id = " & Sdg("SDG_ID") & " " & _
              "and test.priority > 0 " & _
              "and u_result_desc_user.u_order > 0 " & _
              "and result.status <> 'X' " & _
              "and test.status <> 'X' " & _
              "and aliquot.status <> 'X' " & _
              "order by test.priority, u_result_desc_user.u_order")
12700     Set Aliquots = Con.Execute("select aliquot.aliquot_id from lims_sys.aliquot, " & _
              "lims_sys.sample,lims_sys.sdg where aliquot.sample_id = sample.sample_id " & _
              "and sample.sdg_id = sdg.sdg_id and sdg.sdg_id = " & Sdg("SDG_ID") & " " & _
              "and aliquot.status='V' " & _
              "order by aliquot.aliquot_id desc")
12710     Set SnomedMCalculation = Con.Execute("select description,u_snomed_code from " & _
              "lims_sys.u_snomed_calculation usc, lims_sys.u_snomed_calculation_user uscu " & _
              "where usc.u_snomed_calculation_id = uscu.u_snomed_calculation_id " & _
              "and u_snomed_template = 'Snomed M' and u_sdg_template = '" & Left(Sdg("NAME"), 1) & "'")
12720     Set SnomedTCalculation = Con.Execute("select description,u_snomed_code from " & _
              "lims_sys.u_snomed_calculation usc, lims_sys.u_snomed_calculation_user uscu " & _
              "where usc.u_snomed_calculation_id = uscu.u_snomed_calculation_id " & _
              "and u_snomed_template = 'Snomed T' and u_sdg_template = '" & Left(Sdg("NAME"), 1) & "'")
12730     Set SampleCodes = Con.Execute("select * from " & _
              "lims_sys.u_sample_code usc, lims_sys.u_sample_code_user uscu " & _
              "where usc.u_sample_code_id = uscu.u_sample_code_id " & _
              "and u_letter = '" & Left(Sdg("NAME"), 1) & "'")
           Dim sql As String
12740     sql = " select o.name order_name, C.NAME Costumer_NAME "
12750     sql = sql & "from lims_sys.U_ORDER o, "
12760     sql = sql & "lims_sys.U_ORDER_USER ou, "
12770     sql = sql & "LIMS_SYS.U_CUSTOMER c, "
12780     sql = sql & "LIMS_SYS.U_CUSTOMER_USER cu "
12790     sql = sql & "where "
12800     sql = sql & "ou.u_sdg_name='" & Sdg("NAME") & "' "
12810     sql = sql & "and O.U_ORDER_ID=OU.U_ORDER_ID "
12820     sql = sql & "and OU.U_CUSTOMER= C.U_CUSTOMER_ID "
12830     sql = sql & "and OU.U_CUSTOMER= CU.U_CUSTOMER_ID "
          
12840     Set OrderAndCostumer = Con.Execute(sql)
          

12850     Exit Sub
          
ErrHnd:
12860     Call ErrHandler("LoadRecordsets")
End Sub

Private Sub LoadProps()
      Dim errorline As Integer

12870     On Error GoTo ErrHnd
          Dim i
          Dim Inspector As ADODB.Recordset
          Dim Collection As ADODB.Recordset
          Dim CompletedBy As ADODB.Recordset
          Dim Revisions As ADODB.Recordset
          Dim ConnectedRefCount As Integer
       

12880     lblRequestTitle.Caption = nte(Sdg("NAME")) & " - " & nte(Sdg("U_PATHOLAB_NUMBER"))
          
12890     If OrderAndCostumer.EOF Then
12900         lblPayingCustomer.Caption = ""
12910     Else
12920         lblPayingCustomer.Caption = nte(OrderAndCostumer("Costumer_NAME"))
12930     End If
       
12940     Set Revisions = Con.Execute("select sdg.name from lims_sys.sdg " & _
              "where sdg.name = '" & Sdg("NAME") & "V1'")
12950     LblRevisionStatus.Caption = ""
12960     If Not Revisions.EOF Then
12970         LblRevisionStatus.Caption = "רוויזיה"
12980     ElseIf InStr(1, Sdg("NAME"), "V") Then
12990         LblRevisionStatus.Caption = "קיים עדכון"
13000     End If
      '  roy: this area of code never changed title color.
          
13010     If Not SampleCodes.EOF Then
13020         lblSampleCodeRemark.Caption = nte(SampleCodes("u_remark"))
13030     End If
          
13040     If lblSampleCodeRemark <> "" Then
13050         lblSampleCodeRemark.Visible = True
13060         lblRequestTitle.BackColor = RED
13070     Else
13080         lblSampleCodeRemark.Visible = False
      '        lblRequestTitle.BackColor = &HC0FFFF
13090     End If
       
13100     Revisions.Close
13110     If Not Patient.EOF Then
13120         PropsGeneralPatientName.Text = nte(Patient("U_FIRST_NAME")) & _
                  " " & nte(Patient("U_LAST_NAME"))
13130         PropsGeneralPatientID.Text = nte(Patient("NAME"))
13140         PropsGeneralPatientGender.Text = nte(Patient("U_GENDER"))
13150         PropsGeneralPatientBirth.Text = nte(Patient("U_DATE_OF_BIRTH"))
13160         PropsPatientName = nte(Patient("U_FIRST_NAME")) & _
                  " " & nte(Patient("U_LAST_NAME"))
13170         lblRequestTitle.Caption = lblRequestTitle & " - " & PropsPatientName
13180         PropsPatientAddress = nte(Patient("ADDRESS_LINE_2")) & vbCrLf & _
                  nte(Patient("ADDRESS_LINE_3")) & vbCrLf & _
                  nte(Patient("ADDRESS_LINE_4")) & vbCrLf & _
                  nte(Patient("ADDRESS_LINE_5")) & vbCrLf & _
                  nte(Patient("POSTAL_CODE")) & vbCrLf & _
                  nte(Patient("PHONE")) & vbCrLf & _
                  nte(Patient("FAX")) & vbCrLf
13190     End If
       
13200     PropsGeneralReferring.Text = ""
13210     PropsPhysRefName.Text = ""
13220     PropsPhysRefAddress.Text = ""
13230     If Not Referring.EOF Then
13240         PropsGeneralReferring.Text = nte(Referring("U_FIRST_NAME")) & _
                                           " " & _
                                           nte(Referring("U_LAST_NAME")) & _
                                           " - " & _
                                           nte(Referring("U_LICENSE_NBR"))
13250         PropsPhysRefName.Text = nte(Referring("U_FIRST_NAME")) & _
                  " " & nte(Referring("U_LAST_NAME"))
13260         PropsPhysRefAddress.Text = nte(Referring("ADDRESS_LINE_2")) & vbCrLf & _
                  nte(Referring("ADDRESS_LINE_3")) & vbCrLf & _
                  nte(Referring("ADDRESS_LINE_4")) & vbCrLf & _
                  nte(Referring("ADDRESS_LINE_5")) & vbCrLf & _
                  nte(Referring("POSTAL_CODE")) & vbCrLf & _
                  nte(Referring("PHONE")) & vbCrLf & _
                  nte(Referring("FAX")) & vbCrLf
13270     End If
       
13280     PropsGeneralSubmitting.Text = ""
13290     PropsPhysSubName.Text = ""
13300     PropsPhysSubAddress.Text = ""
13310     If Not Implement.EOF Then
13320         PropsGeneralSubmitting.Text = nte(Implement("U_FIRST_NAME")) & _
                                            " " & _
                                            nte(Implement("U_LAST_NAME")) & _
                                            " - " & _
                                            nte(Implement("U_LICENSE_NBR"))
13330         PropsPhysSubName.Text = nte(Implement("U_FIRST_NAME")) & _
                  " " & nte(Implement("U_LAST_NAME"))
13340         PropsPhysSubAddress.Text = nte(Implement("ADDRESS_LINE_2")) & vbCrLf & _
                  nte(Implement("ADDRESS_LINE_3")) & vbCrLf & _
                  nte(Implement("ADDRESS_LINE_4")) & vbCrLf & _
                  nte(Implement("ADDRESS_LINE_5")) & vbCrLf & _
                  nte(Implement("POSTAL_CODE")) & vbCrLf & _
                  nte(Implement("PHONE")) & vbCrLf & _
                  nte(Implement("FAX"))
13350     End If
13360     PropsGeneralSdgPriority.Text = nte(Sdg("U_PRIORITY"))
13370     PropsGeneralSdgDelivery.Text = nte(Sdg("U_REFERRAL_DATE"))
13380     PropsGeneralSdgSlides.Text = nte(Sdg("U_SLIDE_NBR"))
13390     If IsNull(Sdg("u_implementing_clinic")) Then
13400         PropsGeneralSdgCollection.Text = ""
13410         PropsGeneralSdgCollection.Text = ""
13420     Else
13430         Set Collection = Con.Execute("select * from lims_sys.u_clinic, lims_sys.u_clinic_user, lims_sys.address " & _
                  "where u_clinic.u_clinic_id = u_clinic_user.u_clinic_id and " & _
                  "address_table_name(+) = 'U_CLINIC' and " & _
                  "address_line_1(+) = u_clinic.name and " & _
                  "address_item_id(+) = u_clinic.u_clinic_id and " & _
                  "u_clinic.u_clinic_id = '" & Sdg("u_implementing_clinic") & "'")
13440         If Not Collection.EOF Then
13450             PropsGeneralSdgCollection.Text = nte(Collection("NAME")) & " - " & nte(Collection("U_CLINIC_NAME"))
13460             PropsPhysColName.Text = nte(Collection("NAME")) & " - " & nte(Collection("U_CLINIC_NAME"))
13470             PropsPhysColAddress.Text = nte(Collection("ADDRESS_LINE_2")) & vbCrLf & _
                  nte(Collection("ADDRESS_LINE_3")) & vbCrLf & _
                  nte(Collection("ADDRESS_LINE_4")) & vbCrLf & _
                  nte(Collection("ADDRESS_LINE_5")) & vbCrLf & _
                  nte(Collection("POSTAL_CODE")) & vbCrLf & _
                  nte(Collection("PHONE")) & vbCrLf & _
                  nte(Collection("FAX"))
13480         End If
13490         Collection.Close
13500     End If
13510     PropsGeneralSdgWeek.Text = nte(Sdg("U_WEEK_NBR"))

          'i = 11
      '    Set Inspector = con.Execute("select operator.name " & _
      '        "from lims_sys.inspection_log, lims_sys.operator " & _
      '        "where table_name = 'SDG' " & _
      '        "and table_key = " & Sdg("SDG_ID") & " " & _
      '        "and inspection_log.operator_id = operator.operator_id " & _
      '        "order by order_number")
13520     PropsGeneralSdgAuthorized(0).ForeColor = BLACK
13530     If Sdg("STATUS") = "I" And UCase(Role("NAME")) = UCase("PAP Inspector") Then
13540         PropsGeneralSdgAuthorized(0).Text = "Checked By QC"
13550         PropsGeneralSdgAuthorized(0).ForeColor = RED
13560         PropsGeneralSdgAuthorized(1).Text = ""
13570         PropsGeneralSdgAuthorized(2).Text = ""
13580     Else
              

13590         For i = 0 To 2
               

13600             Set Inspector = Con.Execute("select operator.name " & _
                      "from lims_sys.operator " & _
                      "where operator_id = lims.authorization.signed_by(" & Sdg("SDG_ID") & "," & i + 1 & ")")
                  
                    
13610              If Inspector.EOF Then
                   
13620                 PropsGeneralSdgAuthorized(i).Text = ""
13630             Else
                    
13640                 PropsGeneralSdgAuthorized(i).Text = nte(Inspector("NAME"))
          '            Inspector.MoveNext
13650             End If
                   
13660             Inspector.Close
13670         Next i
13680     End If
      '    Inspector.Close

      '    Dim Diagnose As ADODB.Recordset
      '    For i = 1 To 4
      '        If Not IsNull(Sdg("U_DIAGNOSIS" & i)) Then
      '            Set Diagnose = con.Execute("select u_diagnos_name from lims_sys.u_diagnos, lims_sys.u_diagnos_user " & _
      '                "where u_diagnos.u_diagnos_id = u_diagnos_user.u_diagnos_id and " & _
      '                "name = '" & Sdg("U_DIAGNOSIS" & i) & "'")
      '            If Not Diagnose.EOF Then
      '                PropsReferralDiagnose(i) = Diagnose("U_DIAGNOS_NAME")
      '            Else
      '                PropsReferralDiagnose(i) = ""
      '            End If
      '            Call Diagnose.Close
      '        Else
      '            PropsReferralDiagnose(i) = ""
      '        End If
      '    Next i
       
13690     If (Right(nte(Sdg("EXTERNAL_REFERENCE")), 1) <> "B") Then 'hila- cancel the use of ref in case Histology "B"
13700         If chkRefCancel.Value <> vbChecked Then
13710             If Debugging Then MsgBox 101100
13720             InitReferrals
13730             ConnectedRefCount = Ref.ConnectedRefCount
13740             For i = 0 To ConnectedRefCount - 1
13750                 If i = 2 Then Exit For
13760                 Select Case Ref.RequestType
                          Case "B"
                          
13770                         If Ref.Histology_.IsExecuting(CInt(i)) Then
13780                             PropsReferralDiagnose(1).Text = Ref.GetRefSummary(CInt(i))
13790                             PropsReferralDiagnose(1).Tag = i & ""
13800                         Else
13810                             PropsReferralDiagnose(2).Text = Ref.GetRefSummary(CInt(i))
13820                             PropsReferralDiagnose(2).Tag = i & ""
13830                         End If
13840                     Case "C"
13850                         If Ref.Cytology_.IsExecuting(CInt(i)) Then
13860                             PropsReferralDiagnose(1).Text = Ref.GetRefSummary(CInt(i))
13870                             PropsReferralDiagnose(1).Tag = i & ""
13880                         Else
13890                             PropsReferralDiagnose(2).Text = Ref.GetRefSummary(CInt(i))
13900                             PropsReferralDiagnose(2).Tag = i & ""
13910                         End If
13920                     Case "P"
13930                         PropsReferralDiagnose(1).Text = Ref.GetRefSummary(CInt(i))
13940                         PropsReferralDiagnose(1).Tag = i & ""
13950                 End Select
13960             Next i
13970         End If
13980     End If 'hila
      'If Debugging Then MsgBox 10
      '    QCtxt = nte(Sdg("U_QC"))
13990     QcRank = ntz(Sdg("U_QC"))
14000 If Debugging Then MsgBox 11

      '    chkQC.Value = IIf(ntz(Sdg("U_ISQC")) = "T", 1, 0)
14010     chkCon.Value = IIf(ntz(Sdg("U_ISCONSULT")) = "T", 1, 0)


14020 If Debugging Then MsgBox 12
14030     SdgCompleted.Text = ""
14040     SdgCompleted.ForeColor = BLACK
14050     If nte(Sdg("COMPLETED_BY")) <> "" Then
14060         Set CompletedBy = Con.Execute("select operator.name " & _
                  "from lims_sys.operator " & _
                  "where operator.operator_id = " & nte(Sdg("COMPLETED_BY")))
14070         If Not CompletedBy.EOF Then
14080             SdgCompleted.Text = CompletedBy("Name")
14090         End If
14100         CompletedBy.Close
14110     End If
14120 If Debugging Then MsgBox 13
14130     If Sdg("STATUS") = "I" And UCase(Role("NAME")) = UCase("PAP Inspector") Then
14140         SdgCompleted.ForeColor = RED
14150         SdgCompleted.Text = "Checked By QC"
14160     End If
14170     TxtAuthorizedOn.Text = Trim(nte(Sdg("AUTHORISED_ON")))
14180     Exit Sub
ErrHnd:
14190     Call ErrHandler("LoadProps ")
End Sub
Private Function TamplateExists(SdgId As String) As Boolean
          Dim sql As String
14200   sql = " select 1 "
14210     sql = sql & "  from "
14220     sql = sql & "  lims_sys.sdg d, "
14230     sql = sql & "  lims_sys.sample s, "
14240     sql = sql & "  lims_sys.sample_user su, "
14250     sql = sql & "  lims_sys.U_LIST l "
14260     sql = sql & "  where "
14270     sql = sql & "  d.SDG_ID= " & SdgId
14280     sql = sql & "  and  su.SAMPLE_ID=s.SAMPLE_ID "
14290     sql = sql & "  and d.sdg_id =s.sdg_id "
14300     sql = sql & "  and  l.name  like '%' ||  su.U_ORGAN_CODE  || '%'"
14310     sql = sql & " and rownum=1"
          ' return True if Tamplate Exists
14320     TamplateExists = Not Con.Execute(sql).EOF
End Function


Private Sub LoadResults()
14330     On Error GoTo ErrHnd
          Dim CurTest As String
          Dim i, j
          Dim w, h, TabCurTop, MaxTop As Integer
          Dim CountBool As Integer
14340     IsMicroTextSaved = True
14350 If Debugging Then MsgBox "load res 1"
14360     Call dicResultIdToName.RemoveAll
14370     i = 1
14380     PResultIndex = 0
14390     PResultCheckIndex = 0
14400     PResultTextIndex = 0
14410     PResultPhraseIndex = 0
14420     PFreeTextResultIndex = 1
14430     PSnomedIndex = 0
14440     TestCurFrame = 1
14450     PTestTab.Height = PTestTabHeight
14460     PTestTabfra(1).Height = PTestTabFraHeight
14470      frmDiagnosis.Visible = False
14480     If Results.EOF Then Exit Sub
14490     Do Until Results.EOF
          
14500         If Not dicResultIdToName.Exists(nte(Results("RESULT_ID"))) Then
14510             Call dicResultIdToName.Add(nte(Results("RESULT_ID")), nte(Results("RESULT_NAME")))
14520         End If
              
              'free text result
14530         If Results("PRIORITY") = 10 Then Exit Do
14540         CurTest = Results("TEST_NAME")
14550         If i > 1 Then
14560             Call PTestTab.Tabs.Add(i, , CurTest)
14570             Load PTestTabfra(i)
14580             PTestTabfra(i).Left = PTestTab.ClientLeft
14590             PTestTabfra(i).Top = PTestTab.ClientTop
14600             PTestTabfra(i).Width = PTestTab.ClientWidth
14610             PTestTabfra(i).Height = PTestTab.ClientHeight
14620             PTestTabfra(i).ZOrder (0)
14630             PTestTabfra(i).Visible = False
14640             PTestTabfra(i).Height = PTestTabFraHeight
14650         End If
14660         PTestTab.Tabs(i).Caption = CurTest
14670         TabCurTop = 100
14680         j = 1
14690         CountBool = 0
14700 If Debugging Then MsgBox 1
              'shlomi pinto::17-10-2004
14710         If Left(Sdg("NAME"), 1) = "P" Then
14720             Load ImageRes(PTestTab.Tabs.Count)
14730             With ImageRes(PTestTab.Tabs.Count)
14740                 .Visible = False
14750                 .Left = nte(Results("AMOUNT_USED"))
14760                 .Picture = LoadPicture("resource\down.ico")
14770             End With
14780         End If
14790         If UCase(nte(Results("RESULT_NAME"))) = UCase("DIAGNOSIS") _
                       And nte(Results("formatted_result")) = "" Then
14800                 frmDiagnosis.Visible = True
14810                 cmdOrangeDiagnosis.ZOrder 0
14820         End If
14830           If UCase(nte(Results("RESULT_NAME"))) = UCase("HISTOLOGY MICRO") Then
14840                 TamplatePFResInsex = 3
14850                  If TamplateExists(Sdg("sdg_id")) Then PTestTabfra(i).BackColor = &HFF0000
14860                 If nte(Results("formatted_result")) = "" Then
14870                     IsMicroTextSaved = False
                         
14880                 End If
14890             End If
14900         Do Until Results.EOF
14910             If UCase(nte(Results("RESULT_NAME"))) = UCase("HISTOLOGY MICRO") Then
14920                TamplatePFResInsex = 3
14930                 If TamplateExists(Sdg("sdg_id")) Then PTestTabfra(i).BackColor = &HFF0000
14940                 If nte(Results("formatted_result")) = "" Then
14950                     IsMicroTextSaved = False
                         
14960                 End If
14970             End If
14980 If Debugging Then MsgBox 2
14990             If Not dicResultIdToName.Exists(nte(Results("RESULT_ID"))) Then
15000                 Call dicResultIdToName.Add(nte(Results("RESULT_ID")), _
                                                 nte(Results("RESULT_NAME")))
15010             End If
15020 If Debugging Then MsgBox 3
15030             If CurTest <> Results("TEST_NAME") Then Exit Do
15040             PResultIndex = PResultIndex + 1
15050             Load PResultDesc(PResultIndex)
15060             With PResultDesc(PResultIndex)
15070                 Set .Container = PTestTabfra(i)
15080                 .Top = TabCurTop
15090                 .Left = IIf(Results("U_TYPE") = "B", 355, 100)
15100                 .Width = PTestTab.ClientWidth - 300
15110                 .Height = 255
15120                 .FontBold = IIf(Results("U_BOLD") = "T", True, False)
15130                 .Caption = nte(Results("U_LABEL"))
15140                 .Tag = nte(Results("U_TYPE"))
15150                 .DataField = nte(Results("U_TEMPLATE_NAME"))
15160                 .Visible = True
                      'shlomi pinto::17-10--2004
15170                 If nte(Results("U_FONT_COLOR")) <> "" Then
15180                     .ForeColor = nte(Results("U_FONT_COLOR"))
15190                 End If
15200             End With
15210 If Debugging Then MsgBox 4
15220             Load PResultLine(PResultIndex)
15230             With PResultLine(PResultIndex)
15240                 Set .Container = PTestTabfra(i)
15250                 .X1 = 50
15260                 .Y1 = TabCurTop + 290
15270                 .X2 = PTestTab.ClientWidth - 50
15280                 .Y2 = .Y1
15290                 .BorderColor = &H80000011
15300                 If Results("U_TYPE") <> "F" And Results("U_TYPE") <> "S" Then
15310                     .Visible = True
15320                 End If
15330             End With
15340 If Debugging Then MsgBox 5
15350             If Results("U_TYPE") = "B" Then
15360                PResultCheckIndex = PResultCheckIndex + 1
15370                 Load PResultCheck(PResultCheckIndex)
15380                 With PResultCheck(PResultCheckIndex)
15390                     Set .Container = PTestTabfra(i)
15400                     .Tag = Results("RESULT_ID")
15410                     If nte(Results("U_PRINT_FAX")) = "T" Then _
                              Call PrintFaxResult.Add(.Tag, "")
15420                     .Top = TabCurTop
15430                     TabCurTop = TabCurTop + 300
15440                     .Left = 100
15450                     .Width = 255
15460                     .Height = 255
15470                     If Results("FORMATTED_RESULT") = "True" Then .Value = 1
15480                     If Results("U_NEEDS_REVIEW") = "T" Then .Caption = "T"
15490                     .Visible = IIf(Results("U_VISIBLE") = "F", False, True)
15500                     PResultDesc(PResultIndex).Tag = PResultDesc(PResultIndex).Tag & PResultCheckIndex
15510 If Debugging Then MsgBox 6
15520                     If .Value = 1 Then
15530                         CountBool = CountBool + 1
15540                     End If
15550                     If VisibleResultTab.Exists(CStr(PTestTab.Tabs.Count)) = True Then
15560                         Call VisibleResultTab.Remove(CStr(PTestTab.Tabs.Count))
15570                     End If
15580                     Call VisibleResultTab.Add(CStr(PTestTab.Tabs.Count), CountBool)

15590                 End With
15600             ElseIf Results("U_TYPE") = "F" Then
15610 If Debugging Then MsgBox 7
15620                 PFreeTextResultIndex = PFreeTextResultIndex + 1
15630                 Load PFreeTextResult(PFreeTextResultIndex)
15640                 With PFreeTextResult(PFreeTextResultIndex)
15650                     Set .connection = Con
15660                     .InitContent = getInitStr

                          '-------------------------
                          ' shlomi pinto::23-09-2004
15670                     .FontName = "Arial"
15680                     .RightMargin = nInch * 6
                          '-------------------------
                  
15690                     .Lists = getListsNames
            
15700                     .Initialize
15710                     .Tag = Results("RESULT_ID")
                       
15720                     Set .Container = PTestTabfra(i)
15730                     .Top = TabCurTop
15740                     .Left = 100
15750                     PFreeTextResult(1).Visible = False
15760                     PTestTab.Height = PatientProps.Height
15770                     If nte(Results("U_HEIGHT")) <> "" Then h = nte(Results("U_HEIGHT"))
15780                     .Width = PTestTabfra(i).Width - 100
15790                     .Height = (PTestTab.Height - 480) * h / 100
15800                     TabCurTop = TabCurTop + PFreeTextResult(PFreeTextResultIndex).Height
15810                     .Visible = True
15820                     .locked = IIf(Results("U_READ_ONLY") = "F", False, True)
15830                     .Rtl = IIf(Results("U_RTL") = "F", False, True)
15840                     PResultDesc(PResultIndex).Tag = PResultDesc(PResultIndex).Tag & PFreeTextResultIndex
                          
                          'using backup from rtf_result_backup:
15850                     If nte(Results("STATUS")) <> "A" Then
                              
15860                         .ResultId = Results("RESULT_ID")
                              
15870                     End If
                          
15880                 End With
                      
15890             ElseIf Results("U_TYPE") = "S" Then

15900 If Debugging Then MsgBox 8
15910                 PSnomedIndex = PSnomedIndex + 1
15920                 Load SnomedCtrl(PSnomedIndex)
15930                 With SnomedCtrl(PSnomedIndex)
15940                     Set .connection = Con
15950                     .StatusReadWrite = SnomedCtrl(0).CReadWrite
15960                     .Initialize ("select original_result from lims_sys.result where " & _
                                       "result.result_id = " & Results("RESULT_ID"))
15970                     .Tag = Results("RESULT_ID")
15980                     Set .Container = PTestTabfra(i)
15990                     .Top = TabCurTop + 300
16000                     .Left = 100
16010                     If nte(Results("U_HEIGHT")) <> "" Then h = nte(Results("U_HEIGHT"))
16020                     .Width = PTestTabfra(i).Width - 150
16030                     h = 35
16040                     .Height = PTestTabfra(i).Height * h / 100
16050                     TabCurTop = SnomedCtrl(PSnomedIndex).Top + SnomedCtrl(PSnomedIndex).Height
16060                     .ShowCloseBtn False
16070                     .Visible = True
16080                     PResultDesc(PResultIndex).Tag = PResultDesc(PResultIndex).Tag & PSnomedIndex
16090                 End With
16100             ElseIf Results("U_TYPE") = "P" Then
16110                 PResultPhraseIndex = PResultPhraseIndex + 1
16120                 Load PResultPhrase(PResultPhraseIndex)
16130                 With PResultPhrase(PResultPhraseIndex)
16140                     Set .Container = PTestTabfra(i)
16150                     Set .connection = Con
16160                     .Tag = Results("RESULT_ID")
16170                     .Top = TabCurTop - 60
16180                     TabCurTop = TabCurTop + 380
                                              
16190                     If nte(Results("U_WIDTH")) <> "" Then w = nte(Results("U_WIDTH"))
                          
16200                     .Width = PTestTabfra(i).Width * w / 100
                          ' .Left = IIf(Results("U_RTL") = "T", 10, PTestTab.ClientWidth - .Width)
16210                      .Left = PTestTab.ClientWidth - .Width
      '                    .Width = 2255
      '                    .Height = 255
16220                     .InitContent = nte(Results("FORMATTED_RESULT"))
16230                     .PhraseName = nte(Results("U_PHRASE_LIST"))
16240                     .Rtl = IIf(Results("U_RTL") = "T", True, False)
16250                     .Initialize
16260                     .Visible = True
16270                     PResultDesc(PResultIndex).Tag = PResultDesc(PResultIndex).Tag & PResultPhraseIndex
16280                 End With
16290             Else ' Results("U_TYPE") = "T" ??

16300 If Debugging Then MsgBox 9
16310                 PResultTextIndex = PResultTextIndex + 1
                    
16320                 Load PResultText(PResultTextIndex)
16330                 With PResultText(PResultTextIndex)
16340                     Set .Container = PTestTabfra(i)
16350                     .Tag = Results("RESULT_ID")
16360                     .Top = TabCurTop
16370                     TabCurTop = TabCurTop + 300
16380                     .Left = PTestTab.ClientWidth - 2300
16390                     .Width = 2255
16400                     .Height = 255
16410                     .Text = nte(Results("FORMATTED_RESULT"))
16420                     .Visible = True
16430                     PResultDesc(PResultIndex).Tag = PResultDesc(PResultIndex).Tag & PResultTextIndex
16440                 End With
          
16450             End If
          
16460 If Debugging Then MsgBox 1000 + j
16470             j = j + 1
16480             Results.MoveNext
16490         Loop

16500         i = i + 1
16510         If MaxTop < TabCurTop Then MaxTop = TabCurTop
16520 If Debugging Then MsgBox 1000 + j + 100 * i
16530     Loop
          
16540     If PFreeTextResultIndex = 1 Then
16550         PTestTab.Height = MaxTop + 600
16560     End If
16570     For i = 1 To PTestTabfra.Count
16580         PTestTabfra(i).Height = PTestTab.Height - 480
16590     Next i
          'free text result
16600 If Debugging Then MsgBox 20
16610     If Not Results.EOF Then
16620 If Debugging Then MsgBox 21
16630         If Results("PRIORITY") = 10 And PFreeTextResultIndex = 1 Then
16640 If Debugging Then MsgBox 22
16650             Set PFreeTextResult(1).connection = Con
16660             PFreeTextResult(1).InitContent = getInitStr

                  '-------------------------
                  ' shlomi pinto::23-09-2004
16670             PFreeTextResult(1).FontName = "Arial"
16680             PFreeTextResult(1).RightMargin = nInch * 6
                  '-------------------------

16690             PFreeTextResult(1).Initialize
16700             PFreeTextResult(1).Tag = Results("RESULT_ID")
16710             PFreeTextResult(1).Visible = True
16720             PFreeTextResult(1).Top = PTestTab.Height + 100
16730             PFreeTextResult(1).Width = PTestTab.Width
16740             If PapsResultsfra.Height - PFreeTextResult(1).Top > 0 Then
16750                 PFreeTextResult(1).Height = PapsResultsfra.Height - PFreeTextResult(1).Top
16760             End If
16770         End If
16780     End If
16790 If Debugging Then MsgBox 22
16800     Call SummaryRefresh
16810 If Debugging Then MsgBox 23
16820     Set PTestTab.SelectedItem = PTestTab.Tabs(1)
16830 If Debugging Then MsgBox 24
16840     PTestTabfra(PTestTab.SelectedItem.Index).Visible = True
16850     Call PTestTab_Click
16860 If Debugging Then MsgBox 25
16870     Exit Sub
ErrHnd:
16880     Call ErrHandler("LoadResults")
End Sub

Private Sub LoadHistory()
16890     On Error GoTo ErrHnd
          Dim li As ListItem
          Dim i As Integer
          Dim Snomed As String
          Dim InLoadHistory As Boolean
          Dim FirstMalignant As Boolean

      '    InLoadHistory = True
16900     FirstMalignant = False
16910     HistoryList.ListItems.Clear '
16920     HistoryGrid.Clear
16930     HistoryGrid.Rows = 2
16940     Set SnomedCtrl(0).connection = Con

16950     Set History = Con.Execute("select sdg.name, sdg.created_on, sdg.status, sdg.sdg_id " & _
              "from lims_sys.sdg, lims_sys.sdg_user " & _
              "where sdg.sdg_id = sdg_user.sdg_id " & _
              "and sdg_user.u_patient = " & Sdg("U_PATIENT") & " " & _
              "and sdg.sdg_id <> " & Sdg("SDG_ID") & " and rownum < 100 order by sdg.created_on desc")

16960     Set imgHistory.Picture = LoadPicture("Resource\Led On.ico")
16970     imgHistory.Visible = IIf(History.EOF, False, True)
16980     HistoryGrid.row = 0
16990     HistoryGrid.col = 0
17000     HistoryGrid.Text = "Request"
17010     HistoryGrid.col = 1
17020     HistoryGrid.Text = "Date"
17030     HistoryGrid.col = 2
17040     HistoryGrid.Text = "Snomed"

17050     i = 1
17060     Do Until History.EOF
      '        Set li = HistoryList.ListItems.Add(, , nte(History("NAME")), , History("STATUS") & " 1") '
      '        li.SubItems(1) = Format(nte(History("CREATED_ON")), "dd/mm/yy") '
      '        li.SubItems(2) = nte(History("SNOMED")) '
      '        Snomed = SnomedCtrl(0).getFirstSnomed("select u_snomed from lims_sys.sdg_user where sdg_id = " & nte(History("SDG_ID")))
17070         If History("STATUS") = "C" Or History("STATUS") = "A" Then
17080             Snomed = SnomedCtrl(0).getFirstSnomed("select nvl(result.ORIGINAL_RESULT,'1') " & _
                          "from lims_sys.result, lims_sys.test, lims_sys.aliquot, lims_sys.sample " & _
                          "where result.test_id = test.test_id and " & _
                          "test.aliquot_id = aliquot.aliquot_id and " & _
                          "aliquot.sample_id = sample.sample_id and " & _
                          "result.name = 'Snomed T' and " & _
                          "sample.sdg_id = " & nte(History("SDG_ID")))
17090         Else
17100             Snomed = ""
17110         End If
17120         If i > 1 Then
17130             HistoryGrid.AddItem (nte(History("NAME")) & Chr(9) & Format(nte(History("CREATED_ON")), "dd/mm/yy") & Chr(9) & Snomed)
17140         Else
17150             HistoryGrid.row = 1
17160             HistoryGrid.col = 0
17170             HistoryGrid.Text = nte(History("NAME"))
17180             HistoryGrid.col = 1
17190             HistoryGrid.Text = Format(nte(History("CREATED_ON")), "dd/mm/yy")
17200             HistoryGrid.col = 2
17210             HistoryGrid.Text = Snomed
17220         End If

17230         HistoryGrid.row = i
17240         HistoryGrid.col = 0

17250         HistoryGrid.CellBackColor = vbWhite
17260         If CheckIsMalignant(nte(History("SDG_ID"))) Then
17270             If Not FirstMalignant Then
17280                 FirstMalignant = True
17290                 Set imgHistory.Picture = LoadPicture("Resource\Led Off.ico")
17300             End If
17310             HistoryGrid.CellBackColor = MALIGNANT_REQUEST
17320         End If

17330         HistoryGrid.CellAlignment = flexAlignRightCenter
17340         picHistory.Picture = HistoryImageList.ListImages.Item(History("STATUS") & " 1").Picture
17350         Set HistoryGrid.CellPicture = picHistory.Image
17360         History.MoveNext
              
17370         i = i + 1
17380     Loop
17390     History.Close
17400     SnomedCtrl(0).Terminate
17410     InLoadHistory = False
17420     Exit Sub
ErrHnd:
17430     Call ErrHandler("LoadHistory")
End Sub

Private Function CheckIsMalignant(SdgId As String) As Boolean
17440     On Error GoTo ErrEnd
          Dim strSQL As String
          Dim IsMalignant As String
          Dim MalignantRs As ADODB.Recordset

17450     CheckIsMalignant = False
17460     strSQL = "select lims.is_malignant('" & SdgId & "') " & _
                   "from lims_sys.sdg " & _
                   "where sdg_id = '" & SdgId & "'"
17470     Set MalignantRs = Con.Execute(strSQL)
17480     If Not MalignantRs.EOF Then
17490         IsMalignant = Trim(nte(MalignantRs(0)))
17500         If IsMalignant = "T" Then
17510             CheckIsMalignant = True
17520         End If
17530     End If
17540     Exit Function

ErrEnd:
17550     MsgBox "CheckIsMalignant... " & vbCrLf & _
                  Err.Description
End Function

'Private Function nte(e As Variant) As Variant
'    On Error GoTo ErrHnd
'    nte = IIf(IsNull(e), "", e)
'    Exit Function
'ErrHnd:
'    Call ErrHandler("nte")
'End Function

Private Function nte(e As Variant) As String
17560     On Error GoTo ErrHnd
          
17570     nte = IIf(IsNull(e), "", e)
          
17580     Exit Function
ErrHnd:
17590     Call ErrHandler("nte")
End Function


Private Function ntz(e As Variant) As Variant
17600     ntz = IIf(IsNull(e), 0, e)
End Function


Private Sub HistoryList_DblClick()
17610     On Error GoTo ErrHnd
          Dim OldBarcodeField As String
          
17620     If HistoryList.ListItems.Count = 0 Then Exit Sub
17630     SdgName.Text = HistoryList.SelectedItem.Text
17640     OldBarcodeField = BarcodeField
17650     BarcodeField = "NAME"
17660     Call SdgName_KeyDown(vbKeyReturn, 0)
17670     Call SdgName_KeyUp(vbKeyReturn, 0)
17680     BarcodeField = OldBarcodeField
17690     Exit Sub
ErrHnd:
17700     Call ErrHandler("HistoryList_DblClick")
End Sub


Private Sub SnomedCtrl_CloseClick(Index As Integer)
17710     On Error GoTo ErrHnd
17720     If Index <> 0 Then Exit Sub
17730     SnomedCtrl(Index).Visible = False
17740     Exit Sub
ErrHnd:
17750     Call ErrHandler("SnomedCtrl_CloseClick")
End Sub


Private Sub SnomedCtrl_GotFocus(Index As Integer)
17760     On Error GoTo ErrHnd
17770     If Index <> 0 Then Exit Sub
17780     SnomedCtrl(Index).ZOrder ZOrderConstants.vbBringToFront
17790     Exit Sub
ErrHnd:
17800     Call ErrHandler("SnomedCtrl_GotFocus")
End Sub

Private Sub SnomedCtrl_LostFocus(Index As Integer)
17810     On Error GoTo ErrHnd
17820     If Index <> 0 Then Exit Sub
17830     SnomedCtrl(Index).Terminate
17840     SnomedCtrl(Index).Visible = False
17850     Exit Sub
ErrHnd:
17860     Call ErrHandler("SnomedCtrl_LostFocus")
End Sub

Private Sub SummaryButton_Click()
17870     On Error GoTo ErrHnd
17880     If SummaryButton.Caption = "Summary" Then
17890         SummaryButton.Caption = "Entry"
17900         PSummaryfra.Height = PTestTab.Height
17910         PSummaryfra.Top = PTestTab.Top
17920         PSummaryfra.Width = PTestTab.Width
17930         PSummaryText.Height = PSummaryfra.Height - 400
17940         PSummaryText.Width = PSummaryfra.Width - 250
17950         PSummaryfra.Visible = True
17960         PSummaryfra.ZOrder (0)
17970         Call SummaryRefresh
17980     Else
17990         SummaryButton.Caption = "Summary"
18000         PSummaryfra.Visible = False
18010     End If
18020     Exit Sub
ErrHnd:
18030     Call ErrHandler("SummaryButton_Click")
End Sub

Private Sub SummaryRefresh()
18040     On Error GoTo ErrHnd
18050     PSummaryText.Text = GetSummary
          
18060     Exit Sub
ErrHnd:
18070     Call ErrHandler("SummaryRefresh")
End Sub

Private Sub RefreshWindow()
18080     On Error GoTo ErrHnd
          
18090     btnPrintFax.Enabled = False
          
18100     If Sdg.EOF Then Exit Sub
          Dim OldBarcodeField As String
18110     SdgName.Text = Sdg("NAME")
18120     OldBarcodeField = BarcodeField
18130     BarcodeField = "NAME"
18140     Call LoadRecordsets
18150     Call LoadProps
18160     If Sdg.EOF Then Exit Sub
18170     Set SdgStatusImage.Picture = LoadPicture("Resource\sdg" & Sdg("STATUS") & ".ico")
      '    Call SdgName_KeyDown(vbKeyReturn, 0)
      '    Call SdgName_KeyUp(vbKeyReturn, 0)
18180     BarcodeField = OldBarcodeField
18190     SdgName.Text = ""
18200     CmdResponseLetter.Enabled = False
18210     Call zLang.English
18220     SdgName.Alignment = vbLeftJustify
18230     SdgName.RightToLeft = False
18240     Call SdgName.SetFocus
18250     Exit Sub
ErrHnd:
18260     Call ErrHandler("RefreshWindow")
End Sub

Private Sub btnPrint_Click()
18270     On Error GoTo ErrHnd
18280     If Sdg.State = adStateClosed Then
18290         MsgBox "Load a request for printing"
18300         Exit Sub
18310     End If
18320     Call TriggerSdgEvent("Print Request Summarize", nte(Sdg("sdg_id")))
18330     Call SdgName.SetFocus
18340     Exit Sub
ErrHnd:
18350     Call ErrHandler("btnPrint_Click")
End Sub

Private Sub TriggerSdgEvent(EventName As String, strSdgId As String)
18360     On Error GoTo ErrHnd
          Dim doc As New DOMDocument
          Dim res As New DOMDocument
          Dim xmlLogin As IXMLDOMElement
          Dim xmlSdg As IXMLDOMElement
          Dim e As IXMLDOMElement
          Dim element As IXMLDOMElement
          Dim FileName As String

18370     Set e = doc.createElement("lims-request")
18380     Call doc.appendChild(e)
18390     Set xmlLogin = doc.createElement("login-request")
18400     Call e.appendChild(xmlLogin)
18410     Set xmlSdg = doc.createElement("SDG")
18420     Call xmlLogin.appendChild(xmlSdg)
18430     Set element = doc.createElement("find-by-id")
18440     element.Text = strSdgId 'Sdg("SDG_ID")
18450     Call xmlSdg.appendChild(element)
18460     Set element = doc.createElement("fire-event")
18470     element.Text = EventName
18480     Call xmlSdg.appendChild(element)

      '    doc.Save ("auth.xml")

      '    If Trim(WorkFolder) <> "" Then
      '        FileName = "C:\ResultEntry_" & Trim(strSdgId) & "_" & EventName & "_DOC3"
      '        Call xmlManager.SaveXmlFile(doc, FileName)
      '    End If
18490 doc.Save ("c:\1.xml")
18500     Call ProcessXML.ProcessXMLWithResponse(doc, res)
18510 res.Save ("c:\2.xml")
          'res xml file was not saved befor

      '    If Trim(WorkFolder) <> "" Then
      '        FileName = "C:\ResultEntry_" & Trim(strSdgId) & "_" & EventName & "_RES3"
      '        Call xmlManager.SaveXmlFile(res, FileName)
      '    End If

18520     Exit Sub
ErrHnd:
18530     Call ErrHandler("TriggerSdgEvent")
End Sub
Private Function getInitStr() As String
18540     On Error GoTo ErrHnd
          Dim InitStr As String
          Dim RtfResult As New ADODB.Recordset
18550     If Results("STATUS") = "V" Then
18560         InitStr = nte(Results("U_FREE_TEXT_TEMPLATE"))
18570     Else 'If Results("STATUS") = "C" Then
              'InitStr = nte(Results("FORMATTED_RESULT"))
18580         Call RtfResult.Open("select rtf_text from lims_sys.rtf_result where rtf_result_id = " & Results("RESULT_ID"), Con, adOpenStatic, adLockOptimistic)
18590         If Not RtfResult.EOF Then
18600             InitStr = ReadClob(RtfResult("RTF_TEXT"))
18610         End If
18620         RtfResult.Close
18630     End If
18640     InitStr = Replace(InitStr, "&SdgId&", Sdg("SDG_ID"))
18650     InitStr = Replace(InitStr, "&ResultId&", Results("RESULT_ID"))
18660     InitStr = Replace(InitStr, "&OperatorId&", NtlsUser.GetOperatorId)
18670     InitStr = Replace(InitStr, "&RoleId&", NtlsUser.GetRoleId)
18680     getInitStr = InitStr
18690     Exit Function
ErrHnd:
18700     Call ErrHandler("getInitStr")
End Function

Private Function getListsNames() As String
18710     On Error GoTo ErrHnd
          Dim ListsNames As String
18720     ListsNames = nte(Results("U_PHRASE_LIST"))
18730     ListsNames = Replace(ListsNames, "&SdgId&", Sdg("SDG_ID"))
18740     ListsNames = Replace(ListsNames, "&ResultId&", Results("RESULT_ID"))
18750     ListsNames = Replace(ListsNames, "&OperatorId&", NtlsUser.GetOperatorId)
18760     ListsNames = Replace(ListsNames, "&RoleId&", NtlsUser.GetRoleId)
18770     getListsNames = ListsNames
18780     Exit Function
ErrHnd:
18790     Call ErrHandler("getListsNames")
End Function

Private Sub PapAuthorise()
18800     On Error GoTo ErrHnd
          Dim rst As ADODB.Recordset

18810     If Not InspectionLog.EOF Then
18820         MsgBox "This request already been signed by " & NtlsUser.GetOperatorName & " and therefore cannot be authorise"
18830         Exit Sub
18840     End If

18850     If (UCase(Role("NAME")) = UCase("cytoscreener")) And _
              (Sdg("STATUS") = "C" Or Sdg("STATUS") = "V" Or Sdg("STATUS") = "P") Then
18860         SaveResults
18870         If Not AssignPapInspection Then Exit Sub
18880         AuthoriseResults ("A")
18890         InsertNote
18900         Exit Sub
18910     End If

18920     If (UCase(Role("NAME")) = UCase("PAP Inspector")) And _
              (Sdg("STATUS") = "C" Or Sdg("STATUS") = "V" Or Sdg("STATUS") = "P") Or _
              (Sdg("STATUS") = "I") Then
18930         SaveResults
18940         If Not AssignPapInspection Then Exit Sub
18950         AuthoriseResults ("A")
18960         InsertNote
18970         Exit Sub
18980     End If

18990     If UCase(Role("NAME")) = UCase("doctor") Then
19000         Set rst = Con.Execute("select instr(old_status,'I') from lims_sys.sdg " & _
                  "where sdg_id = " & Sdg("SDG_ID"))
19010         If (Sdg("STATUS") = "A" Or Sdg("STATUS") = "R") Then
19020             InsertIntoInspectionLog
      '        ElseIf (Sdg("STATUS") = "I") Or CInt(rst(0).Value) > 0 Then
      '            SaveResults
      '            AuthoriseResults ("A")
19030         Else
19040             SaveResults
19050             If Not AssignPapInspection Then Exit Sub
19060             AuthoriseResults ("A")
19070         End If
19080         InsertNote
19090         Exit Sub
19100     End If

19110     MsgBox "Only Doctor or Cytoscreener or Pap Inspector Can Authorise"
19120     Exit Sub
ErrHnd:
19130     Call ErrHandler("PapAuthorise")
End Sub

Private Sub CyHyAuthorise()
19140     On Error GoTo ErrHnd
      ' TODO: if the sdg is cyto and the role is "super cyto" he can authorize
19150     If UCase(Role("NAME")) <> UCase("doctor") Then
19160         MsgBox "Only Doctor Can Authorise"
19170         Exit Sub
19180     End If
          

19190     If InspectionLog.EOF And Sdg("STATUS") = "I" Then
19200         SaveResults
19210         AuthoriseResults ("A")
19220         Exit Sub
19230     End If
          
19240     If Sdg("STATUS") = "A" Or Sdg("STATUS") = "R" Then
19250         InsertIntoInspectionLog
19260         Exit Sub
19270     End If
19280    MsgBox 223
19290     If Sdg("STATUS") = "C" Or Sdg("STATUS") = "V" Or Sdg("STATUS") = "P" Then
19300            MsgBox 224
19310         SaveResults
19320            MsgBox 225
      ' see remarks (TODO) in this function
19330         AssignInspection
19340            MsgBox 226
19350         AuthoriseResults ("A")
19360            MsgBox 227
19370         Exit Sub
19380     End If
19390     Exit Sub
ErrHnd:
19400     Call ErrHandler("CyHyAuthorise")
End Sub

Private Sub InsertIntoInspectionLog()
19410     On Error GoTo ErrHnd
19420     Call Con.Execute("insert into lims_sys.inspection_log " & _
          "(inspection_log_id, table_name, table_key, inspection_type, " & _
          "role_id, operator_id, order_number, inspection_date) " & _
          "values (lims.sq_inspection_log.nextval, 'SDG', " & Sdg("SDG_ID") & ", " & _
          "'A', " & NtlsUser.GetRoleId & ", " & NtlsUser.GetOperatorId & ", " & _
          "(select count(1) from lims_sys.inspection_log where table_name = 'SDG' and " & _
          "table_key = " & Sdg("SDG_ID") & ") + 1, SYSDATE)")
19430     Exit Sub
ErrHnd:
19440     Call ErrHandler("InsertIntoInspectionLog")
End Sub

Private Sub AssignInspection()
19450     On Error GoTo ErrHnd
          Dim rand As Double
          Dim QCParameter As Integer
          Dim strQC As String
          Dim IsQC As Boolean
          Dim fqc As FrmQC

      '    If MandatoryExists Then
      '        ChangeStatus
      '        Exit Sub
      '    End If

      ' TODO: if the role is "super cyto" and the sdg is cyto change the
      'inspection plan and don't do QC

19460     strQC = Right(Sdg("EXTERNAL_REFERENCE"), 1)
19470     Select Case strQC
          Case "C"
19480         QCParameter = CQCParameter
19490     Case "B"
19500         QCParameter = HQCParameter
19510     End Select
19520     Randomize
19530     IsQC = Rnd < QCParameter / CDbl(100)
          'MsgBox "rand = " & rand & " inspect = " & Inspect & " QCParameter = " & QCParameter & " calc = " & QCParameter / CDbl(100)
19540     If IsQC Or Inspect Then
19550         Call Con.Execute("update lims_sys.sdg set inspection_plan_id = " & _
                      "(select inspection_plan_id from lims_sys.inspection_plan " & _
                      "where inspection_plan.name = '" & strQC & "QC') " & _
                      "where sdg_id = " & Sdg("SDG_ID"))
19560     End If
19570     If Inspect Then
19580         MsgBox "This request should be rechecked by a physician."
19590     End If
19600     If IsQC Then

      '            MsgBox "This request should be rechecked for QC."

19610         Set fqc = New FrmQC
19620         Call fqc.Show(vbModal)
19630         If fqc.ConfirmSucceeded Then
19640             Call Con.Execute("update lims_sys.sdg_user set u_qc = '0' " & _
                      "where sdg_id = " & Sdg("SDG_ID"))
19650         End If
19660         fqc.ConfirmSucceeded = False
19670         Set fqc = Nothing

19680     End If
19690     Exit Sub
ErrHnd:
19700     Call ErrHandler("AssignInspection")
End Sub

Private Function IsConsult() As Boolean
19710     On Error GoTo ErrHnd
      '    Dim ConsultResults As ADODB.Recordset
      '
      '    IsConsult = False
      '    Set ConsultResults = con.Execute( _
      '        "select r.original_result " & _
      '        "from lims_sys.result r, " & _
      '             "lims_sys.test t, " & _
      '             "lims_sys.aliquot a, " & _
      '             "lims_sys.sample s " & _
      '        "where t.aliquot_id = a.aliquot_id " & _
      '             "and a.sample_id = s.sample_id " & _
      '             "and r.test_id = t.test_id " & _
      '             "and s.sdg_id = " & Sdg("SDG_ID") & " " & _
      '             "and r.name in ('rem_consult','rem_consult_cito' )")
      '    While Not ConsultResults.EOF
      '        If nte(ConsultResults("ORIGINAL_RESULT")) = "T" Then
      '            IsConsult = True
      '        End If
      '        ConsultResults.MoveNext
      '    Wend
      '    ConsultResults.Close
19720     IsConsult = IIf(chkConsult.Value = 0, False, True)
19730     Exit Function

ErrHnd:
19740     Call ErrHandler("IsConsult")
End Function

Private Function Mandatory() As Boolean
19750     On Error GoTo ErrHnd
          Dim MandatoryResults As ADODB.Recordset
          Dim sql As String
19760     Mandatory = False
19770     MandatoryExists = False
      '    Set MandatoryResults = con.Execute("select result.original_result," & _
              "u_result_desc_user.u_mandatory_value,u_result_desc_user.u_label " & _
              "from lims_sys.result, lims_sys.u_result_desc_user, lims_sys.result_template, lims_sys.sample " & _
              ",lims_sys.aliquot, lims_sys.test " & _
              "where result.result_template_id = result_template.result_template_id " & _
              "and result_template.name = u_result_desc_user.u_template_name " & _
              "and test.aliquot_id = aliquot.aliquot_id " & _
              "and aliquot.sample_id = sample.sample_id " & _
              "and result.test_id = test.test_id " & _
              "and sample.sdg_id = " & Sdg("SDG_ID") & " " & _
              "and u_result_desc_user.u_mandatory = 'T' " & _
              "and u_result_desc_user.u_mandatory_value = result.original_result ")
          
19780     sql = " select result.original_result,"
19790     sql = sql & " u_result_desc_user.u_mandatory_value,u_result_desc_user.u_label "
19800     sql = sql & " from lims_sys.result, lims_sys.u_result_desc_user, lims_sys.result_template, lims_sys.sample"
19810     sql = sql & " ,lims_sys.aliquot, lims_sys.test "
19820     sql = sql & " where result.result_template_id = result_template.result_template_id "
19830     sql = sql & " and result_template.name = u_result_desc_user.u_template_name "
19840     sql = sql & " and test.aliquot_id = aliquot.aliquot_id "
19850     sql = sql & " and aliquot.sample_id = sample.sample_id "
19860     sql = sql & " and result.test_id = test.test_id "
19870     sql = sql & " and sample.sdg_id = '" & Sdg("SDG_ID") & "' "
19880     sql = sql & " and result.status <> 'X' "
19890     sql = sql & " and u_result_desc_user.u_mandatory = 'T' "
19900     sql = sql & " and "
19910     sql = sql & " ("
19920     sql = sql & "   ("
19930     sql = sql & "     u_result_desc_user.u_mandatory_value is null"
19940     sql = sql & "     and "
19950     sql = sql & "     ("
19960     sql = sql & "       result.original_result is null or"
19970     sql = sql & "       result.original_result = 'F'"
19980     sql = sql & "     )"
19990     sql = sql & "   )"
20000     sql = sql & "   or  "
20010     sql = sql & "   ("
20020     sql = sql & "     u_result_desc_user.u_mandatory_value is  not null"
20030     sql = sql & "     and "
20040     sql = sql & "     ("
20050     sql = sql & "       result.original_result <> u_result_desc_user.u_mandatory_value"
20060     sql = sql & "     )"
20070     sql = sql & "   )"
20080     sql = sql & " )"
          
20090     Set MandatoryResults = Con.Execute(sql)
          
20100     If MandatoryResults.EOF Then
20110         MandatoryResults.Close
20120         Exit Function
20130     End If
          
20140     frmMsgBox.ShowMsg "Mandatory Result Is Missing : " & nte(MandatoryResults("U_LABEL"))
20150     Mandatory = True
20160     MandatoryExists = True
          
      '    If nte(MandatoryResults("U_MANDATORY_VALUE")) = "" Then
      '        If nte(MandatoryResults("ORIGINAL_RESULT")) = "F" Or nte(MandatoryResults("ORIGINAL_RESULT")) = "" Then
      '            frmMsgBox.ShowMsg "Mandatory Result Is Missing : " & nte(MandatoryResults("U_LABEL"))
      '            Mandatory = True
      '        End If
      '    Else
      '        If nte(MandatoryResults("ORIGINAL_RESULT")) <> nte(MandatoryResults("U_MANDATORY_VALUE")) Then
      '            frmMsgBox.ShowMsg "Mandatory Result Is Missing : " & nte(MandatoryResults("U_LABEL"))
      '            Mandatory = True
      '        End If
      '    End If
20170     MandatoryResults.Close
20180     Exit Function
ErrHnd:
20190     Call ErrHandler("Mandatory")
End Function
Private Sub ChangeStatus()
20200     On Error GoTo ErrHnd
          Dim SdgStatus As ADODB.Recordset
20210     Set SdgStatus = Con.Execute("select status from lims_sys.sdg, lims_sys.sdg_user where " & _
              "sdg.sdg_id = sdg_user.sdg_id and sdg.sdg_id = " & Sdg("SDG_ID"))
20220     Set SdgStatusImage.Picture = LoadPicture("Resource\sdg" & SdgStatus("STATUS") & ".ico")
20230     SdgStatus.Close
20240     Exit Sub
ErrHnd:
20250     Call ErrHandler("ChangeStatus")
End Sub

Private Sub UserControl_Terminate()

20260     On Error GoTo ErrHnd
          Dim i As Integer
20270     For i = 0 To SnomedCtrl.Count - 1
20280         SnomedCtrl(i).Terminate
20290     Next i
20300     If strHandle <> "" Then Call ReleaseHandle
          'ashi 06.11.2014 Close Sessions
          
         ' RunFromWindow = True
          
20310     If Not Con Is Nothing Then
20320         If RunFromWindow And Not Con.State = adStateClosed Then
20330              Con.Close
20340              Set Con = Nothing
20350         End If
              
20360     End If
         
              
           
20370     Exit Sub
ErrHnd:
20380     Call ErrHandler("Result_Entry_UserControl_Terminate")
End Sub

Private Sub UserControl_Initialize()
20390     RunFromWindow = False
End Sub

Private Sub UpdateRtfResult(RtfResultId As String, FreeTextCtrl As FreeTextTemplateCtrl)
20400     On Error GoTo ErrHnd
          Dim RtfResult As ADODB.Recordset
          Dim lStream As ADODB.Stream
          
20410     Set RtfResult = Con.Execute("select rtf_result_id from lims_sys.rtf_result " & _
              "where rtf_result_id = " & RtfResultId)
20420     If RtfResult.EOF Then
20430         Call Con.Execute("insert into lims_sys.rtf_result (rtf_result_id) values (" & RtfResultId & ")")
20440     End If
20450     RtfResult.Close
20460     Set RtfResult = New ADODB.Recordset
20470     Call RtfResult.Open("select rtf_text from lims_sys.rtf_result where rtf_result_id = " & RtfResultId, Con, adOpenStatic, adLockOptimistic)
          
          'Call RtfResult("RTF_TEXT").AppendChunk(FreeTextCtrl.GetRTFContent)
       
20480     Set lStream = New ADODB.Stream
20490     lStream.Charset = csHeBrEw
20500     lStream.Type = adTypeText
20510     lStream.Open

20520     lStream.WriteText FreeTextCtrl.GetRTFContent 'TxtFreeText.GetRTFContent
20530     lStream.Position = 0
20540     RtfResult("RTF_TEXT") = lStream.ReadText
20550     lStream.Close
20560     Set lStream = Nothing
          
20570     RtfResult.Update
20580     RtfResult.Close
20590     Set RtfResult = Nothing

20600     Exit Sub
ErrHnd:
20610     Call ErrHandler("UpdateRtfResult")
End Sub

Private Function ReadClob(pFld As ADODB.Field) As String
20620     On Error GoTo ErrHnd
          
          ' Function read a the clob data from the field
          '   using the stream object of the ADODB library
          
          Dim lStream As ADODB.Stream
          Dim lstData As String
          
20630     Set lStream = New ADODB.Stream
20640     lStream.Charset = csHeBrEw
20650     lStream.Type = adTypeText
20660     lStream.Open
          
20670     lStream.WriteText nte(pFld.Value)
20680     lStream.Position = 0
20690     lstData = lStream.ReadText

20700     lStream.Close
20710     Set lStream = Nothing
          
20720     ReadClob = lstData
          
20730     Exit Function
ErrHnd:
20740     Call ErrHandler("ReadClob")
End Function


Private Sub CheckReportColorSlides(SdgId As Double, ResultName As String)
20750     On Error GoTo ErrHnd
          Dim ResultRec As ADODB.Recordset
          Dim strSQL As String

20760     strSQL = "select aliquot.name from lims_sys.result, " & _
                          "lims_sys.test, lims_sys.aliquot, lims_sys.sample " & _
                          "where result.name = '" & ResultName & "' And " & _
                          "result.status = 'V' and " & _
                          "sample.sdg_id = " & SdgId & " and " & _
                          "aliquot.sample_id = sample.sample_id and " & _
                          "test.aliquot_id = aliquot.aliquot_id and " & _
                          "substr(aliquot.name,1,1)<>'P' and " & _
                          "result.test_id = test.test_id"

20770     Set ResultRec = Con.Execute(strSQL)
20780     While Not ResultRec.EOF
20790         MsgBox "The slide: " & ResultRec(0) & ", was not reported !", , "Nautilus - Result Entry"
20800         ResultRec.MoveNext
20810     Wend
20820     ResultRec.Close
20830     Exit Sub
ErrHnd:
20840     Call ErrHandler("CheckReportColorSlides")
End Sub

Private Sub ErrHandler(pstSub As String)
          
          Dim lstErrMsg As String
          
20850     lstErrMsg = "SUB: " & pstSub & vbCrLf & _
                  "Error On Line: " & Erl & vbCrLf & _
                  "DESCRIPTION:" & vbCrLf & Err.Description
          
20860     MsgBox lstErrMsg, vbOKOnly + vbCritical, "ERROR"
          
20870     If RunFromWindow Then
20880         RaiseEvent CloseClicked
20890     Else
20900         NtlsSite.CloseWindow
20910     End If
          
20920     Call ReleaseApplicationMutex

End Sub

Public Sub InitiateSdg(sn As String)
20930     SdgName.Text = sn
20940     Call SdgName_KeyDown(vbKeyReturn, 0)
20950     Call SdgName_KeyUp(vbKeyReturn, 0)
End Sub

Private Sub InsertNote()
          Dim DateFormatSyntax As String
          Dim MXRank As ADODB.Recordset
          Dim MNRank As ADODB.Recordset
          Dim MinRank As Integer
          Dim MaxRank As Integer
          Dim qc As Integer
20960     MinRank = 0
20970     MaxRank = 0
20980     qc = 0
20990     QcRank = 0
21000     On Error GoTo ErrHnd
21010     Call Con.Execute("insert into lims_sys.sdg_note " & _
          "(note_entry_id, sdg_id, entry_date, entry_type, " & _
          "session_id, subject, description) " & _
          "values (lims.sq_note_entry.nextval, " & Sdg("SDG_ID") & ", SYSDATE" & _
          ", 'T'" & ", lims.lims_env.session_id, 'Summary', '" & _
          GetSummary & vbCrLf & Trim(PFreeTextResult(1).GetContent) & "')")
          
21020     Call Con.Execute("insert into lims_sys.sdg_note " & _
          "(note_entry_id, sdg_id, entry_date, entry_type, " & _
          "session_id, subject, description) " & _
          "values (lims.sq_note_entry.nextval, " & Sdg("SDG_ID") & ", SYSDATE" & _
          ", 'T'" & ", lims.lims_env.session_id, 'RANK', '" & GetRankSum & "')")
          
21030     Set MXRank = Con.Execute("select max_sn.description as max_rank " & _
              "from lims_sys.sdg_note max_sn " & _
              "Where max_sn.entry_date = " & _
              "(select max(sn1.entry_date) from lims_sys.sdg_note sn1 where " & _
              "max_sn.subject = sn1.subject and max_sn.sdg_id = sn1.sdg_id) " & _
              "and max_sn.subject='RANK' " & _
              "and max_sn.sdg_id=" & Sdg("SDG_ID"))

21040     Set MNRank = Con.Execute("select min_sn.description as min_rank " & _
              "from lims_sys.sdg_note min_sn " & _
              "Where min_sn.entry_date = " & _
              "(select min(sn1.entry_date) from lims_sys.sdg_note sn1 where " & _
              "min_sn.subject = sn1.subject and min_sn.sdg_id = sn1.sdg_id) " & _
              "and min_sn.subject='RANK' " & _
              "and min_sn.sdg_id=" & Sdg("SDG_ID"))
              
21050     If Not MXRank.EOF Then
21060         If nte(MXRank("MAX_RANK")) <> "" Then
21070             MaxRank = CInt(nte(MXRank("MAX_RANK")))
21080         End If
21090     End If
21100     MXRank.Close
21110     If Not MNRank.EOF Then
21120         If nte(MNRank("MIN_RANK")) <> "" Then
21130             MinRank = CInt(nte(MNRank("MIN_RANK")))
21140         End If
21150     End If
21160     MNRank.Close
          
21170     qc = MaxRank - MinRank
      '    QCtxt.Text = Abs(qc)
21180     QcRank = Abs(qc)
      '    chkQC.Value = IIf(ntz(Sdg("U_ISQC")) = "T", 1, 0)
21190     chkCon.Value = IIf(ntz(Sdg("U_ISCONSULT")) = "T", 1, 0)


          
21200     Exit Sub

ErrHnd:
21210     Call ErrHandler("InsertNote")
End Sub

Private Function GetSummary() As String
          Dim i
          Dim typ, Index
21220     On Error GoTo ErrHnd
21230     GetSummary = ""
21240     For i = 1 To PResultIndex
21250         typ = Mid(PResultDesc(i).Tag, 1, 1)
21260         Index = Val(Mid(PResultDesc(i).Tag, 2))
21270         If typ = "B" Then
21280             If PResultCheck(Index).Value = 1 Then
21290                 GetSummary = GetSummary & PResultDesc(i).Caption & vbCrLf
21300             End If
21310         ElseIf typ = "T" Then
21320             If PResultText(Index).Text <> "" Then
21330                 GetSummary = GetSummary & PResultDesc(i).Caption & ": " & _
                          PResultText(Index).Text & vbCrLf
21340             End If
21350         ElseIf typ = "P" Then
21360             If PResultPhrase(Index).Text <> "" Then
21370                 GetSummary = GetSummary & PResultDesc(i).Caption & ": " & _
                          PResultPhrase(Index).Text & vbCrLf
21380             End If
21390         End If
21400     Next i
21410     Exit Function
ErrHnd:
21420     Call ErrHandler("GetSummary")
End Function

Private Sub CalculateSnomed(SnomedCalculation As ADODB.Recordset, ResultName As String)
          Dim i
          Dim typ, Index
          Dim rValue As String
          
21430     On Error GoTo ErrHnd
              
21440     Set SnomedParser = SnomedCtrl(0).getParser
          
          'fixed not getting snomeds after "missing data" error
21450     If SnomedCalculation.RecordCount > 0 Then
21460         SnomedCalculation.MoveFirst
21470     End If
          
21480     Do Until SnomedCalculation.EOF
21490         SnomedParser.addPhrase nte(SnomedCalculation("DESCRIPTION")), _
                                     nte(SnomedCalculation("U_SNOMED_CODE"))
21500         SnomedCalculation.MoveNext
21510     Loop
21520     SnomedParser.CalculateSnomed
          
          
          'enter the new snomed in any case, even if calculation
          'gives us no snomed (05.06.2006 cancel of the IF statement):
          
      '    If SnomedParser.SnomedCodes <> "" Then
              
21530         For i = 1 To PResultIndex
21540             typ = Mid(PResultDesc(i).Tag, 1, 1)
21550             Index = Val(Mid(PResultDesc(i).Tag, 2))
21560             If typ = "T" And UCase(PResultDesc(i).DataField) = UCase(ResultName) Then
21570                 PResultText(Index).Text = SnomedParser.SnomedCodes
21580                 Exit Sub
21590             End If
21600         Next i

      '    End If
          
21610     Set SnomedParser = Nothing
21620     Exit Sub
ErrHnd:
21630     Call ErrHandler("CalculateSnomed")
          
End Sub


Private Sub CalculateSnomeds()

21640     On Error GoTo ErrHnd
          
21650      CalculateSnomed SnomedMCalculation, "Snomed M"
21660      CalculateSnomed SnomedTCalculation, "Snomed T"
           

21670     Exit Sub
ErrHnd:
21680     Call ErrHandler("CalculateSnomeds")

End Sub

Private Function AssignPapInspection() As Boolean
21690     On Error GoTo ErrHnd
          Dim rand As Double
          Dim QCParameter As Integer
          Dim IsQC As Boolean
          Dim IsPos As Boolean
          Dim fqc As FrmQC
          Dim phrase As ADODB.Recordset
          Dim rstPreviousInspectors As ADODB.Recordset
          Dim phraseEntryName As String
          Dim inspectionPlanName As String
          Dim inspection As ADODB.Recordset
          Dim inspectionPlanId As String
          Dim PreviousInspectors As String
          Dim strRole As String
          Dim strPos As String
          Dim strQC As String
          Dim papqcid As ADODB.Recordset
          Dim oldInspection As Long
          Dim newInspection As Long
          Dim qc As String
          Dim sql As String

21700     qc = "F"

21710     AssignPapInspection = False
          
21720     sql = "   SELECT DISTINCT (REPLACE (SUBSTR (r.NAME, 1, 1), 'P', 'I')"
21730     sql = sql & "                  ) AS role_letter_code,log.INSPECTION_DATE"
21740     sql = sql & "             FROM lims_sys.inspection_log LOG, lims_sys.lims_role r"
21750     sql = sql & "            WHERE LOG.table_name = 'SDG'"
21760     sql = sql & "              AND LOG.table_key = " & Sdg("SDG_ID")
21770     sql = sql & "              AND r.role_id = LOG.role_id"
21780     sql = sql & "           order by log.INSPECTION_DATE asc"
          
          'gets the letter C-cytoscreener I-Pap Inspector D-doctor
          
21790     Set rstPreviousInspectors = Con.Execute(sql)
21800     While Not rstPreviousInspectors.EOF
21810         PreviousInspectors = PreviousInspectors & nte(rstPreviousInspectors(0))
21820         rstPreviousInspectors.MoveNext
21830     Wend
         
21840     Select Case UCase(nte(Role("NAME")))
              Case UCase("doctor")
21850             strRole = "D"
21860         Case UCase("pap inspector")
21870             strRole = "I"
21880         Case UCase("cytoscreener")
21890             strRole = "C"
21900     End Select
          
21910     If CheckIsMalignant(Sdg("SDG_ID")) Or Inspect Then
21920         strPos = "Pos"
21930         IsPos = True
21940     Else
21950         strPos = "Neg"
21960         IsPos = False
21970     End If
           
21980     IsQC = False
          'for call 436 - A revision will not go through QC ( "And nte(Sdg("u_isqc")) = "" " )
21990     If PreviousInspectors = "" And strPos = "Neg" And Not IsConsult And nte(Sdg("u_isqc")) = "" Then
22000         Randomize
22010         IsQC = Rnd < PQCParameter / CDbl(100)
22020     End If
          

          'Pos & Con=T & QC=F & Prev= & Role=C
22030     phraseEntryName = strPos & " & Con=" & btc(IsConsult) & " & QC=" & btc(IsQC) & _
              " & Prev=" & PreviousInspectors & " & Role=" & strRole

22040     Set phrase = Con.Execute("select phrase_description, phrase_name from lims_sys.phrase_entry " & _
              "where phrase_id = (select phrase_id from lims_sys.phrase_header where " & _
              "name = 'Pap Inspection Params') " & _
              "and replace(upper(phrase_name),' ','') = replace(upper('" & phraseEntryName & "'),' ','')")

22050     oldInspection = nte(Sdg("INSPECTION_PLAN_ID"))
22060     If Not phrase.EOF Then
22070         inspectionPlanName = UCase(nte(phrase("PHRASE_DESCRIPTION")))
22080         Set inspection = Con.Execute("select inspection_plan_id from lims_sys.inspection_plan " & _
                              "where upper(inspection_plan.name)= '" & inspectionPlanName & "'")
22090         Call Con.Execute("update lims_sys.sdg set inspection_plan_id = " & _
                               inspection("inspection_plan_id") & _
                               "where sdg_id = " & Sdg("SDG_ID"))
              '----------------------------------------------------------------
              'hila ashi- call 1116- date 20.6.13- insert a new sdg_log recored each time inspection plan update
              'application code = "RE.AssignPapInspection"- new entry in phrase "sdg-log names"
              Dim sdg_log_description   As String
22100         sdg_log_description = "oldInspection " & oldInspection & ", new inspectionPlanName " & inspection("inspection_plan_id") & "  ,inspection plan phraseEntryName "
22110         sdg_log_description = sdg_log_description & phraseEntryName & " , user-role " & NtlsUser.GetOperatorName & "-" & NtlsUser.GetRoleName
22120         Call sdg_log.InsertLog(Sdg("SDG_ID"), _
                                 "RE.AssignPapInspection", _
                              sdg_log_description)
              '----------------------------------------------------------------
22130     Else
22140         MsgBox "Inspection Plan was not updated." & vbCrLf & "Plan:  " & _
                  phraseEntryName
22150     End If
          
          Dim RecInspectionLogCountByRole As ADODB.Recordset
          Dim RecInspectionPlanCount As ADODB.Recordset
          Dim InspectionLogCountByRole As Integer
          Dim InspectionPlanCount As Integer

          
22160     Set RecInspectionLogCountByRole = Con.Execute("select count(*) as count from " & _
              "lims_sys.inspection_log log " & _
              "where log.table_name = 'SDG' and " & _
              "log.table_key = " & Sdg("SDG_ID") & " and " & _
              "log.role_id = " & NtlsUser.GetRoleId)
22170     InspectionLogCountByRole = CInt(nte(RecInspectionLogCountByRole("COUNT")))
          
22180     If Not phrase.EOF Then
22190         inspectionPlanId = inspection("inspection_plan_id")
22200     Else
22210         inspectionPlanId = Sdg("INSPECTION_PLAN_ID")
22220     End If
22230     newInspection = inspectionPlanId
          
22240     Set RecInspectionPlanCount = Con.Execute("select count(*) as count from lims_sys.inspection_entry entry " & _
              "where entry.inspection_plan_id = " & inspectionPlanId & " and " & _
              "entry.role_id = " & NtlsUser.GetRoleId)
22250     InspectionPlanCount = CInt(nte(RecInspectionPlanCount("COUNT")))

22260     If InspectionPlanCount <= InspectionLogCountByRole Then
22270         MsgBox "This request cannot be authorise by " & Role("NAME")
22280         Exit Function
22290     End If
          
          
22300     If IsQC Then
22310         Set fqc = New FrmQC
22320         Call fqc.Show(vbModal)
22330         If fqc.ConfirmSucceeded Then
22340             Call Con.Execute("update lims_sys.sdg_user set u_qc = '0' " & _
                      "where sdg_id = " & Sdg("SDG_ID"))
22350             qc = "T"
22360         End If
22370         fqc.ConfirmSucceeded = False
22380         Set fqc = Nothing
22390     End If
          
          'update isqc only at the first time
22400     Con.Execute "update lims_sys.sdg_user " & _
                      "set u_isqc = '" & btc(IsQC) & "' " & _
                      "where u_isqc is null and sdg_id = " & Sdg("SDG_ID")
22410     If IsConsult Then 'update only if true
22420         Con.Execute "update lims_sys.sdg_user " & _
                          "set u_isconsult = '" & btc(IsConsult) & "' " & _
                          "where sdg_id = " & Sdg("SDG_ID")
22430     End If
          'update each time for the last value
22440     Con.Execute "update lims_sys.sdg_user " & _
                      "set u_ispositive = '" & btc(IsPos) & "' " & _
                      "where sdg_id = " & Sdg("SDG_ID")
          ''''''''''''''''''''''''''''''''''''''''''
          ' for debug
          ''''''''''''''''''''''''''''''''''''''''''
22450     Set papqcid = Con.Execute("select lims.sq_u_papqc.nextval from dual")
22460     Con.Execute "insert into lims_sys.u_papqc (u_papqc_id, name, version, version_status) " & _
              "values (" & papqcid(0) & ",'" & papqcid(0) & "','1','A')"
22470     Con.Execute "insert into lims_sys.u_papqc_user (u_papqc_id, u_sdg_id, u_operator_id, " & _
              "u_phrase_entry, u_old_inspection_id, u_new_inspection_id, u_qc, u_created_on) " & _
              "values (" & papqcid(0) & "," & Sdg("SDG_ID") & "," & NtlsUser.GetOperatorId & ",'" & _
              phraseEntryName & "'," & oldInspection & "," & newInspection & ",'" & qc & "',sysdate)"
          ''''''''''''''''''''''''''''''''''''''''''''''''''
          
22480     AssignPapInspection = True
22490     Exit Function
ErrHnd:
22500     Call ErrHandler("AssignPapInspection")
End Function

Private Function btc(b As Boolean) As String
22510     btc = IIf(b, "T", "F")
End Function


Private Sub SetFirstFocus()
          Dim i As Integer
          Dim typ, Index
22520     On Error GoTo ErrHnd
22530     For i = 1 To PResultIndex
22540         typ = Mid(PResultDesc(i).Tag, 1, 1)
22550         Index = Val(Mid(PResultDesc(i).Tag, 2))
22560         If typ = "T" Then
22570            If PResultText(Index).Container.Visible = True Then
22580                Call PResultText(Index).SetFocus
22590                Exit Sub
22600             End If
22610         End If
22620     Next i
22630     Exit Sub
ErrHnd:
22640     Call ErrHandler("SetFocusFirst")
End Sub

'Private Sub PapAuthoriseMsg()
'    Dim InspectionPlan As ADODB.Recordset
'    If Sdg("STATUS") <> "A" Then
'       Set InspectionPlan = con.Execute("select inspection_plan.name as name from " & _
'            "lims_sys.inspection_plan,lims_sys.sdg " & _
'            "where inspection_plan.inspection_plan_id = sdg.inspection_plan_id " & _
'            "and sdg.sdg_id = " & Sdg("SDG_ID"))
'        If InspectionPlan.EOF Then Exit Sub
'        If UCase(InspectionPlan("NAME")) = UCase("QC and Doctor") Or _
'            UCase(InspectionPlan("NAME")) = UCase("PQC") Then
'            MsgBox "This request should be rechecked by a Physician"
'        End If
'    End If
'End Sub
Private Function GetRankSum() As Integer
22650     On Error GoTo ErrHnd
          Dim Results As ADODB.Recordset
          
22660     GetRankSum = 0
22670     Set Results = Con.Execute( _
              "select sum(rd.u_renk) " & _
              "from lims_sys.u_result_desc_user rd, " & _
              "lims_sys.result_template rt, " & _
              "lims_sys.result r, " & _
              "lims_sys.test t, " & _
              "lims_sys.aliquot a, " & _
              "lims_sys.sample s " & _
              "Where t.aliquot_id = a.aliquot_id " & _
              "and a.sample_id = s.sample_id " & _
              "and r.test_id = t.test_id " & _
              "and s.sdg_id = " & Sdg("SDG_ID") & " " & _
              "and r.original_result = 'T' " & _
              "and r.result_template_id = rt.result_template_id " & _
              "and rt.name = rd.u_template_name")

22680     If Not Results.EOF Then
22690         If nte(Results(0)) <> "" Then
22700             GetRankSum = Results(0)
22710         End If
22720     End If
22730     Results.Close
22740     Exit Function

ErrHnd:
22750     Call ErrHandler("GetRankSum")

End Function

Private Sub InitReferrals()
          Dim phrase As ADODB.Recordset
22760     Set Ref = Nothing
22770     Set Ref = New Referrals.Referral
22780     Set phrase = Con.Execute("select phrase_info, phrase_name from lims_sys.phrase_entry " & _
              "where phrase_id = (select phrase_id from lims_sys.phrase_header where " & _
              "name = 'Refferal Params')")

22790     While Not phrase.EOF
22800         If Trim(CStr(phrase("PHRASE_NAME").Value)) = "match" Then
22810             Ref.DayIntervalForMatch = Trim(CStr(phrase("PHRASE_INFO").Value))
22820         ElseIf Trim(CStr(phrase("PHRASE_NAME").Value)) = "select" Then
22830             Ref.DayIntervalForSelect = Trim(CStr(phrase("PHRASE_INFO").Value))
22840         ElseIf Trim(CStr(phrase("PHRASE_NAME").Value)) = "Connection String" Then
22850             Ref.ConnectionString = Trim(CStr(phrase("PHRASE_INFO").Value))
22860         End If
22870         phrase.MoveNext
22880     Wend

22890     Ref.RequestType = Right(Sdg("EXTERNAL_REFERENCE"), 1)
22900     Ref.requestNumber = Mid(Sdg("EXTERNAL_REFERENCE"), 1, 10)
          
22910     PropsReferralDiagnose(1).Tag = ""
22920     PropsReferralDiagnose(1).Text = ""
22930     PropsReferralDiagnose(2).Tag = ""
22940     PropsReferralDiagnose(2).Text = ""
          
End Sub


'check if there is already an instance of this application
'running at this station, by trying to get a hold of the semaphore:
Private Function IsFirstApplicationInstance() As Boolean
      'On Error GoTo ERR_IsFirstApplicationInstance

22950     IsFirstApplicationInstance = False

          'to handle the mutex:
          Dim X As SECURITY_ATTRIBUTES
          Dim lWaitAnswer As Long
          'Dim Atom As Integer
                 
          'create the mutex and wait for access:
22960     lMutexHandle = CreateMutex(X, True, "RESULT_ENTRY")
22970     If (Err.LastDllError <> ERROR_ALREADY_EXISTS) Then
22980        IsFirstApplicationInstance = True
22990     End If
      '    lWaitAnswer = WaitForSingleObject(lMutexHandle, 10)
      '
      '    'check if got the mutex:
      '    If lWaitAnswer = 0 Then
      '        IsFirstApplicationInstance = True
      '    End If
          
      '    Atom = GlobalFindAtom(MyAtomName)
      '    If Atom = 0 And lWaitAnswer = 0 Then
      '        CurrAtom = GlobalAddAtom(MyAtomName)
      '        IsFirstApplicationInstance = IsFirstApplicationInstance And True
      '    Else
      '        IsFirstApplicationInstance = False
      '    End If
          
23000     Exit Function
ERR_IsFirstApplicationInstance:
23010 MsgBox "ERR_IsFirstApplicationInstance" & vbCrLf & Err.Description
End Function

'release the mutex so a new instance of Result Entry
'could be opened on this workstation:
Private Sub ReleaseApplicationMutex()
23020 On Error GoTo ERR_ReleaseApplicationMutex

23030     ReleaseMutex (lMutexHandle)
23040     CloseHandle (lMutexHandle)
      '    GlobalDeleteAtom CurrAtBom
           
23050     Exit Sub
ERR_ReleaseApplicationMutex:
23060 MsgBox "ERR_ReleaseApplicationMutex" & vbCrLf & Err.Description
End Sub


'report all slides of this request to be moved
'into the tissue archive:
Private Sub UpdateTransferalToTissueArchiveHis(strSdgId As String)
23070 On Error GoTo ERR_UpdateTransferalToTissueArchive
          Dim sql As String

23080     sql = " update lims_sys.aliquot_user au"
23090     sql = sql & " set au.U_ARCHIVE='T'"
23100     sql = sql & " where au.ALIQUOT_ID in"
23110     sql = sql & " ("
23120     sql = sql & "   select a.ALIQUOT_ID"
23130     sql = sql & "   from lims_sys.aliquot a, "
23140     sql = sql & "        lims_sys.sample s"
23150     sql = sql & "   where exists"
23160     sql = sql & "   ("
23170     sql = sql & "      select aliquot_id"
23180     sql = sql & "      from lims_sys.aliquot_formulation"
23190     sql = sql & "      where child_aliquot_id = a.ALIQUOT_ID "
23200     sql = sql & "   )"
23210     sql = sql & "   and a.SAMPLE_ID = s.SAMPLE_ID"
23220     sql = sql & "   and s.SDG_ID = " & strSdgId
23230     sql = sql & " )"
          
23240     Call Con.Execute(sql)
          
23250     Exit Sub
ERR_UpdateTransferalToTissueArchive:
23260 MsgBox "ERR_UpdateTransferalToTissueArchive" & vbCrLf & Err.Description
End Sub

'report all slides of this request to be moved
'into the tissue archive:
Private Sub UpdateTransferalToTissueArchiveCytoPap(strSdgId As String)
23270 On Error GoTo ERR_UpdateTransferalToTissueArchive
          Dim sql As String

23280     sql = " update lims_sys.aliquot_user au"
23290     sql = sql & " set au.U_ARCHIVE='T'"
23300     sql = sql & " where au.ALIQUOT_ID in"
23310     sql = sql & " ("
23320     sql = sql & "   select a.ALIQUOT_ID"
23330     sql = sql & "   from lims_sys.aliquot a, "
23340     sql = sql & "        lims_sys.sample s"
23350     sql = sql & "   where a.SAMPLE_ID = s.SAMPLE_ID"
23360     sql = sql & "   and s.SDG_ID = " & strSdgId
23370     sql = sql & " )"
          
23380     Call Con.Execute(sql)
          
23390     Exit Sub
ERR_UpdateTransferalToTissueArchive:
23400 MsgBox "ERR_UpdateTransferalToTissueArchive" & vbCrLf & Err.Description
End Sub


'we shoe that grid on the buttom-left corner of the screen.
'one row containing all the BLOCKS of the request.
'for each block:
'1. + / - if there's material left
'2. number of tissues
'3. the aliquot name
'the grid is shown OVER the status bar. when the status bar is needed
'the grid goes down and becomes invisible
Private Sub InitAliquotGrid()
23410 On Error GoTo ERR_InitAliquotGrid
      'On Error Resume Next
          Dim X As Integer
          Dim Y As Integer
          Dim iWidth As Integer
          Dim col As Integer
          Dim sql As String
          Dim rs As Recordset
          Dim rsa As Recordset
          Dim s As String
          
      '    sql = " select su.U_MATERIAL, au.U_NUM_OF_TISSUES, a.name"
      '    sql = sql & " from lims_sys.aliquot a,"
      '    sql = sql & "      lims_sys.aliquot_user au, "
      '    sql = sql & "      lims_sys.sample s,"
      '    sql = sql & "   lims_sys.sample_user su"
      '    sql = sql & " where s.SDG_ID = " & Sdg("sdg_id")
      '    sql = sql & " and   s.SAMPLE_ID = su.SAMPLE_ID"
      '    sql = sql & " and   a.SAMPLE_ID = s.SAMPLE_ID"
      '    sql = sql & " and   a.ALIQUOT_ID = au.ALIQUOT_ID"
      '    sql = sql & " and   not exists"
      '    sql = sql & " ("
      '    sql = sql & "   select child_aliquot_id"
      '    sql = sql & "   from lims_sys.aliquot_formulation"
      '    sql = sql & "   where child_aliquot_id = a.ALIQUOT_ID"
      '    sql = sql & " )"
      '    sql = sql & " order by a.aliquot_id"
          
          
23420     s = " select su.u_material, s.sample_id, s.name "
23430     s = s & " from lims_sys.sample s, "
23440     s = s & " lims_sys.sample_user su "
23450     s = s & " where s.sample_id = su.sample_id "
23460     s = s & " and s.sdg_id = " & Sdg("sdg_id")
23470     s = s & " and s.status not in ('X','U','R') "
23480     s = s & " order by su.u_order, s.sample_id "

23490     Set rs = Con.Execute(s)
          
          
          'needed if peviously presented with a scroll
          'and was scrolled right (then we won't see the left cells)
23500     gridAliquots.Clear
23510     gridAliquots.Rows = 0
23520     gridAliquots.Cols = 0
23530     gridAliquots.Width = 0
              
23540     gridAliquots.AllowBigSelection = False
23550     gridAliquots.Enabled = True

23560     gridAliquots.ScrollBars = flexScrollBarNone
23570     gridAliquots.SelectionMode = flexSelectionFree
23580     gridAliquots.AllowUserResizing = flexResizeBoth

23590     gridAliquots.Rows = 1
23600     gridAliquots.Cols = 2
23610     gridAliquots.RowHeight(0) = 240
23620     gridAliquots.Height = 240
23630     gridAliquots.Width = 10695
          
23640     gridAliquots.FixedRows = 0
23650     gridAliquots.FixedCols = 0

23660     gridAliquots.row = 0
          
23670     X = 0
23680     col = 0
23690     iWidth = 0

23700     While Not rs.EOF
23710         col = col + 1
23720         X = X + 1
23730         s = Mid(nte(rs("NAME")), 12)
23740         s = s & IIf(nte(rs("u_material")) = "T", "+", "-")
              's = X & IIf(nte(rs("u_material")) = "T", "+", "-")
23750         gridAliquots.Cols = col
23760         gridAliquots.col = col - 1
23770         gridAliquots.ColWidth(col - 1) = 400
23780         iWidth = iWidth + gridAliquots.ColWidth(col - 1)
23790         gridAliquots.CellAlignment = vbAlignLeft
23800         gridAliquots.Text = s
23810         gridAliquots.CellBackColor = &HC0FFC0

23820         sql = " select au.U_NUM_OF_TISSUES, a.name "
23830         sql = sql & " from lims_sys.aliquot a, "
23840         sql = sql & "      lims_sys.aliquot_user au "
23850         sql = sql & " where a.SAMPLE_ID = " & rs("sample_id")
23860         sql = sql & " and   a.ALIQUOT_ID = au.ALIQUOT_ID"
23870         sql = sql & " and   a.status not in ('X','U','R') "
23880         sql = sql & " and   not exists"
23890         sql = sql & " ("
23900         sql = sql & "   select child_aliquot_id"
23910         sql = sql & "   from lims_sys.aliquot_formulation"
23920         sql = sql & "   where child_aliquot_id = a.ALIQUOT_ID"
23930         sql = sql & " )"
23940         sql = sql & " order by a.aliquot_id"
              
23950         Set rsa = Con.Execute(sql)

23960         Y = 0
23970         While Not rsa.EOF
23980             col = col + 1
23990             Y = Y + 1
24000             s = Mid(nte(rsa("NAME")), 12)
24010             s = s & "(" & nte(rsa("U_NUM_OF_TISSUES")) & ")"
24020             gridAliquots.Cols = col
24030             gridAliquots.col = col - 1
24040             gridAliquots.ColWidth(col - 1) = 1200
24050             iWidth = iWidth + gridAliquots.ColWidth(col - 1)
24060             gridAliquots.CellAlignment = vbLeftJustify
24070             gridAliquots.Text = s
24080             rsa.MoveNext
24090         Wend

24100         rs.MoveNext
24110     Wend
       
      '    While Not rs.EOF
      '        s = IIf(nte(rs("u_material")) = "T", "+", "-")
      '        s = s & ntz(rs("u_num_of_tissues")) & "-"
      '        s = s & Mid(nte(rs("NAME")), 12)
      '
      '        x = x + 1
      '        gridAliquots.Cols = x
      '        gridAliquots.col = x - 1
      '        gridAliquots.ColWidth(x - 1) = 1000
      '        gridAliquots.Text = s
      '
      '        rs.MoveNext
      '    Wend
          
          'scrolling is needed:
          'make place for the scroll bar and show it
24120     If iWidth > gridAliquots.Width Then
24130         gridAliquots.Height = 480
24140         gridAliquots.ScrollBars = flexScrollBarHorizontal
24150     End If
          
          'show the grid OVER the status bar:
24160     gridAliquots.Top = lblStatusBar.Top
24170     gridAliquots.Visible = True
          
24180     Exit Sub
ERR_InitAliquotGrid:

24190 Select Case Err.Number
      Case 6
24200     Resume Next 'overflow - grid issue
24210 Case Else
24220     MsgBox "ERR_InitAliquotGrid" & vbCrLf & Err.Description & vbCrLf & Err.Number
24230 End Select

      'If iWidth > gridAliquots.Width Then
      '    gridAliquots.Height = 480
      '    gridAliquots.ScrollBars = flexScrollBarHorizontal
      'End If
End Sub


'create & lock a semaphore
Private Function AllocateHandle(strSemaphoreName As String) As Boolean
24240 On Error GoTo ERR_AllocateHandle
          
          Dim cmd As New ADODB.Command
          Dim param As ADODB.Parameter
          Dim rs As ADODB.Recordset
          Dim strResult As String
          
          
24250     AllocateHandle = False
          
24260     Set cmd.ActiveConnection = Con
24270     cmd.CommandType = adCmdStoredProc
24280     cmd.CommandText = "LIMS.SEMAPHORE.ALLOCATE_SEMAPHORE"  '"LIMS$ALLOCATE_SEMAPHORE"
          
24290     Set param = New ADODB.Parameter
24300     param.name = "semaphore_name"
24310     param.Type = adVarChar
24320     param.Value = strSemaphoreName
24330     param.Size = 50
24340     param.Direction = adParamInput
24350     Call cmd.parameters.Append(param)
          
24360     Set param = New ADODB.Parameter
24370     param.name = "timeout"
24380     param.Type = adInteger
24390     param.Value = 2
      '    param.Size = 50
24400     param.Direction = adParamInput
24410     Call cmd.parameters.Append(param)
          
24420     Set param = New ADODB.Parameter
24430     param.name = "retval"
24440     param.Type = adVarChar
24450     param.Value = "xxx"
24460     param.Size = 50
24470     param.Direction = adParamReturnValue
24480     Call cmd.parameters.Append(param)

24490     Call cmd.Execute

24500     strResult = CStr(cmd.parameters.Item(2))
24510     Select Case strResult
              Case "Timeout"
24520             Call PrintSemaphoreError(strResult, strSemaphoreName)
24530         Case "Deadlock"
24540             Call PrintSemaphoreError(strResult, strSemaphoreName)
24550         Case "Parameter Error"
24560             Call PrintSemaphoreError(strResult, strSemaphoreName)
24570         Case "Illegal Lock Handle"
24580             Call PrintSemaphoreError(strResult, strSemaphoreName)
24590         Case Else
24600             strHandle = strResult
24610             AllocateHandle = True
24620     End Select

24630     Exit Function
ERR_AllocateHandle:
24640 MsgBox "ERR_AllocateHandle" & vbCrLf & Err.Description
End Function

'release a semaphore held by me:
Private Function ReleaseHandle() As Boolean
24650 On Error GoTo ERR_ReleaseHandle

         
          Dim cmd As New ADODB.Command
          Dim param As ADODB.Parameter
          Dim rs As ADODB.Recordset
          Dim strResult As String
          
24660     Set cmd.ActiveConnection = Con
24670     cmd.CommandType = adCmdStoredProc
24680     cmd.CommandText = "LIMS.SEMAPHORE.RELEASE_SEMAPHORE"
          
24690     Set param = New ADODB.Parameter
24700     param.name = "lockhandle"
24710     param.Type = adVarChar
24720     param.Value = strHandle
24730     param.Size = 50
24740     param.Direction = adParamInput
24750     Call cmd.parameters.Append(param)

24760     Set param = New ADODB.Parameter
24770     param.name = "retval"
24780     param.Type = adVarChar
24790     param.Value = "xxx"
24800     param.Size = 50
24810     param.Direction = adParamReturnValue
24820     Call cmd.parameters.Append(param)
          
24830     Call cmd.Execute
24840     strResult = CStr(cmd.parameters.Item(1))
          
24850     Select Case strResult
              Case "Timeout"
                  'Call PrintSemaphoreError(strResult)
24860         Case "Deadlock"
                  'Call PrintSemaphoreError(strResult)
24870         Case "Parameter Error"
                  'Call PrintSemaphoreError(strResult)
24880         Case "Illegal Lock Handle"
                  'Call PrintSemaphoreError(strResult)
24890         Case "Do not own lock"
                  
24900         Case Else
24910             ReleaseHandle = True
24920     End Select
          
24930     Exit Function
ERR_ReleaseHandle:
24940 MsgBox "ERR_ReleaseHandle" & vbCrLf & Err.Description
End Function

'called in case we can't use the resource we wanted:
Private Sub PrintSemaphoreError(strMsg As String, strSemaphoreName As String)
          Dim strUser As String
24950     strUser = GetSemaphoreOwner(strSemaphoreName)
          
24960     MsgBox "Cannot view request, " & vbCrLf & _
                 "it may be opened at another station" & vbCrLf & _
                 strUser & vbCrLf & _
                 "DB Message: " & strMsg
End Sub

'get details of the owner of a semaphore;
'fails if there is no lock with such semaphore
Private Function GetSemaphoreOwner(strSemaphoreName) As String
24970 On Error GoTo ERR_GetSemaphoreOwner
          
          Dim cmd As New ADODB.Command
          Dim param As ADODB.Parameter
          Dim rs As ADODB.Recordset
          Dim strResult As String
          
          
24980     Set cmd.ActiveConnection = Con
24990     cmd.CommandType = adCmdStoredProc
25000     cmd.CommandText = "LIMS.SEMAPHORE.GET_OWNER"  '"LIMS$ALLOCATE_SEMAPHORE"
          
25010     Set param = New ADODB.Parameter
25020     param.name = "semaphore_name"
25030     param.Type = adVarChar
25040     param.Value = strSemaphoreName
25050     param.Size = 50
25060     param.Direction = adParamInput
25070     Call cmd.parameters.Append(param)
          
25080     Set param = New ADODB.Parameter
25090     param.name = "user_name"
25100     param.Type = adVarChar
25110     param.Value = ""
25120     param.Size = 50
25130     param.Direction = adParamReturnValue
25140     Call cmd.parameters.Append(param)
          
25150     Set param = New ADODB.Parameter
25160     param.name = "computer_name"
25170     param.Type = adVarChar
25180     param.Value = ""
25190     param.Size = 50
25200     param.Direction = adParamReturnValue
25210     Call cmd.parameters.Append(param)

25220     Call cmd.Execute

25230     strResult = "User Name: " & CStr(cmd.parameters.Item(1)) & _
                      ", Station Name: " & CStr(cmd.parameters.Item(2))
               
25240     GetSemaphoreOwner = strResult
               
25250     Exit Function
ERR_GetSemaphoreOwner:
25260 MsgBox "ERR_GetSemaphoreOwner" & vbCrLf & Err.Description
End Function


'paint the extra-requests button red
'if there are extra requests to this SDG:
Private Sub SignalExtraRequest(strExternalRef As String)
25270 On Error GoTo ERR_SignalExtraRequest
          Dim rs As Recordset
          Dim sql As String

25280     sql = " select 1 "
25290     sql = sql & " from lims_sys.u_extra_request_user ru, "
25300     sql = sql & "      lims_sys.sdg d "
25310     sql = sql & " where ru.U_SDG_ID=d.sdg_id "
          
          'sql = sql & " and   d.external_reference='" & strExternalRef & "'"
           'change this to name in patholab
25320     sql = sql & "  and substr(d.name,1,10) ='" & strExternalRef & "'  "
          
25330     sql = sql & " and   ru.U_STATUS <> 'X' "

25340     Set rs = Con.Execute(sql)
          
25350     If Not rs.EOF Then
25360         cmdAdditionalActions.BackColor = vbRed
25370     Else
25380         cmdAdditionalActions.BackColor = vbButtonFace
25390     End If

25400     Exit Sub
ERR_SignalExtraRequest:
25410 MsgBox "ERR_SignalExtraRequest" & vbCrLf & Err.Description
End Sub


'get the nth operator to sign on the request:
Private Function AuthorizedBy(strSdgId As String, nNumberOfAuthorization) As String
25420 On Error GoTo ERR_AuthorizedBy
          Dim rs As Recordset
          Dim sql As String

25430     sql = " select o.FULL_NAME "
25440     sql = sql & " from lims_sys.operator o"
25450     sql = sql & " where o.OPERATOR_ID=lims.AUTHORIZATION.signed_by"
25460     sql = sql & "('" & strSdgId & "'," & nNumberOfAuthorization & ")"
          
25470     Set rs = Con.Execute(sql)
          
25480     If Not rs.EOF Then
25490         AuthorizedBy = nte(rs("FULL_NAME"))
25500     End If

25510     Exit Function
ERR_AuthorizedBy:
25520 MsgBox "ERR_AuthorizedBy" & vbCrLf & Err.Description
End Function


Private Function getNextStr(ByRef s As String, c As String)
          Dim p
          Dim res
25530     p = InStr(1, s, c)
25540     If (p = 0) Then
25550         res = s
25560         s = ""
25570         getNextStr = res
25580     Else
25590         res = Mid$(s, 1, p - 1)
25600         s = Mid$(s, p + Len(c), Len(s))
25610         getNextStr = res
25620     End If
End Function


Private Function GetSnomedTResultIndex() As Integer
25630 On Error GoTo ERR_GetSnomedTResultIndex

          Dim i As Integer
          Dim typ, Index

25640     GetSnomedTResultIndex = -1

25650     For i = 1 To PResultIndex
              
25660         typ = Mid(PResultDesc(i).Tag, 1, 1)
25670         Index = Val(Mid(PResultDesc(i).Tag, 2))
              
25680         If typ = "T" And UCase(PResultDesc(i).DataField) = UCase("Snomed T") Then
                  
25690             GetSnomedTResultIndex = Index
25700             Exit Function
                  
25710         End If
              
25720     Next i

25730     Exit Function
ERR_GetSnomedTResultIndex:
25740 MsgBox "ERR_GetSnomedTResultIndex" & vbCrLf & Err.Description
End Function


'Get the list of snomeds T from Organ Ctrl;
'insert that data in the relevant locations:
Private Sub SetOrgansSnomedT()
25750 On Error GoTo ERR_SetOrgansSnomedT

          Dim i As Integer
          Dim iSnomedTIndex As Integer
          
25760     iSnomedTIndex = GetSnomedTResultIndex
          
25770     If OrganCtrl.SnomedT <> "" Then
25780         Call AddSnomedTItem(iSnomedTIndex, OrganCtrl.SnomedT)
25790     End If

25800     Exit Sub
ERR_SetOrgansSnomedT:
25810 MsgBox "ERR_SetOrgansSnomedT" & vbCrLf & Err.Description
End Sub


Private Sub AddSnomedTItem(iSnomedTIndex As Integer, strSnomedT As String)
25820 On Error GoTo ERR_AddSnomedMItem
          
25830     PResultText(iSnomedTIndex).Text = strSnomedT

25840     Exit Sub
ERR_AddSnomedMItem:
25850 MsgBox "ERR_AddSnomedTItem" & vbCrLf & Err.Description
End Sub

'Private Function IsInRevision(SdgId As String) As Boolean
'    Dim rst As Recordset
'
'    Set rst = Con.Execute("select 1 from lims_sys.u_letter_control_user" & _
'        " where u_sdg_id = " & SdgId & _
'        " and u_grp_code = '11'")
'
'    If rst.EOF Then
'        IsInRevision = False
'    Else
'        IsInRevision = True
'    End If
'End Function

Private Function GetInspection()
          Dim rst As ADODB.Recordset
          
25860     Set rst = Con.Execute("select i.name from lims_sys.sdg d, lims_sys.inspection_plan i " & _
                      "where d.inspection_plan_id = i.inspection_plan_id " & _
                      "and d.sdg_id = " & Sdg("SDG_ID"))
          'nautilus update
25870     GetInspection = nte(rst(0).Value)
End Function

'---------------------------------------------------------------------------------------
' Procedure : multipleSlidesValidation
' Author    : Yonatan Amir
' Date      : 02/08/2011
' Purpose   : Display message for multiple PAP slides
'---------------------------------------------------------------------------------------
'
Private Function multipleSlidesValidation(SdgId) As Boolean

          Dim aliquotAmountQuery As String
25880     aliquotAmountQuery = "select count ( aliquot_id ) amount " & _
                                  "From lims_sys.sample s, lims_sys.aliquot a " & _
                                  "Where a.sample_id = s.sample_id and s.sdg_id = '" & SdgId & "' " & _
                                  "group by s.sdg_id"
          
          Dim aliquotAmountRecordset As ADODB.Recordset
25890     Set aliquotAmountRecordset = Con.Execute(aliquotAmountQuery)
          
25900     If CInt(aliquotAmountRecordset("AMOUNT")) > 1 Then
25910         Select Case MsgBox("שים\י לב: קיימים מספר סליידים לדרישה", vbOKCancel Or vbExclamation Or vbMsgBoxRight Or vbMsgBoxRtlReading Or vbDefaultButton1, "סליידים מרובים")
              
                  Case vbOK
25920                 multipleSlidesValidation = True
                      
25930             Case vbCancel
25940                 multipleSlidesValidation = False
                      
25950         End Select
          
25960     Else: multipleSlidesValidation = True
          
25970     End If
          
End Function
'ashi Assuta interface
Private Sub ShowAssutaPdfCtrl1_Opened(desc As String)
25980 Call sdg_log.InsertLog(Sdg("SDG_ID"), "ResultEntryAttached.OPEN", desc)
End Sub
Private Sub ShowAssutaPdfCtrl1_Closed(IsRead As Boolean, desc As String)
25990 If (IsRead) Then
26000  Call sdg_log.InsertLog(Sdg("SDG_ID"), "ResultEntryAttached.CLOSE", desc)
26010 Else
26020  Call sdg_log.InsertLog(Sdg("SDG_ID"), "ResultEntryAttached.CLOSE", desc)
26030 End If
End Sub
'end Assuta interface
